{
  "type": "File",
  "start": 0,
  "end": 6805,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 198,
      "column": 2
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 6805,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 198,
        "column": 2
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentBlock",
        "value": "import {describe, it} from 'mocha';\r\nimport {expect} from 'chai';\r\nimport {List, Map} from 'immutable';\r\nimport { ActionCreators } from 'redux-undo';\r\n\r\n\r\n// COMMON IMPORTS\r\nimport T from '../utils/types'\r\nimport { store, config, runtime } from '../store/index'\r\nimport { dispatch_store_config_get_value } from '../store/config/actions'\r\nimport { dispatch_store_runtime_get_value } from '../store/runtime/actions'\r\nimport { dispatch_store_runtime_apps_create } from '../store/runtime/applications/actions'\r\n\r\nimport * as test_load_config from '../store/test/test_load_config'\r\n\r\n\r\n\r\ndescribe('store',\r\n\t() => {\r\n\t\tit('create_store()',\r\n\t\t\t() => {\r\n\t\t\t\tlet state = store.getState()\r\n\t\t\t\tlet config_present = state.config_reducer.present\r\n\t\t\t\tlet runtime_present = state.runtime_reducer\r\n\t\t\t\t\r\n\t\t\t\tlet config_obj = config_present.toJS()\r\n\t\t\t\t// console.log(config_obj, 'config_obj')\r\n\t\t\t\t\r\n\t\t\t\tconfig_obj = config_obj.config\r\n\t\t\t\t\r\n\t\t\t\tif (config_obj.modules && config_obj.modules.error)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(config_obj.modules.error, 'config_obj.modules.error')\r\n\t\t\t\t\tconsole.log(config_obj.modules.errors, 'config_obj.modules.errors')\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(state) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(state).contain.keys('config_reducer', 'runtime_reducer')\r\n\t\t\t\t\r\n\t\t\t\texpect(config_present.has('config')).to.be.true\r\n\t\t\t\texpect(runtime_present.has('runtime')).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(config_present.get('config').has('error')).to.be.false\r\n\t\t\t\texpect(config_present.get('config').has('servers')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('services')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('applications')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('modules')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('plugins')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('security')).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(runtime_present.get('runtime').has('error')).to.be.false\r\n\t\t\t\texpect(runtime_present.get('runtime').has('applications')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('records')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('instances')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('security')).to.be.true\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\tit('store getters',\r\n\t\t\t() => {\r\n\t\t\t\t// let state = store.getState()\r\n\t\t\t\t// let config_present = state.config_reducer.present\r\n\t\t\t\t// let runtime_present = state.runtime_reducer.present\r\n\t\t\t\t\r\n\t\t\t\tlet store_config = devapt.runtime.get_registry().root\r\n\t\t\t\t// let store_runtime = runtime()\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(store_config) ).to.be.true\r\n\t\t\t\t// expect( T.isObject(store_runtime) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tlet value = null;\r\n\t\t\t\t\r\n\t\t\t\t// GET RESOURCES LIST\r\n\t\t\t\texpect(config).contain.keys('get_resources', 'get_views', 'get_models', 'get_menubars', 'get_menus', 'get_connexions', 'get_loggers')\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_resources();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_views();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_models();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_menubars();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_menus();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_connexions();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_loggers();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// GET A RESOURCE\r\n\t\t\t\texpect(config).contain.keys('get_resource', 'get_view', 'get_model', 'get_menubar', 'get_menu', 'get_connexion', 'get_logger')\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('get config resource(\"VIEW_HOME\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst RES_NAME = 'VIEW_HOME'\r\n\t\t\t\tconst RES_CLASS = 'IncludeView'\r\n\t\t\t\t\r\n\t\t\t\tlet value_obj = null\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_resource(RES_NAME)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_view(RES_NAME)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('get config resource(\"HOME_MENUBAR\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst RES_NAME = 'HOME_MENUBAR'\r\n\t\t\t\tconst RES_CLASS = 'Menubar'\r\n\t\t\t\t\r\n\t\t\t\tlet value_obj = null\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_resource(RES_NAME)\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_menubar(RES_NAME)\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('create a runtime application for (\"tutorial-1\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst APP_NAME = 'tutorial-1'\r\n\t\t\t\t\r\n\t\t\t\texpect( config().has('applications') ).to.be.true\r\n\t\t\t\texpect( runtime().has('applications') ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( config.has_application(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.false\r\n\t\t\t\texpect( runtime.has_application(APP_NAME) ).to.be.false\r\n\t\t\t\t\r\n\t\t\t\tdispatch_store_runtime_apps_create(store, APP_NAME, { app_setting_1:'hello' })\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(runtime().get('applications').toMap().toJS(), 'runtime.applications')\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().hasIn(['applications', APP_NAME, 'app_setting_1']) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tstore.dispatch( ActionCreators.undo() )\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\t// expect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.false\r\n\t\t\t\t\r\n\t\t\t\tstore.dispatch( ActionCreators.redo() )\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().hasIn(['applications', APP_NAME, 'app_setting_1']) ).to.be.true\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n",
        "start": 0,
        "end": 6805,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 198,
            "column": 2
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "import {describe, it} from 'mocha';\r\nimport {expect} from 'chai';\r\nimport {List, Map} from 'immutable';\r\nimport { ActionCreators } from 'redux-undo';\r\n\r\n\r\n// COMMON IMPORTS\r\nimport T from '../utils/types'\r\nimport { store, config, runtime } from '../store/index'\r\nimport { dispatch_store_config_get_value } from '../store/config/actions'\r\nimport { dispatch_store_runtime_get_value } from '../store/runtime/actions'\r\nimport { dispatch_store_runtime_apps_create } from '../store/runtime/applications/actions'\r\n\r\nimport * as test_load_config from '../store/test/test_load_config'\r\n\r\n\r\n\r\ndescribe('store',\r\n\t() => {\r\n\t\tit('create_store()',\r\n\t\t\t() => {\r\n\t\t\t\tlet state = store.getState()\r\n\t\t\t\tlet config_present = state.config_reducer.present\r\n\t\t\t\tlet runtime_present = state.runtime_reducer\r\n\t\t\t\t\r\n\t\t\t\tlet config_obj = config_present.toJS()\r\n\t\t\t\t// console.log(config_obj, 'config_obj')\r\n\t\t\t\t\r\n\t\t\t\tconfig_obj = config_obj.config\r\n\t\t\t\t\r\n\t\t\t\tif (config_obj.modules && config_obj.modules.error)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(config_obj.modules.error, 'config_obj.modules.error')\r\n\t\t\t\t\tconsole.log(config_obj.modules.errors, 'config_obj.modules.errors')\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(state) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(state).contain.keys('config_reducer', 'runtime_reducer')\r\n\t\t\t\t\r\n\t\t\t\texpect(config_present.has('config')).to.be.true\r\n\t\t\t\texpect(runtime_present.has('runtime')).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(config_present.get('config').has('error')).to.be.false\r\n\t\t\t\texpect(config_present.get('config').has('servers')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('services')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('applications')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('modules')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('plugins')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('security')).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(runtime_present.get('runtime').has('error')).to.be.false\r\n\t\t\t\texpect(runtime_present.get('runtime').has('applications')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('records')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('instances')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('security')).to.be.true\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\tit('store getters',\r\n\t\t\t() => {\r\n\t\t\t\t// let state = store.getState()\r\n\t\t\t\t// let config_present = state.config_reducer.present\r\n\t\t\t\t// let runtime_present = state.runtime_reducer.present\r\n\t\t\t\t\r\n\t\t\t\tlet store_config = devapt.runtime.get_registry().root\r\n\t\t\t\t// let store_runtime = runtime()\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(store_config) ).to.be.true\r\n\t\t\t\t// expect( T.isObject(store_runtime) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tlet value = null;\r\n\t\t\t\t\r\n\t\t\t\t// GET RESOURCES LIST\r\n\t\t\t\texpect(config).contain.keys('get_resources', 'get_views', 'get_models', 'get_menubars', 'get_menus', 'get_connexions', 'get_loggers')\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_resources();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_views();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_models();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_menubars();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_menus();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_connexions();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_loggers();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// GET A RESOURCE\r\n\t\t\t\texpect(config).contain.keys('get_resource', 'get_view', 'get_model', 'get_menubar', 'get_menu', 'get_connexion', 'get_logger')\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('get config resource(\"VIEW_HOME\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst RES_NAME = 'VIEW_HOME'\r\n\t\t\t\tconst RES_CLASS = 'IncludeView'\r\n\t\t\t\t\r\n\t\t\t\tlet value_obj = null\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_resource(RES_NAME)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_view(RES_NAME)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('get config resource(\"HOME_MENUBAR\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst RES_NAME = 'HOME_MENUBAR'\r\n\t\t\t\tconst RES_CLASS = 'Menubar'\r\n\t\t\t\t\r\n\t\t\t\tlet value_obj = null\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_resource(RES_NAME)\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_menubar(RES_NAME)\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('create a runtime application for (\"tutorial-1\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst APP_NAME = 'tutorial-1'\r\n\t\t\t\t\r\n\t\t\t\texpect( config().has('applications') ).to.be.true\r\n\t\t\t\texpect( runtime().has('applications') ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( config.has_application(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.false\r\n\t\t\t\texpect( runtime.has_application(APP_NAME) ).to.be.false\r\n\t\t\t\t\r\n\t\t\t\tdispatch_store_runtime_apps_create(store, APP_NAME, { app_setting_1:'hello' })\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(runtime().get('applications').toMap().toJS(), 'runtime.applications')\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().hasIn(['applications', APP_NAME, 'app_setting_1']) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tstore.dispatch( ActionCreators.undo() )\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\t// expect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.false\r\n\t\t\t\t\r\n\t\t\t\tstore.dispatch( ActionCreators.redo() )\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().hasIn(['applications', APP_NAME, 'app_setting_1']) ).to.be.true\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n",
      "start": 0,
      "end": 6805,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 2
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "import {describe, it} from 'mocha';\r\nimport {expect} from 'chai';\r\nimport {List, Map} from 'immutable';\r\nimport { ActionCreators } from 'redux-undo';\r\n\r\n\r\n// COMMON IMPORTS\r\nimport T from '../utils/types'\r\nimport { store, config, runtime } from '../store/index'\r\nimport { dispatch_store_config_get_value } from '../store/config/actions'\r\nimport { dispatch_store_runtime_get_value } from '../store/runtime/actions'\r\nimport { dispatch_store_runtime_apps_create } from '../store/runtime/applications/actions'\r\n\r\nimport * as test_load_config from '../store/test/test_load_config'\r\n\r\n\r\n\r\ndescribe('store',\r\n\t() => {\r\n\t\tit('create_store()',\r\n\t\t\t() => {\r\n\t\t\t\tlet state = store.getState()\r\n\t\t\t\tlet config_present = state.config_reducer.present\r\n\t\t\t\tlet runtime_present = state.runtime_reducer\r\n\t\t\t\t\r\n\t\t\t\tlet config_obj = config_present.toJS()\r\n\t\t\t\t// console.log(config_obj, 'config_obj')\r\n\t\t\t\t\r\n\t\t\t\tconfig_obj = config_obj.config\r\n\t\t\t\t\r\n\t\t\t\tif (config_obj.modules && config_obj.modules.error)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(config_obj.modules.error, 'config_obj.modules.error')\r\n\t\t\t\t\tconsole.log(config_obj.modules.errors, 'config_obj.modules.errors')\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(state) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(state).contain.keys('config_reducer', 'runtime_reducer')\r\n\t\t\t\t\r\n\t\t\t\texpect(config_present.has('config')).to.be.true\r\n\t\t\t\texpect(runtime_present.has('runtime')).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(config_present.get('config').has('error')).to.be.false\r\n\t\t\t\texpect(config_present.get('config').has('servers')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('services')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('applications')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('modules')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('plugins')).to.be.true\r\n\t\t\t\texpect(config_present.get('config').has('security')).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect(runtime_present.get('runtime').has('error')).to.be.false\r\n\t\t\t\texpect(runtime_present.get('runtime').has('applications')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('records')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('instances')).to.be.true\r\n\t\t\t\texpect(runtime_present.get('runtime').has('security')).to.be.true\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\tit('store getters',\r\n\t\t\t() => {\r\n\t\t\t\t// let state = store.getState()\r\n\t\t\t\t// let config_present = state.config_reducer.present\r\n\t\t\t\t// let runtime_present = state.runtime_reducer.present\r\n\t\t\t\t\r\n\t\t\t\tlet store_config = devapt.runtime.get_registry().root\r\n\t\t\t\t// let store_runtime = runtime()\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(store_config) ).to.be.true\r\n\t\t\t\t// expect( T.isObject(store_runtime) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tlet value = null;\r\n\t\t\t\t\r\n\t\t\t\t// GET RESOURCES LIST\r\n\t\t\t\texpect(config).contain.keys('get_resources', 'get_views', 'get_models', 'get_menubars', 'get_menus', 'get_connexions', 'get_loggers')\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_resources();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_views();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_models();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_menubars();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_menus();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_connexions();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tvalue = config.get_loggers();\r\n\t\t\t\t// console.log(value, 'value')\r\n\t\t\t\texpect( T.isArray(value) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// GET A RESOURCE\r\n\t\t\t\texpect(config).contain.keys('get_resource', 'get_view', 'get_model', 'get_menubar', 'get_menu', 'get_connexion', 'get_logger')\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('get config resource(\"VIEW_HOME\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst RES_NAME = 'VIEW_HOME'\r\n\t\t\t\tconst RES_CLASS = 'IncludeView'\r\n\t\t\t\t\r\n\t\t\t\tlet value_obj = null\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_resource(RES_NAME)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_view(RES_NAME)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\t\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('get config resource(\"HOME_MENUBAR\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst RES_NAME = 'HOME_MENUBAR'\r\n\t\t\t\tconst RES_CLASS = 'Menubar'\r\n\t\t\t\t\r\n\t\t\t\tlet value_obj = null\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_resource(RES_NAME)\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t\t\r\n\t\t\t\tvalue_obj = config.get_menubar(RES_NAME)\r\n\t\t\t\t// console.log(value_obj, 'value_obj')\r\n\t\t\t\texpect( T.isObject(value_obj) ).to.be.true\r\n\t\t\t\texpect( T.isString(value_obj.class_name) ).to.be.true\r\n\t\t\t\texpect( value_obj.class_name ).to.be.equal(RES_CLASS)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tit('create a runtime application for (\"tutorial-1\")',\r\n\t\t\t() => {\r\n\t\t\t\tconst APP_NAME = 'tutorial-1'\r\n\t\t\t\t\r\n\t\t\t\texpect( config().has('applications') ).to.be.true\r\n\t\t\t\texpect( runtime().has('applications') ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( config.has_application(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.false\r\n\t\t\t\texpect( runtime.has_application(APP_NAME) ).to.be.false\r\n\t\t\t\t\r\n\t\t\t\tdispatch_store_runtime_apps_create(store, APP_NAME, { app_setting_1:'hello' })\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(runtime().get('applications').toMap().toJS(), 'runtime.applications')\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().hasIn(['applications', APP_NAME, 'app_setting_1']) ).to.be.true\r\n\t\t\t\t\r\n\t\t\t\tstore.dispatch( ActionCreators.undo() )\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\t// expect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.false\r\n\t\t\t\t\r\n\t\t\t\tstore.dispatch( ActionCreators.redo() )\r\n\t\t\t\t\r\n\t\t\t\texpect( config().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().get('applications').toMap().has(APP_NAME) ).to.be.true\r\n\t\t\t\texpect( runtime().hasIn(['applications', APP_NAME, 'app_setting_1']) ).to.be.true\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n",
      "start": 0,
      "end": 6805,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 2
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6805,
      "end": 6805,
      "loc": {
        "start": {
          "line": 198,
          "column": 2
        },
        "end": {
          "line": 198,
          "column": 2
        }
      }
    }
  ]
}