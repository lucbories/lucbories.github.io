[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/default_plugins/services_default_plugin.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\nimport _      from 'lodash'\r\n\r\n// SERVER IMPORTS\r\nimport T               from 'devapt-core-common/dist/js/utils/types'\r\nimport ServicesPlugin  from 'devapt-core-common/dist/js/plugins/services_plugin'\r\nimport Service         from 'devapt-core-common/dist/js/services/service'\r\nimport ServiceProvider from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceConsumer from 'devapt-core-common/dist/js/services/service_consumer_by_url'\r\n\r\n\r\n/**\r\n * Default plugins name/class path map.\r\n * @private\r\n * @type {object}\r\n */\r\nconst default_plugins_map = {\r\n\t'ping_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/ping/ping_svc_provider'\r\n\t},\r\n\t'html_assets_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/assets/assets_svc_provider'\r\n\t},\r\n\t'logs_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/logs/logs_svc_provider'\r\n\t},\r\n\t'topology_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/topology/topology_svc_provider'\r\n\t},\r\n\t'messages_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/messages/messages_svc_provider'\r\n\t},\r\n\t'resources_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/resources/resources_svc_provider'\r\n\t},\r\n\t'metrics_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/metrics/metrics_svc_provider'\r\n\t},\r\n\t'middlewares_svc':{\r\n\t\t'provider':'devapt-core-services/dist/js/services/middlewares/middlewares_svc_provider'\r\n\t}\r\n}\r\n// 'rest_api_models_query':    'devapt-core-services/dist/js/services/crud/crud_service',\r\n// 'rest_api_models_modifier': 'devapt-core-services/dist/js/services/crud/crud_service',\r\n// 'rest_api_resources_query': 'devapt-core-services/dist/js/services/resource/resources_service',\r\n// 'security':                 'devapt-core-services/dist/js/services/security/security_service'\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/default_plugins/services_default_plugin'\r\n\r\n\r\n\r\n/**\r\n * Plugin class for default services.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class DefaultServicesPlugin extends ServicesPlugin\r\n{\r\n\t/**\r\n     * Create a DefaultServicesPlugin instance.\r\n\t * \r\n\t * @param {RuntimeBase} arg_runtime - runtime instance.\r\n\t * @param {PluginsManager} arg_manager - plugins manager.\r\n\t * \r\n\t * @returns {nothing}\r\n     */\r\n\tconstructor(arg_runtime, arg_manager)\r\n\t{\r\n\t\tassert( T.isObject(arg_runtime) && arg_runtime.is_base_runtime, context + ':constructor:bad runtime instance' )\r\n\t\tassert( T.isObject(arg_manager), context + ':constructor:bad plugins manager instance' )\r\n\r\n\t\tsuper(arg_runtime, arg_manager, 'DefaultServices', '1.0.0')\r\n\r\n\t\t/**\r\n\t\t * Services classes.\r\n\t\t * @private\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis._services_classes = {}\r\n\r\n\t\t// FILL SERVICES CLASSES\r\n\t\t_.forEach(\r\n\t\t\tdefault_plugins_map,\r\n\t\t\t(value, svc_name)=>{\r\n\t\t\t\tconsole.log('service [' + svc_name + '] configuration=', value)\r\n\r\n\t\t\t\t// TEMPORARY DEFAULT CLASSES\r\n\t\t\t\tlet provider_class = ServiceProvider\r\n\t\t\t\tlet consumer_class = ServiceConsumer\r\n\t\t\t\tlet service_class  = Service\r\n\t\t\t\t\r\n\t\t\t\t// GET SERVICE CLASS\r\n\t\t\t\tif ( T.isClass(value) )\r\n\t\t\t\t{\r\n\t\t\t\t\tservice_class = value\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// GET SERVICE CLASS FILE\r\n\t\t\t\tif ( T.isString(value) )\r\n\t\t\t\t{\r\n\t\t\t\t\tservice_class = this.load_feature_class(value)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// GET SERVICE CONFIGURATION\r\n\t\t\t\tif ( T.isObject(value) )\r\n\t\t\t\t{\r\n\t\t\t\t\t// GET SERVICE PROVIDER CLASS FILE\r\n\t\t\t\t\tif ( T.isString(value.provider) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log('service [' + svc_name + '] configuration:value.provider', value.provider)\r\n\t\t\t\t\t\tprovider_class = this.load_feature_class(value.provider)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// GET SERVICE CONSUMER CLASS FILE\r\n\t\t\t\t\tif ( T.isString(value.consumer) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log('service [' + svc_name + '] configuration:value.consumer', value.consumer)\r\n\t\t\t\t\t\tconsumer_class = this.load_feature_class(value.consumer)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// GET SERVICE CLASS FILE\r\n\t\t\t\t\tif ( T.isString(value.service) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log('service [' + svc_name + '] configuration:value.service', value.service)\r\n\t\t\t\t\t\tservice_class = this.load_feature_class(value.service)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// CHECK SERVICES CLASSES\r\n\t\t\t\tif ( ! T.isClass(service_class) || ! T.isClass(provider_class) || ! T.isClass(consumer_class) )\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log('service [' + svc_name + '] service_class', service_class)\r\n\t\t\t\t\tconsole.log('service [' + svc_name + '] provider_class', provider_class)\r\n\t\t\t\t\tconsole.log('service [' + svc_name + '] consumer_class', consumer_class)\r\n\t\t\t\t\tconsole.error(context + ':constructor:bad classes for service=' + svc_name)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// REGISTER SERVICES CLASSES\r\n\t\t\t\tconsole.log(context + ':constructor:register classes for service=' + svc_name)\r\n\t\t\t\tthis._services_classes[svc_name] = {\r\n\t\t\t\t\tservice:service_class,\r\n\t\t\t\t\tprovider:provider_class,\r\n\t\t\t\t\tconsumer:consumer_class\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\t\r\n\r\n\r\n\t/**\r\n     * Test if a feature class is known into self contained plugins.\r\n\t * \r\n     * @param {string} arg_class_name - feature class name.\r\n\t * \r\n     * @returns {boolean} feature class found or not.\r\n     */\r\n\thas(arg_class_name)\r\n\t{\r\n\t\treturn (arg_class_name in this._services_classes)\r\n\t}\r\n\t\r\n\t\r\n    \r\n\t/**\r\n     * Create a component instance.\r\n\t * \r\n     * @param {string} arg_class_name - type or class feature name.\r\n     * @param {string} arg_name - feature name.\r\n     * @param {object} arg_settings - feature settings plain object.\r\n     * @param {object} arg_state - feature initial state plain object (optional).\r\n\t * \r\n     * @returns {object} feature instance.\r\n     */\r\n\tcreate(arg_class_name, arg_name, arg_settings, arg_state)\r\n\t{\r\n\t\tassert( T.isString(arg_class_name), context + ':bad class string')\r\n\t\tassert( T.isString(arg_name), context + ':bad name string')\r\n\t\tassert( T.isObject(arg_settings), context + ':bad settings object')\r\n\t\t\r\n\t\tconst found = (arg_class_name in this._services_classes)\r\n\t\tassert( found, context + ':create:feature name not found')\r\n\t\t\r\n\t\tconst service_classes = this._services_classes[arg_class_name]\r\n\r\n\t\tif ( T.isFunction(arg_settings.has) )\r\n\t\t{\r\n\t\t\targ_settings = arg_settings.set('provider_class', service_classes.provider)\r\n\t\t\targ_settings = arg_settings.set('consumer_class', service_classes.consumer)\r\n\t\t} else {\r\n\t\t\targ_settings.provider_class = service_classes.provider\r\n\t\t\targ_settings.consumer_class = service_classes.consumer\r\n\t\t}\r\n\t\t\r\n\t\treturn super.create(arg_class_name, arg_name, arg_settings, arg_state)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n     * Get a feature class.\r\n\t * \r\n     * @param {string} arg_class_name - feature class name.\r\n\t * \r\n     * @returns {object} feature class.\r\n     */\r\n\tget_feature_class(arg_class_name)\r\n\t{\r\n\t\tassert( T.isString(arg_class_name), context + ':create:bad name string')\r\n\t\t\r\n\t\tconst found = (arg_class_name in this._services_classes)\r\n\t\tassert( found, context + ':create:feature name not found')\r\n\t\t\r\n\t\tconst service_classes = this._services_classes[arg_class_name]\r\n\t\t\r\n\t\treturn service_classes.service\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/default_plugins/services_default_plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "default_plugins_map",
    "memberof": "js/default_plugins/services_default_plugin.js",
    "static": true,
    "longname": "js/default_plugins/services_default_plugin.js~default_plugins_map",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/default_plugins/services_default_plugin.js",
    "importStyle": null,
    "description": "Default plugins name/class path map.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "context",
    "memberof": "js/default_plugins/services_default_plugin.js",
    "static": true,
    "longname": "js/default_plugins/services_default_plugin.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/default_plugins/services_default_plugin.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 53,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "DefaultServicesPlugin",
    "memberof": "js/default_plugins/services_default_plugin.js",
    "static": true,
    "longname": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/default_plugins/services_default_plugin.js",
    "importStyle": "DefaultServicesPlugin",
    "description": "Plugin class for default services.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/plugins/services_plugin~ServicesPlugin"
    ]
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin#constructor",
    "access": "public",
    "description": "Create a DefaultServicesPlugin instance.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RuntimeBase"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_runtime",
        "description": "runtime instance."
      },
      {
        "nullable": null,
        "types": [
          "PluginsManager"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_manager",
        "description": "plugins manager."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_services_classes",
    "memberof": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin",
    "static": false,
    "longname": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin#_services_classes",
    "access": "private",
    "description": "Services classes.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "has",
    "memberof": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin#has",
    "access": "public",
    "description": "Test if a feature class is known into self contained plugins.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} feature class found or not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_class_name",
        "description": "feature class name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "feature class found or not."
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "create",
    "memberof": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin#create",
    "access": "public",
    "description": "Create a component instance.",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} feature instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_class_name",
        "description": "type or class feature name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_name",
        "description": "feature name."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_settings",
        "description": "feature settings plain object."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_state",
        "description": "feature initial state plain object (optional)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "feature instance."
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "get_feature_class",
    "memberof": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/default_plugins/services_default_plugin.js~DefaultServicesPlugin#get_feature_class",
    "access": "public",
    "description": "Get a feature class.",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} feature class."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_class_name",
        "description": "feature class name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "feature class."
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "js/executables/executable_command.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T          from 'devapt-core-common/dist/js/utils/types'\r\nimport Executable from 'devapt-core-common/dist/js/base/executable'\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/executables/executable_command'\r\n\r\n\r\n\r\n/**\r\n *  @file todo Executable command class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class ExecutableCommand extends Executable\r\n{\r\n\t/**\r\n\t * Create a ExecutableCommand instance.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(context)\r\n\r\n\t\t/**\r\n\t\t * Executable settings.\r\n\t\t * @protected\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis.store_config = undefined\r\n\t\t\r\n\t\t/**\r\n\t\t * Executable server.\r\n\t\t * @protected\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis.server = undefined\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Prepare an execution with contextual informations.\r\n\t * \r\n\t * @param {object} arg_settings - execution settings.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tprepare(arg_settings)\r\n\t{\r\n\t\tassert( T.isObject(arg_settings), context + ':no given config')\r\n\t\tthis.store_config = arg_settings\r\n\t\t\r\n\t\tassert(T.isObject(this.store_config), context + ':bad config object')\r\n\t\t\r\n\t\tassert(T.isObject(this.store_config.server), context + ':bad server object')\r\n\t\tassert(this.store_config.server.is_server, context + ':bad server instance')\r\n\t\t\r\n\t\tthis.server = this.store_config.server\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Execution with contextual informations.\r\n\t * \r\n\t * @param {object} arg_data - execution datas.\r\n\t * \r\n\t * @returns {object} promise\r\n\t */\r\n\texecute(arg_data)\r\n\t{\r\n\t\t// CHECK APPLICATION\r\n\t\tassert(T.isObject(arg_data), context + ':bad application object')\r\n\t\tassert(arg_data.is_topology_define_application, context + ':bad application instance')\r\n\t\tconst application = arg_data\r\n\t\tthis.info('Execute: add server route for ' + application.$name)\r\n\t\t\r\n\t\t// CHECK SERVER\r\n\t\tconst server_instance = this.server\r\n\t\tassert(T.isString(server_instance.server_type), context + ':bad server_instance.server_type string')\r\n\t\t// assert(this.store_config.server_types.indexOf(server_instance.server_type) > -1, context + ':server_instance.server_type not valid')\r\n\t\t// console.log(server_instance, 'server_instance')\r\n\t\t// console.log(server_instance.server, 'server_instance.server')\r\n\t\t// assert(T.isObject(server_instance.server), context + ':bad server_instance.server object')\r\n\t\tassert(T.isObject(server_instance.server) || T.isFunction(server_instance.server), context + ':bad server_instance.server object or function')\r\n\t\t\r\n\t\treturn Promise.resolve()\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/executables/executable_command.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "context",
    "memberof": "js/executables/executable_command.js",
    "static": true,
    "longname": "js/executables/executable_command.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/executables/executable_command.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 13,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "ExecutableCommand",
    "memberof": "js/executables/executable_command.js",
    "static": true,
    "longname": "js/executables/executable_command.js~ExecutableCommand",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/executables/executable_command.js",
    "importStyle": "ExecutableCommand",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "todo Executable command class."
      },
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/base/executable~Executable"
    ]
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/executables/executable_command.js~ExecutableCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_command.js~ExecutableCommand#constructor",
    "access": "public",
    "description": "Create a ExecutableCommand instance.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "store_config",
    "memberof": "js/executables/executable_command.js~ExecutableCommand",
    "static": false,
    "longname": "js/executables/executable_command.js~ExecutableCommand#store_config",
    "access": "protected",
    "description": "Executable settings.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "server",
    "memberof": "js/executables/executable_command.js~ExecutableCommand",
    "static": false,
    "longname": "js/executables/executable_command.js~ExecutableCommand#server",
    "access": "protected",
    "description": "Executable server.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "prepare",
    "memberof": "js/executables/executable_command.js~ExecutableCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_command.js~ExecutableCommand#prepare",
    "access": "public",
    "description": "Prepare an execution with contextual informations.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_settings",
        "description": "execution settings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "execute",
    "memberof": "js/executables/executable_command.js~ExecutableCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_command.js~ExecutableCommand#execute",
    "access": "public",
    "description": "Execution with contextual informations.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "execution datas."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "promise"
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "js/executables/executable_route.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T             from 'devapt-core-common/dist/js/utils/types'\r\nimport Executable    from 'devapt-core-common/dist/js/base/executable'\r\nimport {get_runtime} from 'devapt-core-common/dist/js/base/runtime'\r\n\r\n\r\n// SERVER IMPORTS\r\n\r\n\r\n/**\r\n * Runtime instance.\r\n * @private\r\n * @type {RuntimeBase}\r\n */\r\nconst runtime = get_runtime()\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/executables/executable_route'\r\n\r\n\r\n\r\n/**\r\n * @file Route registering base class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class ExecutableRoute extends Executable\r\n{\r\n    /**\r\n     * Create a ExecutableRoute instance.\r\n     * @abstract\r\n     */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(context, runtime.get_logger_manager())\r\n\t\t\r\n\t\t/**\r\n\t\t * Executable settings.\r\n\t\t * @protected\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis.store_config = undefined\r\n\t\t\r\n\t\t/**\r\n\t\t * Executable server.\r\n\t\t * @protected\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis.server = undefined\r\n\t}\r\n\t\r\n\t\r\n    \r\n\t/**\r\n     * Prepare an execution with contextual informations.\r\n     * @override\r\n\t * \r\n     * @param {object} arg_settings - execution settings.\r\n\t * \r\n     * @returns {nothing}\r\n     */\r\n\tprepare(arg_settings)\r\n\t{\r\n\t\t// console.log(context + ':prepare:arg_settings', arg_settings)\r\n\t\t\r\n\t\tassert( T.isObject(arg_settings), context + ':no given config')\r\n\t\tthis.store_config = arg_settings\r\n\t\t\r\n\t\tassert(T.isObject(this.store_config), context + ':bad config object')\r\n\t\t\r\n\t\tassert(T.isObject(this.store_config.server), context + ':bad server object')\r\n\t\tassert(this.store_config.server.is_server, context + ':bad server instance')\r\n\t\t\r\n\t\tthis.server = this.store_config.server\r\n\t}\r\n    \r\n\t\r\n\r\n\t/**\r\n     * Execution with contextual informations.\r\n     * @override\r\n\t * \r\n     * @param {object} arg_data - Application instance.\r\n\t * \r\n     * @returns {object} promise.\r\n     */\r\n\texecute(arg_data)\r\n\t{\r\n\t\t// console.log(context + ':execute:store_config', this.store_config)\r\n\t\t\r\n\t\t// CHECK APPLICATION\r\n\t\tassert(T.isObject(arg_data), context + ':bad application object')\r\n\t\tassert(arg_data.is_topology_define_application, context + ':bad application instance')\r\n\t\tconst application = arg_data\r\n\t\t\r\n\t\tthis.info('Execute: add server route for ' + application.get_name())\r\n\t\t\r\n\t\t\r\n\t\t// CHECK SERVER\r\n\t\tconst server_instance = this.server\r\n\t\tassert(T.isString(server_instance.server_type), context + ':bad server_instance.server_type string')\r\n\t\tassert(T.isObject(server_instance.server) || T.isFunction(server_instance.server), context + ':bad server_instance.server object or function')\r\n\t\t\r\n\r\n\t\t// LOOP ON ROUTES\r\n\t\tthis.debug('this.store_config.routes', this.store_config.routes)\r\n\t\tlet routes_registering_promises = []\r\n\t\tassert(T.isArray(this.store_config.routes), context + ':bad store_config.routes object')\r\n\t\tconst cfg_routes = this.store_config.routes\r\n\r\n\t\t// PROBLEM WITH NODEJS 0.10\r\n\t\t// for(let cfg_route of cfg_routes)\r\n\t\t// {\r\n\t\tfor(let cfg_route_index = 0 ; cfg_route_index < cfg_routes.length ; cfg_route_index++)\r\n\t\t{\r\n\t\t\t// GET ROUTE CONFIG\r\n\t\t\tlet cfg_route = cfg_routes[cfg_route_index]\r\n\t\t\tthis.debug('loop on cfg_route', cfg_route)\r\n\t\t\tassert(T.isObject(cfg_route), context + ':bad cfg_route object')\r\n\t\t\tassert(T.isString(cfg_route.route), context + ':bad route string')\r\n\t\t\t\r\n\t\t\t// GET APPLICATION URL\r\n\t\t\tconst app_url = T.isString(application.app_url) ? application.app_url : ''\r\n\t\t\tthis.debug('app_route', app_url)\r\n\t\t\t\r\n\t\t\t// GET ROUTE IS GLOBAL (HAS FULL ROUTE INSIDE)\r\n\t\t\tconst route_is_global = (T.isBoolean(cfg_route.is_global) && cfg_route.is_global == true)\r\n\r\n\t\t\t// GET APPLICATION ROUTE\r\n\t\t\tlet app_route = route_is_global ? cfg_route.route : app_url + cfg_route.route\r\n\t\t\tapp_route = (app_route[0] == '/' ? '' : '/') + app_route\r\n\t\t\tcfg_route.full_route = app_route\r\n\r\n\t\t\t// DEBUG\r\n\t\t\t// console.log('route=%s, app_route=%s, cfg.route=%s, is_global=%s, cond=%s', route, app_route, cfg_route.route, cfg_route.is_global, (cfg_route.is_global && cfg_route.is_global == true))\r\n\t\t\t\r\n\t\t\t// GET REGEXP\r\n\t\t\tcfg_route.route_regexp = undefined\r\n\t\t\tif ( app_route.indexOf('.*') > -1 || app_route.indexOf('$') > -1 || app_route.indexOf('^') > -1 )\r\n\t\t\t{\r\n\t\t\t\tcfg_route.route_regexp = new RegExp( app_route.replace('/', '\\/') )\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.debug('route', cfg_route.full_route.toString())\r\n\t\t\tthis.debug('directory', cfg_route.directory)\r\n\t\t\t\r\n\t\t\tconst route_resistering_promise = this.process_route(server_instance, application, cfg_route, arg_data)\r\n\t\t\troutes_registering_promises.push(route_resistering_promise)\r\n            \r\n\t\t\tthis.info('registering route [' + app_route + '] for application [' + application.$name + ']')\r\n\t\t}\r\n        \r\n\t\treturn Promise.all(routes_registering_promises)\r\n\t}\r\n\r\n\t\r\n    \r\n\t/**\r\n     * Process a route registering.\r\n\t * \r\n     * @param {Server} arg_server - Server instance.\r\n     * @param {TopologyDefineApplication} arg_application - Application instance.\r\n     * @param {object} arg_cfg_route - plain object route configuration.\r\n     * @param {object} arg_data - plain object contextual datas.\r\n\t * \r\n     * @returns {Promise} - Promise(boolean) with (true:success, false: failure).\r\n     */\r\n\tprocess_route(arg_server, arg_application, arg_cfg_route, arg_data)\r\n\t{\r\n\t\t// DEBUG\r\n\t\t// console.log(arg_cfg_route, 'arg_cfg_route')\r\n\t\t\r\n\t\t// GET ROUTE CALLBACK\r\n\t\tconst route_cb = this.get_route_cb(arg_application, arg_cfg_route, arg_data)\r\n\t\tif (!route_cb)\r\n\t\t{\r\n\t\t\tconsole.error('bad route callback', context)\r\n\t\t\treturn Promise.reject(context + ':process_route:bad route callback')\r\n\t\t}\r\n\r\n\t\t// CHECK SERVER\r\n\t\tif ( ! T.isObject(arg_server) || ! arg_server.is_server || ! arg_server.is_routable_server )\r\n\t\t{\r\n\t\t\treturn Promise.reject(context + ':process_route:bad server type')\r\n\t\t}\r\n        \r\n\t\t// ADD ROUTE HANDLER\r\n\t\ttry\r\n\t\t{\r\n\t\t\targ_server.add_get_route(arg_cfg_route, route_cb)\r\n\r\n\t\t\treturn Promise.resolve(true)\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tconsole.error(e, context)\r\n\t\t\tconst cfg_route_str = JSON.stringify(arg_cfg_route)\r\n\t\t\treturn Promise.reject(context + ':process_route:' + e.toString() + ' for route config=[' + cfg_route_str + ']')\r\n\t\t}\r\n\t}\r\n    \r\n\r\n\t\r\n\t/**\r\n     * Callback for route handling.\r\n     * @abstract\r\n\t * \r\n     * @param {TopologyDefineApplication} arg_application - Application instance.\r\n     * @param {object} arg_cfg_route - plain object route configuration.\r\n     * @param {object} arg_data - plain object contextual datas.\r\n\t * \r\n     * @param {function} route handler.\r\n     */\r\n\tget_route_cb(/*arg_application, arg_cfg_route, arg_data*/)\r\n\t{\r\n\t\tassert(false, context + ':get_route_cb(cfg_route) should be implemented')\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Callback for redirect route handling.\r\n\t * \r\n\t * @param {TopologyDefineApplication} arg_application - Application instance.\r\n\t * @param {object} arg_cfg_route - plain object route configuration.\r\n\t * @param {object} arg_data - plain object contextual datas.\r\n\t * \r\n\t * @param {function} route handler.\r\n\t */\r\n\tget_route_redirect_cb(arg_application, arg_cfg_route/*, arg_data*/)\r\n\t{\r\n\t\tassert(T.isString(arg_cfg_route.redirect), context + ':bad redirect route string')\r\n\t\t\r\n\t\treturn (req, res/*, next*/) => {\r\n\t\t\tconst url = runtime.context.get_url_with_credentials(arg_cfg_route.redirect, req)\r\n\t\t\tres.redirect(url)\r\n\t\t}\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/executables/executable_route.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "runtime",
    "memberof": "js/executables/executable_route.js",
    "static": true,
    "longname": "js/executables/executable_route.js~runtime",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/executables/executable_route.js",
    "importStyle": null,
    "description": "Runtime instance.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "RuntimeBase"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "context",
    "memberof": "js/executables/executable_route.js",
    "static": true,
    "longname": "js/executables/executable_route.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/executables/executable_route.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 24,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "ExecutableRoute",
    "memberof": "js/executables/executable_route.js",
    "static": true,
    "longname": "js/executables/executable_route.js~ExecutableRoute",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/executables/executable_route.js",
    "importStyle": "ExecutableRoute",
    "description": "",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "Route registering base class."
      },
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/base/executable~Executable"
    ]
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#constructor",
    "access": "public",
    "description": "Create a ExecutableRoute instance.",
    "lineNumber": 39,
    "abstract": true
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "store_config",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#store_config",
    "access": "protected",
    "description": "Executable settings.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "server",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#server",
    "access": "protected",
    "description": "Executable server.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "prepare",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#prepare",
    "access": "public",
    "description": "Prepare an execution with contextual informations.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_settings",
        "description": "execution settings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    },
    "override": true
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "execute",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#execute",
    "access": "public",
    "description": "Execution with contextual informations.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} promise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "Application instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "promise."
    },
    "override": true
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "process_route",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#process_route",
    "access": "public",
    "description": "Process a route registering.",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Promise(boolean) with (true:success, false: failure)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_server",
        "description": "Server instance."
      },
      {
        "nullable": null,
        "types": [
          "TopologyDefineApplication"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise(boolean) with (true:success, false: failure)."
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "get_route_cb",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#get_route_cb",
    "access": "public",
    "description": "Callback for route handling.",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "TopologyDefineApplication"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "handler."
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "get_route_redirect_cb",
    "memberof": "js/executables/executable_route.js~ExecutableRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/executables/executable_route.js~ExecutableRoute#get_route_redirect_cb",
    "access": "public",
    "description": "Callback for redirect route handling.",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "TopologyDefineApplication"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "handler."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "js/services/assets/assets_svc_provider.js",
    "content": "// NPM IMPORTS\r\n\r\n// COMMON IMPORTS\r\nimport T               from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse from 'devapt-core-common/dist/js/services/service_response'\r\n\r\n// SERVICES IMPORTS\r\nimport ExecutableRouteAssets from './executable_route_assets'\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/assets/assets_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Assets service provider class.\r\n * \r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class AssetsSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a assets service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_assets_svc_provider = true\r\n\t\t\r\n\t\t/**\r\n\t\t * Executable instance.\r\n\t\t * @type {Executable}\r\n\t\t */\r\n\t\tthis.exec = new ExecutableRouteAssets()\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn ['list', 'get']\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\r\n\t\t// CHECK OPERANDS\r\n\t\tif ( ! T.isNotEmptyArray(operands) )\r\n\t\t{\r\n\t\t\treturn Promise.resolve(undefined)\r\n\t\t}\r\n\r\n\t\t// OPERATION=GET\r\n\t\tif (operation == 'get')\r\n\t\t{\r\n\t\t\tconst results = []\r\n\t\t\toperands.forEach(\r\n\t\t\t\t(asset_name)=>{\r\n\t\t\t\t\tif ( T.isNotEmptyString(asset_name) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresults.push( this.get_plugin_asset_file_path(asset_name) )\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n\t\t\tconst response = new ServiceResponse(arg_request)\r\n\t\t\tresponse.set_results(results)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\treturn Promise.resolve(undefined)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get plugin asset file path name.\r\n\t * \r\n\t * @param {string} arg_asset_name - asset name to lookup for.\r\n\t * \r\n\t * @returns {string|undefined} - asset file path name or undefined if not found.\r\n\t */\r\n\tget_plugin_asset_file_path(arg_asset_name)\r\n\t{\r\n\t\tconst arg_cfg_route = this.get_setting('routes', {})\r\n\t\tconst plugins_names = arg_cfg_route.plugins\r\n\t\tconst rendering_manager = this.get_runtime().get_plugins_factory().get_rendering_manager()\r\n\r\n\t\tfor(let plugin_name of plugins_names)\r\n\t\t{\r\n\t\t\t// console.log('MIDDLEWARE: ROUTE FOR ASSETS IN PLUGINS MODE:loop on ', plugin_name)\r\n\t\t\t\r\n\t\t\tconst plugin = rendering_manager.plugin(plugin_name)\r\n\t\t\tconst asset_file_path = plugin.get_public_asset(arg_asset_name)\r\n\t\t\tif (asset_file_path)\r\n\t\t\t{\r\n\t\t\t\treturn asset_file_path\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn undefined\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/assets/assets_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/assets/assets_svc_provider.js",
    "static": true,
    "longname": "js/services/assets/assets_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/assets/assets_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 16,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "AssetsSvcProvider",
    "memberof": "js/services/assets/assets_svc_provider.js",
    "static": true,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/assets/assets_svc_provider.js",
    "importStyle": "AssetsSvcProvider",
    "description": "Assets service provider class.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider#constructor",
    "access": "public",
    "description": "Create a assets service provider.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "is_assets_svc_provider",
    "memberof": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "static": false,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider#is_assets_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "exec",
    "memberof": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "static": false,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider#exec",
    "access": "public",
    "description": "Executable instance.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Executable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "get_plugin_asset_file_path",
    "memberof": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/assets_svc_provider.js~AssetsSvcProvider#get_plugin_asset_file_path",
    "access": "public",
    "description": "Get plugin asset file path name.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|undefined} - asset file path name or undefined if not found."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_asset_name",
        "description": "asset name to lookup for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": "asset file path name or undefined if not found."
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "js/services/assets/executable_route_assets.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T             from 'devapt-core-common/dist/js/utils/types'\r\nimport {get_runtime} from 'devapt-core-common/dist/js/base/runtime'\r\n\r\n// SERVER IMPORTS\r\nimport ExecutableRoute from '../../executables/executable_route'\r\n\r\n\r\n/**\r\n * Runtime instance.\r\n * @private\r\n * @type {RuntimeBase}\r\n */\r\nconst runtime = get_runtime()\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'server/services/base/executable_route_assets'\r\n\r\n\r\n\r\n/**\r\n * @file Assets route registering class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class ExecutableRouteAssets extends ExecutableRoute\r\n{\r\n\t/**\r\n\t * Create an assets route registering executable.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(context)\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Callback for route handling.\r\n\t * @override\r\n\t * \r\n\t * @param {object} arg_application - Application instance.\r\n\t * @param {object} arg_cfg_route - plain object route configuration.\r\n\t * @param {object} arg_data - plain object contextual datas.\r\n\t * \r\n\t * @returns {function} - route handler.\r\n\t */\r\n\tget_route_cb(arg_application, arg_cfg_route, arg_data)\r\n\t{\r\n\t\tif ( T.isString(arg_cfg_route.directory) )\r\n\t\t{\r\n\t\t\tconsole.log(context + ':ROUTE FOR ASSETS IN DIRECTORY MODE for ', arg_cfg_route.directory)\r\n\r\n\t\t\treturn this.get_route_directory_cb(arg_application, arg_cfg_route, arg_data)\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif ( T.isArray(arg_cfg_route.plugins) )\r\n\t\t{\r\n\t\t\tconsole.log(context + ':ROUTE FOR ASSETS IN PLUGINS MODE for ', arg_cfg_route.plugins)\r\n\t\t\treturn this.get_route_plugins_cb(arg_application, arg_cfg_route, arg_data)\r\n\t\t}\r\n\r\n\r\n\t\tif ( T.isString(arg_cfg_route.redirect) )\r\n\t\t{\r\n\t\t\tconsole.log(context + ':REDIRECT ROUTE FOR ASSETS', arg_cfg_route.redirect)\r\n\t\t\treturn this.get_route_redirect_cb(arg_application, arg_cfg_route, arg_data)\r\n\t\t}\r\n\t\t\r\n\t\t// UNKNOW SERVER TO SERVE STATIC FILES\r\n\t\tconsole.error('UNKNOW ROUTE MODE', arg_cfg_route)\r\n\t\treturn null\r\n\t}\r\n\r\n\t\r\n\t\r\n\t/**\r\n\t * Callback for route handling.\r\n\t * \r\n\t * @param {object} arg_application - Application instance.\r\n\t * @param {object} arg_cfg_route - plain object route configuration.\r\n\t * @param {object} arg_data - plain object contextual datas.\r\n\t * \r\n\t * @returns {function} - route handler.\r\n\t */\r\n\tget_route_directory_cb(arg_application, arg_cfg_route/*, arg_data*/)\r\n\t{\r\n\t\tassert(T.isString(arg_cfg_route.directory), context + ':bad directory string')\r\n\t\t\r\n\t\t// CHECK SERVER\r\n\t\tif ( ! T.isObject(this.server) || ! this.server.is_server || ! this.server.is_routable_server )\r\n\t\t{\r\n\t\t\tconsole.error(context + ':get_route_directory_cb:bad routable server')\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t\t\r\n\t\treturn this.server.get_middleware_for_static_route(arg_cfg_route)\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Callback for route handling.\r\n\t * @param {object} arg_application - Application instance.\r\n\t * @param {object} arg_cfg_route - plain object route configuration.\r\n\t * @param {object} arg_data - plain object contextual datas.\r\n\t * @param {function} route handler.\r\n\t */\r\n\tget_route_plugins_cb(arg_application, arg_cfg_route/*, arg_data*/)\r\n\t{\r\n\t\tassert(T.isArray(arg_cfg_route.plugins), context + ':bad plugins array')\r\n\t\t\r\n\t\tconsole.log(context + ':ROUTE FOR ASSETS IN PLUGINS MODE')\r\n\t\t\r\n\t\tconst plugins_names = arg_cfg_route.plugins\r\n\t\tconst rendering_manager = runtime.get_plugins_factory().get_rendering_manager()\r\n\t\t\r\n\t\treturn (req, res/*, next*/) => {\r\n\t\t\tconst asset_name_parts = req.path.split('?', 2)\r\n\t\t\tconst asset_name = asset_name_parts[0]\r\n\t\t\tconsole.log(context + ':MIDDLEWARE: ROUTE FOR ASSETS IN PLUGINS MODE for ', asset_name, plugins_names)\r\n\r\n\t\t\t// BAD METHOD\r\n\t\t\tif (req.method !== 'GET' && req.method !== 'HEAD')\r\n\t\t\t{\r\n\t\t\t\t// method not allowed\r\n\t\t\t\tres.statusCode = 405\r\n\t\t\t\tres.setHeader('Allow', 'GET, HEAD')\r\n\t\t\t\tres.setHeader('Content-Length', '0')\r\n\t\t\t\tres.end()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let plugin_name of plugins_names)\r\n\t\t\t{\r\n\t\t\t\tconsole.log(context + ':MIDDLEWARE: ROUTE FOR ASSETS IN PLUGINS MODE:loop on ', plugin_name)\r\n\t\t\t\t\r\n\t\t\t\tconst plugin = rendering_manager.plugin(plugin_name)\r\n\t\t\t\tconst asset_file_path = plugin.get_public_asset(asset_name)\r\n\t\t\t\tif (asset_file_path)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(context + ':MIDDLEWARE: ROUTE FOR ASSETS IN PLUGINS MODE:found for ', plugin_name, asset_file_path)\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar options = {\r\n\t\t\t\t\t\tdotfiles: 'deny',\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'x-timestamp': Date.now(),\r\n\t\t\t\t\t\t\t'x-sent': true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tres.sendFile(asset_file_path, options,\r\n\t\t\t\t\t\t\t(err) => {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tconsole.log(context + ':MIDDLEWARE: ROUTE FOR ASSETS IN PLUGINS MODE:error=[%s]\\n plugin=[%s]\\n file=[%s]', err, plugin_name, asset_file_path)\r\n\t\t\t\t\t\t\t\t\tres.status(err.status).end()\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tconsole.log(context + ':MIDDLEWARE: ROUTE FOR ASSETS IN PLUGINS MODE:Sent file=[%s]', asset_file_path)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(err)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tres.status(404)\r\n\t\t\t\t\t\tconst error = {\r\n\t\t\t\t\t\t\terror:err,\r\n\t\t\t\t\t\t\tplugin:plugin_name,\r\n\t\t\t\t\t\t\tasset:asset_name,\r\n\t\t\t\t\t\t\tfile:asset_file_path\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tres.type('json')\r\n\t\t\t\t\t\tres.send(error)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/assets/executable_route_assets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "runtime",
    "memberof": "js/services/assets/executable_route_assets.js",
    "static": true,
    "longname": "js/services/assets/executable_route_assets.js~runtime",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/assets/executable_route_assets.js",
    "importStyle": null,
    "description": "Runtime instance.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "RuntimeBase"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/assets/executable_route_assets.js",
    "static": true,
    "longname": "js/services/assets/executable_route_assets.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/assets/executable_route_assets.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 23,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "ExecutableRouteAssets",
    "memberof": "js/services/assets/executable_route_assets.js",
    "static": true,
    "longname": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/assets/executable_route_assets.js",
    "importStyle": "ExecutableRouteAssets",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "Assets route registering class."
      },
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/executables/executable_route.js~ExecutableRoute"
    ]
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets#constructor",
    "access": "public",
    "description": "Create an assets route registering executable.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "get_route_cb",
    "memberof": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets#get_route_cb",
    "access": "public",
    "description": "Callback for route handling.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} - route handler."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "route handler."
    },
    "override": true
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "get_route_directory_cb",
    "memberof": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets#get_route_directory_cb",
    "access": "public",
    "description": "Callback for route handling.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} - route handler."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "route handler."
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "get_route_plugins_cb",
    "memberof": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/assets/executable_route_assets.js~ExecutableRouteAssets#get_route_plugins_cb",
    "access": "public",
    "description": "Callback for route handling.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "handler."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "js/services/logs/logs_svc_provider.js",
    "content": "// NPM IMPORTS\r\n// import assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T               from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse from 'devapt-core-common/dist/js/services/service_response'\r\n\r\n// SERVICES IMPORTS\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/logs/logs_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Logs service provider class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class LogsSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a assets service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_logs_svc_provider = true\r\n\t\t\r\n\t\t// GET INPUT STREAM TO FORWARD TO SUBSCRIBERS\r\n\t\t/**\r\n\t\t * Logs bus stream.\r\n\t\t * @type {Stream}\r\n\t\t */\r\n\t\tthis.logs_bus_stream = this.get_runtime().node.get_logs_bus().get_input_stream()\r\n\t\tthis.init_logs_bus_stream()\r\n\r\n\t\t// DEBUG\r\n\t\t// this.logs_bus_stream.subscribe(\r\n\t\t// \t(logs_record) => {\r\n\t\t// \t\tconsole.log('LogsSvcProvider: new logs record on the bus', logs_record)\r\n\t\t// \t\tthis.provided_values_stream.push(logs_record)\r\n\t\t// \t}\r\n\t\t// )\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn ['devapt-log'].concat(super.get_operations_names())\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\t// const operands = arg_request.get_operands()\r\n\r\n\t\t// // CHECK OPERANDS\r\n\t\t// if ( ! T.isNotEmptyArray(operands) )\r\n\t\t// {\r\n\t\t// \treturn Promise.resolve(undefined)\r\n\t\t// }\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\r\n\t\t// SUBSCRIBE TO PROVIDER STREAM DATAS\r\n\t\tif (operation == 'devapt-log')\r\n\t\t{\r\n\t\t\t// TODO\r\n\t\t\tresponse.set_results([ { error:'...' } ])\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\treturn super.produce(arg_request)\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Initialize bus stream.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tinit_logs_bus_stream()\r\n\t{\r\n\t\tconst max_logs_per_msg = 10\r\n\t\tconst delay_per_logs_msg = 100\r\n\t\tconst self = this\r\n\t\tconst limit_cb = (grouped_stream/*, group_start_event*/) => {\r\n\t\t\tconst map_cb = (values) => {\r\n\t\t\t\t// console.log(values, 'limit.map.values')\r\n\t\t\t\t\r\n\t\t\t\tlet logs_record = {\r\n\t\t\t\t\tts:undefined,\r\n\t\t\t\t\tlevel: undefined,\r\n\t\t\t\t\tsource:undefined,\r\n\t\t\t\t\tlogs:[]\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvalues.forEach(\r\n\t\t\t\t\t(value) => {\r\n\t\t\t\t\t\tlogs_record.ts = value.ts,\r\n\t\t\t\t\t\tlogs_record.level = value.level,\r\n\t\t\t\t\t\tlogs_record.source = value.source,\r\n\t\t\t\t\t\tlogs_record.logs = logs_record.logs.concat(value.logs)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(logs_record, 'limit.map.logs_record')\r\n\t\t\t\treturn logs_record\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn grouped_stream.bufferWithTimeOrCount(delay_per_logs_msg, max_logs_per_msg).map(map_cb)\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconst key_cb = (value) => {\r\n\t\t\t// console.log(value.level, 'value.level')\r\n\t\t\treturn value.level\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconst flatmap_cb = (grouped_stream) => {\r\n\t\t\treturn grouped_stream\r\n\t\t}\r\n\t\t\r\n\t\tconst msg_cb = (arg_msg) => {\r\n\t\t\tlet logs_ts = undefined\r\n\t\t\tlet logs_level = undefined\r\n\t\t\tlet logs_source = undefined\r\n\t\t\tlet logs_array = undefined\r\n\t\t\t\r\n\t\t\t// DEBUG\r\n\t\t\t// debugger\r\n\r\n\t\t\tif ( T.isObject(arg_msg) && arg_msg.is_distributed_logs )\r\n\t\t\t{\r\n\t\t\t\tlogs_ts = arg_msg.get_logs_ts()\r\n\t\t\t\tlogs_level = arg_msg.get_logs_level()\r\n\t\t\t\tlogs_source = arg_msg.get_logs_source()\r\n\t\t\t\tlogs_array = arg_msg.get_logs_values()\r\n\t\t\t}\r\n\t\t\telse if ( T.isObject(arg_msg) && T.isString(arg_msg.level) && T.isArray(arg_msg.logs) )\r\n\t\t\t{\r\n\t\t\t\tlogs_ts = arg_msg.ts\r\n\t\t\t\tlogs_level = arg_msg.level\r\n\t\t\t\tlogs_source = arg_msg.source\r\n\t\t\t\tlogs_array = arg_msg.logs\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst logs_record = {\r\n\t\t\t\tts: logs_ts,\r\n\t\t\t\tlevel: logs_level,\r\n\t\t\t\tsource: logs_source,\r\n\t\t\t\tlogs:logs_array\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn logs_record\r\n\t\t}\r\n\t\t\r\n\t\tself.logs_bus_stream_transfomed = self.logs_bus_stream.get_transformed_stream().map(msg_cb).groupBy(key_cb, limit_cb).flatMap(flatmap_cb)\r\n\t\t\r\n\t\tself.logs_bus_stream_transfomed.onValue(\r\n\t\t\t(logs_record) => {\r\n\t\t\t\tthis.get_stream('default').push(logs_record)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/logs/logs_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/logs/logs_svc_provider.js",
    "static": true,
    "longname": "js/services/logs/logs_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/logs/logs_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 16,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "LogsSvcProvider",
    "memberof": "js/services/logs/logs_svc_provider.js",
    "static": true,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/logs/logs_svc_provider.js",
    "importStyle": "LogsSvcProvider",
    "description": "Logs service provider class.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider#constructor",
    "access": "public",
    "description": "Create a assets service provider.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "is_logs_svc_provider",
    "memberof": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "static": false,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider#is_logs_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "logs_bus_stream",
    "memberof": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "static": false,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider#logs_bus_stream",
    "access": "public",
    "description": "Logs bus stream.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "init_logs_bus_stream",
    "memberof": "js/services/logs/logs_svc_provider.js~LogsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/logs/logs_svc_provider.js~LogsSvcProvider#init_logs_bus_stream",
    "access": "public",
    "description": "Initialize bus stream.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "js/services/messages/messages_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport _ from 'lodash'\r\n\r\n// COMMON IMPORTS\r\nimport T                  from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider    from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse    from 'devapt-core-common/dist/js/services/service_response'\r\nimport DistributedMessage from 'devapt-core-common/dist/js/base/distributed_message'\r\nimport DistributedLogs    from 'devapt-core-common/dist/js/base/distributed_logs'\r\nimport DistributedMetrics from 'devapt-core-common/dist/js/base/distributed_metrics'\r\n\r\n// SERVICES IMPORTS\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/messages/messages_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Messages service provider class.\r\n * \r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n * \r\n * @example\r\n* \tAPI:\r\n* \t\tthis._msg_subscriptions = {\r\n* \t\t\tsender name:{\r\n* \t\t\t\tbus name:{\r\n* \t\t\t\t\tchannel name:{\r\n* \t\t\t\t\t\tsocket: server/browser socket,\r\n* \t\t\t\t\t\tunsubscribe: function\r\n* \t\t\t\t\t}\r\n* \t\t\t\t}\r\n* \t\t\t}\r\n* \t\t}\r\n */\r\nexport default class MessagesSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a messages gateway service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\t\t\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_messages_svc_provider = true\r\n\r\n\t\t/**\r\n\t\t * Messages subscriptions.\r\n\t\t * @private\r\n\t\t * @type {object}\r\n\t\t */\r\n\t\tthis._msg_subscriptions = {}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn [\r\n\t\t\t'devapt-msg-describe', 'devapt-msg-recipients',\r\n\t\t\t'devapt-msg-send',\r\n\t\t\t'devapt-msg-subscribe', 'devapt-msg-unsubscribe', 'devapt-msg-subscription'\r\n\t\t].concat( super.get_operations_names() )\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce')\r\n\r\n\t\tif ( ! T.isObject(arg_request) || ! arg_request.is_service_request)\r\n\t\t{\r\n\t\t\tthis.leave_group('produce:error:bad request object.')\r\n\t\t\treturn Promise.resolve({error:'bad request object'})\r\n\t\t}\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\r\n\t\t// DEBUG\r\n\t\tthis.debug('produce:request for service=' + this.service.get_name() + ':operation=' + operation)\r\n\t\t// console.log(context + ':produce:request for service=' + this.service.get_name() + ':operation=' + operation)\r\n\r\n\t\t// GET BUSES\r\n\t\tconst node = this.get_runtime().get_node()\r\n\t\tconst msg_bus = node.get_msg_bus()\r\n\t\tconst logs_bus = node.get_logs_bus()\r\n\t\tconst metrics_bus = node.get_metrics_bus()\r\n\t\tconst msg_engine = msg_bus.get_bus_engine()\r\n\t\tconst logs_engine = logs_bus.get_bus_engine()\r\n\t\tconst metrics_engine = metrics_bus.get_bus_engine()\r\n\r\n\r\n\t\tif (operation == 'devapt-msg-recipients')\r\n\t\t{\r\n\t\t\tconst bus        = operands.length > 0 ? operands[0] : undefined\r\n\t\t\tconst page_size  = operands.length > 1 ? operands[1] : 99\r\n\t\t\tconst page_index = operands.length > 2 ? operands[2] : 0\r\n\r\n\t\t\tif (bus == 'messages')\r\n\t\t\t{\r\n\t\t\t\tconst paged_result = msg_bus.msg_recipients(page_size, page_index)\r\n\t\t\t\tresponse.set_results(paged_result)\r\n\t\t\t\tthis.leave_group('produce:operation[' + operation + '] for bus [' + bus + ']')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tif (bus == 'logs')\r\n\t\t\t{\r\n\t\t\t\tconst paged_result = logs_bus.msg_recipients(page_size, page_index)\r\n\t\t\t\tresponse.set_results(paged_result)\r\n\t\t\t\tthis.leave_group('produce:operation[' + operation + '] for bus [' + bus + ']')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tif (bus == 'metrics')\r\n\t\t\t{\r\n\t\t\t\tconst paged_result = metrics_bus.msg_recipients(page_size, page_index)\r\n\t\t\t\tresponse.set_results(paged_result)\r\n\t\t\t\tthis.leave_group('produce:operation[' + operation + '] for bus [' + bus + ']')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\t// ERROR: BAD BUS NAME\r\n\t\t\tresponse.set_has_error(true)\r\n\t\t\tresponse.set_error('bad operands bus [' + bus + '] for operation [' + operation + ']')\r\n\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\tthis.leave_group('produce:error:operation failure [' + operation + ']:bad operands bus [' + bus + '].')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\r\n\t\tif (operation == 'devapt-msg-describe')\r\n\t\t{\r\n\t\t\tconst buses = {}\r\n\r\n\t\t\tbuses['messages'] = {\r\n\t\t\t\tname:msg_bus.get_name(),\r\n\t\t\t\ttype:'messages',\r\n\t\t\t\tengine:msg_engine.get_name(),\r\n\t\t\t\tchannels:msg_engine.channel_list(),\r\n\t\t\t\trecipients:node.get_msg_bus().msg_recipients(99, 0)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbuses['logs'] = {\r\n\t\t\t\tname:logs_bus.get_name(),\r\n\t\t\t\ttype:'logs',\r\n\t\t\t\tengine:logs_engine.get_name(),\r\n\t\t\t\tchannels:logs_engine.channel_list(),\r\n\t\t\t\trecipients:node.get_logs_bus().msg_recipients(99, 0)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbuses['metrics'] = {\r\n\t\t\t\tname:metrics_bus.get_name(),\r\n\t\t\t\ttype:'metrics',\r\n\t\t\t\tengine:metrics_engine.get_name(),\r\n\t\t\t\tchannels:metrics_engine.channel_list(),\r\n\t\t\t\trecipients:node.get_metrics_bus().msg_recipients(99, 0)\r\n\t\t\t}\r\n\r\n\t\t\tresponse.set_results(buses)\r\n\r\n\t\t\t// DEBUG\r\n\t\t\tthis.debug('produce:reply for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\t\t\t// console.log(context + ':produce:reply for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\r\n\t\t\tthis.leave_group('produce:operation[' + operation + ']')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\r\n\t\tif (operation == 'devapt-msg-send')\r\n\t\t{\r\n\t\t\tconst response_promise = this.produce_send(arg_request)\r\n\t\t\tthis.leave_group('produce:[' + operation + ']')\r\n\t\t\treturn response_promise\r\n\t\t}\r\n\r\n\r\n\t\tif (operation == 'devapt-msg-subscribe')\r\n\t\t{\r\n\t\t\tconst response_promise = this.produce_subscribe(arg_request)\r\n\t\t\tthis.leave_group('produce:[' + operation + ']')\r\n\t\t\treturn response_promise\r\n\t\t}\r\n\r\n\r\n\t\tif (operation == 'devapt-msg-unsubscribe')\r\n\t\t{\r\n\t\t\tconst response_promise = this.produce_unsubscribe(arg_request)\r\n\t\t\tthis.leave_group('produce:[' + operation + ']')\r\n\t\t\treturn response_promise\r\n\t\t}\r\n\r\n\r\n\t\tif (operation == 'devapt-msg-subscription')\r\n\t\t{\r\n\t\t\tresponse.set_results([])\r\n\r\n\t\t\tthis.leave_group('produce:[' + operation + ']')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\tthis.leave_group('produce:super.')\r\n\t\treturn super.produce(arg_request)\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Produce service datas on send request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce_send(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce_send')\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\t\tconst node = this.get_runtime().get_node()\r\n\r\n\t\t// GET REQUEST OPERANDS\r\n\t\tconst sender  = arg_request.get_session_uid()\r\n\t\tconst bus     = operands.length > 0 ? operands[0] : undefined\r\n\t\tconst channel = operands.length > 1 ? operands[1] : 'default'\r\n\t\tconst target  = operands.length > 2 ? operands[2] : undefined\r\n\t\tconst payload = operands.length > 3 ? operands[3] : undefined\r\n\r\n\t\tif (bus == 'messages')\r\n\t\t{\r\n\t\t\t// CHECK REQUEST OPERANDS\r\n\t\t\tif ( ! T.isString(channel) || ! T.isString(target) || ! T.isObject(payload) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands to send a message.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_send:error:operation failure [' + operation + ']:bad operands to send a message.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tconst msg = new DistributedMessage(sender, target, payload, channel)\r\n\t\t\tnode.get_msg_bus().msg_post(msg)\r\n\r\n\t\t\tthis.leave_group('produce_send:operation[' + operation + '] for bus=[' + bus + '], channel=[' + channel + '], target=[' + target + ']')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\tif (bus == 'logs')\r\n\t\t{\r\n\t\t\t// CHECK REQUEST OPERANDS\r\n\t\t\tif ( ! T.isString(channel) || ! T.isString(target) || ! T.isObject(payload) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands to send logs.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_send:error:operation failure [' + operation + ']:bad operands to send logs.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\t// CHECK LOGS CONTENT\r\n\t\t\tif ( ! T.isString(payload.timestamp) || ! T.isString(payload.level) || ! T.isArray(payload.values) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands payload to send logs: {timestamp:\"\", level:\"\", values:[]}.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_send:error:operation failure [' + operation + ']:bad operands payload to send logs: {timestamp:\"\", level:\"\", values:[]}.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tconst msg = new DistributedLogs(sender, target, payload.timestamp, payload.level, payload.values)\r\n\t\t\tnode.get_logs_bus().msg_post(msg)\r\n\t\t\t\r\n\t\t\tthis.leave_group('produce_send:operation[' + operation + '] for bus=[logs]')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\tif (bus == 'metrics')\r\n\t\t{\r\n\t\t\t// CHECK REQUEST OPERANDS\r\n\t\t\tif ( ! T.isString(channel) || ! T.isString(target) || ! T.isObject(payload) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands to send metrics.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_send:error:operation failure [' + operation + ']:bad operands to send metrics.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\t// CHECK METRICS CONTENT\r\n\t\t\tif ( ! T.isString(payload.type) || ! T.isArray(payload.values) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands payload to send metrics: {type:\"\", values:[]}.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_send:error:operation failure [' + operation + ']:bad operands payload to send metrics: {type:\"\", values:[]}.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tconst msg = new DistributedMetrics(sender, target, payload.type, payload.values)\r\n\t\t\tnode.get_metrics_bus().msg_post(msg)\r\n\t\t\t\r\n\t\t\tthis.leave_group('produce_send:operation[' + operation + '] for bus=[metrics]')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// ERROR: BAD BUS NAME\r\n\t\tresponse.set_has_error(true)\r\n\t\tresponse.set_error('bad operands bus [' + bus + '] for operation [' + operation + ']')\r\n\t\tresponse.set_results(operands)\r\n\r\n\t\tthis.leave_group('produce_send:error:operation failure [' + operation + ']:bad operands bus [' + bus + '].')\r\n\t\treturn Promise.resolve(response)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Produce service datas on subscribe request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce_subscribe(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce_subscribe')\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\t\tconst node = this.get_runtime().get_node()\r\n\r\n\t\t// // GET REQUEST OPERANDS\r\n\t\tconst sender  = arg_request.get_session_uid()\r\n\t\tconst bus     = operands.length > 0 ? operands[0] : undefined\r\n\t\tconst channel = operands.length > 1 ? operands[1] : 'default'\r\n\t\t\r\n\t\tif (bus == 'messages')\r\n\t\t{\r\n\t\t\t// CHECK REQUEST OPERANDS\r\n\t\t\tif ( ! T.isString(channel) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands channel to subscribe on messages.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_subscribe:error:operation failure [' + operation + ']:bad operands channel to subscribe on messages.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\t// SUBSCRIPTION EXISTS\r\n\t\t\tif ( this.has_subscription(sender, bus, channel) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('messages subscription already exists for sender [' + sender + '].')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_subscribe:error:operation failure [' + operation + ']:messages subscription already exists for sender [' + sender + '].')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// CREATE SESSION STREAM\r\n\t\t\tconst socket = arg_request.get_socket()\r\n\t\t\tthis._msg_subscriptions[sender] = this.init_subscription(sender, bus, channel, socket)\r\n\r\n\t\t\tconst handler = (arg_msg)=>{\r\n\t\t\t\tif (arg_msg.get_target() == sender)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst msg_payload = arg_msg.get_payload()\r\n\t\t\t\t\tconst socket_id = msg_payload.socket_id//.split('#')[1]\r\n\t\t\t\t\t\r\n\t\t\t\t\t// SERVICE RESPONSE TRANSPORT\r\n\t\t\t\t\tif ( T.isNotEmptyString(msg_payload.service) && T.isNotEmptyString(msg_payload.operation) && T.isArray(msg_payload.results) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// DEBUG\r\n\t\t\t\t\t\t// console.log(context + ':produce_subscribe:handler for service response:socket_id=[%s] service=[%s] operation=[%s] results=[%a]', socket_id, msg_payload.service, msg_payload.operation, msg_payload.results)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst iosrvs = this.get_runtime().socketio_servers\r\n\t\t\t\t\t\tconst svc_path = '/' + msg_payload.service\r\n\r\n\t\t\t\t\t\t_.forEach(iosrvs,\r\n\t\t\t\t\t\t\t(iosrv)=>{\r\n\t\t\t\t\t\t\t\t// DEBUG\r\n\t\t\t\t\t\t\t\t// console.log('svc_path=[%s],socket_id=[%s], iosrv.of(svc_path)=', svc_path, socket_id, iosrv.of(svc_path))\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (svc_path in iosrv.nsps)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// DEBUG\r\n\t\t\t\t\t\t\t\t\t// console.log('iosrv.of(...).connected', iosrv.of(svc_path).connected)\r\n\r\n\t\t\t\t\t\t\t\t\tif (socket_id in iosrv.of(svc_path).connected)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// DEBUG\r\n\t\t\t\t\t\t\t\t\t\t// console.log('iosrv.of(...).connected[socket_id]', iosrv.of(svc_path).connected[socket_id])\r\n\r\n\t\t\t\t\t\t\t\t\t\tiosrv.of(svc_path).connected[socket_id].emit(msg_payload.operation, msg_payload)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// OTHERS CASES\r\n\t\t\t\t\tconst payload = { service:this.service.get_name(), operation:'devapt-msg-subscription', results:['done', arg_msg] }\r\n\t\t\t\t\t\r\n\t\t\t\t\t// DEBUG\r\n\t\t\t\t\t// console.log(context + ':produce_subscribe:default handler:socket_id=[%s] service=[%s] operation=[%s] results=[%a]', socket_id, payload.service, payload.operation, payload.results)\r\n\r\n\t\t\t\t\tsocket.emit('devapt-msg-subscription', payload)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.get_msg_bus().msg_add_recipient(sender, 'browser')\r\n\t\t\t\r\n\t\t\tthis._msg_subscriptions[sender][bus][channel].unsubscribe = node.get_msg_bus().msg_subscribe(channel, handler, sender)\r\n\t\t\t\r\n\t\t\t// UNSUBSCRIBE ON SOCKET CLOSE\r\n\t\t\tsocket.on('disconnect', ()=>{\r\n\t\t\t\tif ( this.has_subscription(sender, bus, channel) && this._msg_subscriptions[sender][bus][channel].unsubscribe )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis._msg_subscriptions[sender][bus][channel].unsubscribe()\r\n\t\t\t\t}\r\n\t\t\t\tnode.get_msg_bus().msg_remove_recipient(sender)\r\n\t\t\t})\r\n\t\t\tsocket.on('end', ()=>{\r\n\t\t\t\tif ( this.has_subscription(sender, bus, channel) && this._msg_subscriptions[sender][bus][channel].unsubscribe )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis._msg_subscriptions[sender][bus][channel].unsubscribe()\r\n\t\t\t\t}\r\n\t\t\t\tnode.get_msg_bus().msg_remove_recipient(sender)\r\n\t\t\t})\r\n\r\n\t\t\tresponse.set_results([])\r\n\r\n\t\t\tthis.leave_group('produce_subscribe:operation[' + operation + '] for bus=[messages] for sender [' + sender + ']')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// ERROR: BAD BUS NAME\r\n\t\tresponse.set_has_error(true)\r\n\t\tresponse.set_error('bad operands bus [' + bus + '] for operation [' + operation + ']')\r\n\t\tresponse.set_results(operands)\r\n\r\n\t\tthis.leave_group('produce_subscribe:error:operation failure [' + operation + ']:bad operands bus [' + bus + '].')\r\n\t\treturn Promise.resolve(response)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Test if a message subscription exists.\r\n\t * \r\n\t * @param {string} arg_sender  - message sender name.\r\n\t * @param {string} arg_bus     - message bus name.\r\n\t * @param {string} arg_channel - message channel name.\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\thas_subscription(arg_sender, arg_bus, arg_channel)\r\n\t{\r\n\t\tif (arg_sender in this._msg_subscriptions)\r\n\t\t{\r\n\t\t\tconst subscription = this._msg_subscriptions[arg_sender]\r\n\t\t\tif (arg_bus in subscription)\r\n\t\t\t{\r\n\t\t\t\tif (arg_channel in subscription[arg_bus])\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Test if a message subscription exists.\r\n\t * \r\n\t * @param {string} arg_sender  - message sender name.\r\n\t * @param {string} arg_bus     - message bus name.\r\n\t * @param {string} arg_channel - message channel name.\r\n\t * @param {Socket} arg_socket  - subscription socket.\r\n\t * \r\n\t * @returns {boolean}\r\n\t */\r\n\tinit_subscription(arg_sender, arg_bus, arg_channel, arg_socket)\r\n\t{\r\n\t\tlet subscription = this._msg_subscriptions[arg_sender]\r\n\t\tif ( ! subscription)\r\n\t\t{\r\n\t\t\tsubscription = {}\r\n\t\t}\r\n\r\n\t\tif ( !(arg_bus in subscription) )\r\n\t\t{\r\n\t\t\tsubscription[arg_bus] = {}\r\n\t\t}\r\n\r\n\t\tif ( ! (arg_channel in subscription[arg_bus]) )\r\n\t\t{\r\n\t\t\tsubscription[arg_bus][arg_channel] = {\r\n\t\t\t\tsocket:arg_socket,\r\n\t\t\t\tunsubscribe: undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn subscription\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Produce service datas on unsubscribe request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce_unsubscribe(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce_unsubscribe')\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\r\n\t\t// // GET REQUEST OPERANDS\r\n\t\tconst sender  = arg_request.get_session_uid()\r\n\t\tconst bus     = operands.length > 0 ? operands[0] : undefined\r\n\t\tconst channel = operands.length > 1 ? operands[1] : 'default'\r\n\t\t\r\n\t\tif (bus == 'messages')\r\n\t\t{\r\n\t\t\t// CHECK REQUEST OPERANDS\r\n\t\t\tif ( ! T.isString(channel) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('bad operands channel to unsubscribe for messages.')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_unsubscribe:error:operation failure [' + operation + ']:bad operands channel to unsubscribe for messages.')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\t// CHECK SUBSCRIPTION\r\n\t\t\tif ( ! this.has_subscription(sender, bus, channel) )\r\n\t\t\t{\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('messages subscription doesn t exists for sender [' + sender + '].')\r\n\t\t\t\tresponse.set_results(operands)\r\n\r\n\t\t\t\tthis.leave_group('produce_unsubscribe:error:operation failure [' + operation + ']:messages subscription doesn t exists for sender [' + sender + '].')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\t\t\tconst subscription = this._msg_subscriptions[sender][bus][channel]\r\n\r\n\t\t\t// REMOVE SESSION STREAM\r\n\t\t\tconst unsubscribe_fn = subscription.unsubscribe\r\n\t\t\tif (unsubscribe_fn)\r\n\t\t\t{\r\n\t\t\t\tunsubscribe_fn()\r\n\t\t\t}\r\n\t\t\tdelete this._msg_subscriptions[sender][bus][channel]\r\n\r\n\t\t\tthis.leave_group('produce_unsubscribe:operation[' + operation + '] for bus=[messages] for sender [' + sender + ']')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// ERROR: BAD BUS NAME\r\n\t\tresponse.set_has_error(true)\r\n\t\tresponse.set_error('bad operands bus [' + bus + '] for operation [' + operation + ']')\r\n\t\tresponse.set_results(operands)\r\n\r\n\t\tthis.leave_group('produce_unsubscribe:error:operation failure [' + operation + ']:bad operands bus [' + bus + '].')\r\n\t\treturn Promise.resolve(response)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/messages/messages_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/messages/messages_svc_provider.js",
    "static": true,
    "longname": "js/services/messages/messages_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/messages/messages_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 19,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "MessagesSvcProvider",
    "memberof": "js/services/messages/messages_svc_provider.js",
    "static": true,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/messages/messages_svc_provider.js",
    "importStyle": "MessagesSvcProvider",
    "description": "Messages service provider class.",
    "examples": [
      "\tAPI:\n\t\tthis._msg_subscriptions = {\n\t\t\tsender name:{\n\t\t\t\tbus name:{\n\t\t\t\t\tchannel name:{\n\t\t\t\t\t\tsocket: server/browser socket,\n\t\t\t\t\t\tunsubscribe: function\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#constructor",
    "access": "public",
    "description": "Create a messages gateway service provider.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "is_messages_svc_provider",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#is_messages_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_msg_subscriptions",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#_msg_subscriptions",
    "access": "private",
    "description": "Messages subscriptions.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "produce_send",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#produce_send",
    "access": "public",
    "description": "Produce service datas on send request.",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "produce_subscribe",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#produce_subscribe",
    "access": "public",
    "description": "Produce service datas on subscribe request.",
    "lineNumber": 363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "has_subscription",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#has_subscription",
    "access": "public",
    "description": "Test if a message subscription exists.",
    "lineNumber": 501,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_sender",
        "description": "message sender name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_bus",
        "description": "message bus name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_channel",
        "description": "message channel name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "init_subscription",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#init_subscription",
    "access": "public",
    "description": "Test if a message subscription exists.",
    "lineNumber": 530,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_sender",
        "description": "message sender name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_bus",
        "description": "message bus name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_channel",
        "description": "message channel name."
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_socket",
        "description": "subscription socket."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "produce_unsubscribe",
    "memberof": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/messages/messages_svc_provider.js~MessagesSvcProvider#produce_unsubscribe",
    "access": "public",
    "description": "Produce service datas on unsubscribe request.",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "js/services/metrics/metrics_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport {format} from 'util'\r\n\r\n// COMMON IMPORTS\r\nimport T                  from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider    from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse    from 'devapt-core-common/dist/js/services/service_response'\r\nimport {get_runtime}      from 'devapt-core-common/dist/js/base/runtime'\r\n\r\n// SERVICES IMPORTS\r\n\r\n\r\n/**\r\n * Runtime instance.\r\n * @private\r\n * @type {RuntimeBase}\r\n */\r\nconst runtime = get_runtime()\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/metrics/metrics_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Metrics service provider class.\r\n * \r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n * \r\n */\r\nexport default class MetricsSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a metrics service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_metrics_svc_provider = true\r\n\r\n\t\t// CREATE STREAMS\r\n\t\t// this.metrics_streams = {\r\n\t\t// \t'http':new Stream(),\r\n\t\t// \t'bus':new Stream(),\r\n\t\t// \t'host':new Stream(),\r\n\t\t// \t'nodejs':new Stream()\r\n\t\t// }\r\n\r\n\t\t// GET NODE METRICS BUS\r\n\t\t/**\r\n\t\t * Metrics bus stream.\r\n\t\t * @private\r\n\t\t * @type {Stream}\r\n\t\t */\r\n\t\tthis._metrics_bus_stream = runtime.node.get_metrics_bus().get_input_stream()\r\n\t\t\r\n\t\t/**\r\n\t\t * Metrics bus transformed stream.\r\n\t\t * @private\r\n\t\t * @type {Stream}\r\n\t\t */\r\n\t\tthis._metrics_bus_stream_transformed = undefined\r\n\t\t\r\n\t\t// DEBUG STREAM\r\n\t\t// this._metrics_bus_streams.subscribe(\r\n\t\t// \t(metrics_record) => {\r\n\t\t// \t\tconsole.log('MetricsSvcProvider: new metrics record on the bus', metrics_record)\r\n\t\t// \t}\r\n\t\t// )\r\n\r\n\r\n\t\tthis.add_stream('http')\r\n\t\tthis.add_stream('bus')\r\n\t\tthis.add_stream('host')\r\n\t\tthis.add_stream('nodejs')\r\n\r\n\t\tthis.init_stream('http')\r\n\t\tthis.init_stream('bus')\r\n\t\tthis.init_stream('host')\r\n\t\tthis.init_stream('nodejs')\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn [\r\n\t\t\t'devapt-metrics-get',        'devapt-metrics-list',\r\n\t\t\t'devapt-metrics-http-get',   'devapt-metrics-http-list',   'devapt-metrics-http-subscribe',\r\n\t\t\t'devapt-metrics-bus-get',    'devapt-metrics-bus-list',    'devapt-metrics-bus-subscribe',\r\n\t\t\t'devapt-metrics-host-get',   'devapt-metrics-host-list',   'devapt-metrics-host-subscribe',\r\n\t\t\t'devapt-metrics-nodejs-get', 'devapt-metrics-nodejs-list', 'devapt-metrics-nodejs-subscribe'\r\n\t\t].concat( super.get_operations_names() )\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce')\r\n\r\n\t\tif ( ! T.isObject(arg_request) || ! arg_request.is_service_request)\r\n\t\t{\r\n\t\t\tthis.leave_group('produce:error:bad request object.')\r\n\t\t\treturn Promise.resolve({error:'bad request object'})\r\n\t\t}\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\t\tlet type = undefined\r\n\t\tlet op = 'undefined'\r\n\r\n\t\tswitch(operation) {\r\n\t\t\tcase 'devapt-subscribe':\r\n\t\t\t\top = 'super'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-unsubscribe':\r\n\t\t\t\top = 'super'\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'devapt-metrics-get':\r\n\t\t\t\top = 'get'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-list':\r\n\t\t\t\top = 'list'\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tcase 'devapt-metrics-http-get':\r\n\t\t\t\ttype = 'http'\r\n\t\t\t\top = 'get'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-http-list':\r\n\t\t\t\ttype = 'http'\r\n\t\t\t\top = 'list'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-http-subscribe':\r\n\t\t\t\ttype = 'http'\r\n\t\t\t\top = 'subscribe'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-http-unsubscribe':\r\n\t\t\t\ttype = 'http'\r\n\t\t\t\top = 'unsubscribe'\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tcase 'devapt-metrics-bus-get':\r\n\t\t\t\ttype = 'bus'\r\n\t\t\t\top = 'get'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-bus-list':\r\n\t\t\t\ttype = 'bus'\r\n\t\t\t\top = 'list'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-bus-subscribe':\r\n\t\t\t\ttype = 'bus'\r\n\t\t\t\top = 'subscribe'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-bus-unsubscribe':\r\n\t\t\t\ttype = 'bus'\r\n\t\t\t\top = 'unsubscribe'\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tcase 'devapt-metrics-host-get':\r\n\t\t\t\ttype = 'host'\r\n\t\t\t\top = 'get'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-host-list':\r\n\t\t\t\ttype = 'host'\r\n\t\t\t\top = 'list'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-host-subscribe':\r\n\t\t\t\ttype = 'host'\r\n\t\t\t\top = 'subscribe'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-host-unsubscribe':\r\n\t\t\t\ttype = 'host'\r\n\t\t\t\top = 'unsubscribe'\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tcase 'devapt-metrics-nodejs-get':\r\n\t\t\t\ttype = 'nodejs'\r\n\t\t\t\top = 'get'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-nodejs-list':\r\n\t\t\t\ttype = 'nodejs'\r\n\t\t\t\top = 'list'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-nodejs-subscribe':\r\n\t\t\t\ttype = 'nodejs'\r\n\t\t\t\top = 'subscribe'\r\n\t\t\t\tbreak\r\n\t\t\tcase 'devapt-metrics-nodejs-unsubscribe':\r\n\t\t\t\ttype = 'nodejs'\r\n\t\t\t\top = 'unsubscribe'\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tlet operand_index = 0\r\n\t\tif (! type && operands.length > 0 && T.isNotEmptyString(operands[0]) )\r\n\t\t{\r\n\t\t\ttype = operands[0]\r\n\t\t\t++operand_index\r\n\t\t}\r\n\t\t\r\n\t\t// DEBUG\r\n\t\tconst debug_msg = format('produce:service[%s] operation[%s] op[%s] type[%s] operands count[%d] opds index[%d]', response.get_service(), operation, op, type, operands.length, operand_index)\r\n\t\t// console.log(context + debug_msg)\r\n\t\tthis.debug(debug_msg)\r\n\r\n\t\t// CHECK OPERATION AND TYPE STRINGS\r\n\t\tif (! T.isNotEmptyString(op) || ! T.isNotEmptyString(type) )\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad metrics operation and/or type string', op, type)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// GET METRICS SERVER\r\n\t\tconst metrics_server = runtime.node.get_metrics_server()\r\n\t\tif (! metrics_server)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'metrics server not found', op, type)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// OPERATION: GET CURRENT METRICS\r\n\t\tif (op == 'get')\r\n\t\t{\r\n\t\t\t// GET WITH ONE OPERAND\r\n\t\t\tconst item = operands[operand_index]\r\n\t\t\tif ( T.isNotEmptyString(item) )\r\n\t\t\t{\r\n\t\t\t\tthis.debug('get with one not empty operand string:[' + item + ']')\r\n\t\t\t\tconst state_values = metrics_server.get_metrics_state_values(type, item)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(context + debug_msg + ' item=[%s] state_values=', item, bus_state_values)\r\n\t\t\t\t\r\n\t\t\t\tresponse.set_results([state_values])\r\n\r\n\t\t\t\tthis.leave_group( debug_msg + format(' metrics values keys[%s]', Object.keys(state_values) ) )\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// DEFAULT CASE\r\n\t\t\tconst state_values = metrics_server.get_metrics_state_values(type)\r\n\r\n\t\t\t// console.log(context + debug_msg + ' state_values=', state_values)\r\n\t\t\tthis.debug(debug_msg + ' state_values=', state_values)\r\n\t\t\t\r\n\t\t\tresponse.set_results([state_values])\r\n\r\n\t\t\tthis.leave_group( debug_msg + format(' metrics values keys[%s]', Object.keys(state_values) ) )\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\t\r\n\t\t// OPERATION: LIST METRICS ITEMS\r\n\t\tif (op == 'list')\r\n\t\t{\r\n\t\t\tconst state_items = metrics_server.get_metrics_state_values_items(type)\r\n\r\n\t\t\t// console.log(context + debug_msg + ' state_items=', state_items)\r\n\t\t\tthis.debug(debug_msg + ' state_items=', state_items)\r\n\t\t\t\r\n\t\t\tconst items = T.isArray(state_items) ? state_items : []\r\n\t\t\tresponse.set_results(items)\r\n\r\n\t\t\tthis.leave_group( debug_msg + format(' metrics items[%s]', items) )\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\t\r\n\t\t// OPERATION: SUBSCRIBE\r\n\t\tif (op == 'subscribe')\r\n\t\t{\r\n\t\t\tconst socket = arg_request.get_socket()\r\n\t\t\t\r\n\t\t\tif (socket)\r\n\t\t\t{\r\n\t\t\t\tconst result = this.subscribe(type, socket)\r\n\t\t\t\tif (! result)\r\n\t\t\t\t{\r\n\t\t\t\t\tresponse.set_results([ { error:'subscribe failed' } ].concat(operands) )\r\n\t\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresponse.set_results( ['done'].concat(operands) )\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresponse.set_results([ { error:'bad socket' } ].concat(operands) )\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\t\r\n\t\t// OPERATION: UNSUBSCRIBE\r\n\t\tif (op == 'unsubscribe')\r\n\t\t{\r\n\t\t\tconst socket = arg_request.get_socket()\r\n\t\t\t\r\n\t\t\tif (socket)\r\n\t\t\t{\r\n\t\t\t\tconst result = this.unsubscribe(type, socket)\r\n\t\t\t\tif (! result)\r\n\t\t\t\t{\r\n\t\t\t\t\tresponse.set_results([ { error:'subscribe failed' } ].concat(operands) )\r\n\t\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresponse.set_results( ['done'].concat(operands) )\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresponse.set_results([ { error:'bad socket' } ].concat(operands) )\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\tthis.leave_group('produce:super.')\r\n\t\treturn super.produce(arg_request)\r\n\t}\r\n\t\r\n\r\n\r\n\t/**\r\n\t * Populate a response with error message.\r\n\t * \r\n\t * @param {ServiceResponse} arg_response - response instance.\r\n\t * @param {array} arg_operands     - request operands.\r\n\t * @param {string} arg_error       - error text.\r\n\t * @param {string} arg_op          - metrics operation.\r\n\t * @param {string} arg_type        - metrics type.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tfill_error(arg_response, arg_operands, arg_error, arg_op, arg_type)\r\n\t{\r\n\t\tconst op = arg_response.get_operation()\r\n\t\tconst svc = arg_response.get_service()\r\n\t\tconst error_msg = format('produce:error=[%s] with svc=[%s] operation=[%s] op=[%s] type=[%s] operands count=[%i]', arg_error, svc, op, arg_op, arg_type, arg_operands.length)\r\n\t\t\r\n\t\targ_response.set_has_error(true)\r\n\t\targ_response.set_error(error_msg)\r\n\t\targ_response.set_results(arg_operands)\r\n\t\t\r\n\t\tthis.leave_group(error_msg)\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Init output stream.\r\n\t * \r\n\t * @param {string} arg_type - metrics type.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tinit_stream(arg_type)\r\n\t{\r\n\t\tconst self = this\r\n\t\t\r\n\t\t// CHECK TYPE\r\n\t\tif ( ! this.has_stream(arg_type) )\r\n\t\t{\r\n\t\t\tconsole.error(context + ':init_stream:bad metrics type[' + arg_type + ']')\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst max_metrics_per_msg = 10\r\n\t\tconst delay_per_metrics_msg = 100\r\n\t\tconst limit_cb = (grouped_stream/*, group_start_event*/) => {\r\n\t\t\tconst map_cb = (values) => {\r\n\t\t\t\t// console.log(values, 'limit.map.values')\r\n\t\t\t\t\r\n\t\t\t\tlet metrics_record = {\r\n\t\t\t\t\tmetric: undefined,\r\n\t\t\t\t\tmetrics:[]\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvalues.forEach(\r\n\t\t\t\t\t(value) => {\r\n\t\t\t\t\t\tmetrics_record.metric = value.metric,\r\n\t\t\t\t\t\tmetrics_record.metrics = metrics_record.metrics.concat(value.metrics)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(metrics_record, 'limit.map.metrics_record')\r\n\t\t\t\treturn metrics_record\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn grouped_stream.bufferWithTimeOrCount(delay_per_metrics_msg, max_metrics_per_msg).map(map_cb)\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconst key_cb = (value) => {\r\n\t\t\t// console.log(value.metric, 'value.metric')\r\n\t\t\treturn value.metric\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconst flatmap_cb = (grouped_stream) => {\r\n\t\t\treturn grouped_stream\r\n\t\t}\r\n\t\t\r\n\t\tconst msg_filter_cb = (arg_msg) => {\r\n\t\t\tif (arg_msg.payload.metric != arg_type)\r\n\t\t\t{\r\n\t\t\t\tconsole.warn(context + ':init_stream:metrics filter blocks', arg_msg.payload.metric, arg_type)\r\n\t\t\t}\r\n\t\t\treturn arg_msg.payload.metric == arg_type\r\n\t\t}\r\n\t\t\r\n\t\tconst msg_cb = (arg_msg) => {\r\n\t\t\tconst metric_type = arg_msg.payload.metric\r\n\t\t\tconst metrics_array = arg_msg.payload.metrics\r\n\t\t\tconst metrics_record = {\r\n\t\t\t\tmetric: metric_type,\r\n\t\t\t\tmetrics:metrics_array\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn metrics_record\r\n\t\t}\r\n\t\t\r\n\t\tself._metrics_bus_stream_transformed = self._metrics_bus_stream.get_transformed_stream().filter(msg_filter_cb).map(msg_cb).groupBy(key_cb, limit_cb).flatMap(flatmap_cb)\r\n\t\t\r\n\t\tself._metrics_bus_stream_transformed.onValue(\r\n\t\t\t(metrics_record) => {\r\n\t\t\t\tconsole.log(context + ':init_stream:new metrics record')\r\n\t\t\t\tself.get_stream(arg_type).push(metrics_record)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/metrics/metrics_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "runtime",
    "memberof": "js/services/metrics/metrics_svc_provider.js",
    "static": true,
    "longname": "js/services/metrics/metrics_svc_provider.js~runtime",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/metrics/metrics_svc_provider.js",
    "importStyle": null,
    "description": "Runtime instance.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "RuntimeBase"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/metrics/metrics_svc_provider.js",
    "static": true,
    "longname": "js/services/metrics/metrics_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/metrics/metrics_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 24,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "MetricsSvcProvider",
    "memberof": "js/services/metrics/metrics_svc_provider.js",
    "static": true,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/metrics/metrics_svc_provider.js",
    "importStyle": "MetricsSvcProvider",
    "description": "Metrics service provider class.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#constructor",
    "access": "public",
    "description": "Create a metrics service provider.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "is_metrics_svc_provider",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#is_metrics_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "_metrics_bus_stream",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#_metrics_bus_stream",
    "access": "private",
    "description": "Metrics bus stream.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "_metrics_bus_stream_transformed",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#_metrics_bus_stream_transformed",
    "access": "private",
    "description": "Metrics bus transformed stream.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "fill_error",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#fill_error",
    "access": "public",
    "description": "Populate a response with error message.",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_response",
        "description": "response instance."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_operands",
        "description": "request operands."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_error",
        "description": "error text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_op",
        "description": "metrics operation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_type",
        "description": "metrics type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "init_stream",
    "memberof": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/metrics/metrics_svc_provider.js~MetricsSvcProvider#init_stream",
    "access": "public",
    "description": "Init output stream.",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_type",
        "description": "metrics type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "js/services/middlewares/executable_route_middleware.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T                from 'devapt-core-common/dist/js/utils/types'\r\nimport Credentials      from 'devapt-core-common/dist/js/base/credentials'\r\nimport RenderingBuilder from 'devapt-core-common/dist/js/rendering/rendering_builder'\r\nimport {get_runtime} from 'devapt-core-common/dist/js/base/runtime'\r\n\r\n// SERVER IMPORTS\r\nimport ExecutableRoute  from '../../executables/executable_route'\r\n\r\n\r\n/**\r\n * Runtime instance.\r\n * @private\r\n * @type {RuntimeBase}\r\n */\r\nconst runtime = get_runtime()\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/middlewares/executable_route_middleware'\r\n\r\n\r\n\r\n/**\r\n * @file Middleware route registering class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class ExecutableRouteMiddleware extends ExecutableRoute\r\n{\r\n    /**\r\n     * Create a route middleware executable\r\n\t * @extends ExecutableRoute\r\n\t * @returns {nothing}\r\n     */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(context)\r\n\t}\r\n\t\r\n\r\n    \r\n\t/**\r\n     * Callback for route handling.\r\n     * @override\r\n\t * \r\n     * @param {TopologyDefineApplication} arg_application - Application instance.\r\n     * @param {object} arg_cfg_route - plain object route configuration.\r\n     * @param {object} arg_data - plain object contextual datas.\r\n\t * \r\n     * @param {function} route handler.\r\n     */\r\n\tget_route_cb(arg_application, arg_cfg_route, arg_data)\r\n\t{\r\n\t\tlet self = this\r\n\t\t\r\n\t\t// REDIRECT\r\n\t\tif ( T.isString(arg_cfg_route.redirect) )\r\n\t\t{\r\n\t\t\t// console.log('REDIRECT ROUTE FOR ASSETS', arg_cfg_route.redirect)\r\n\t\t\treturn this.get_route_redirect_cb(arg_application, arg_cfg_route, arg_data)\r\n\t\t}\r\n\t\t\r\n\r\n\t\t// DEBUG\r\n\t\t// debugger\r\n\r\n\t\t\r\n\t\t// GET ASSETS CONFIG\r\n\t\tconst assets_for_region = this.service.get_assets_services_names('any')\r\n\t\t\r\n\r\n\t\t// MIDDLEWARE\r\n\t\treturn function exec_http(req, res, next)\r\n\t\t{\r\n\t\t\tself.enter_group('ExecutableRouteMiddleware.exec_http')\r\n\t\t\t\r\n\t\t\t// REGISTER ASSETS SERVICES\r\n\t\t\treq.devapt_assets_services = {\r\n\t\t\t\tstyle: assets_for_region.style,\r\n\t\t\t\tscript:assets_for_region.script,\r\n\t\t\t\timage: assets_for_region.image,\r\n\t\t\t\thtml:  assets_for_region.html\r\n\t\t\t}\r\n\r\n\t\t\tlet mw_cb = null\r\n\r\n\r\n\t\t\t// GET CUSTOM MIDDLEWARE FROM FILE\r\n\t\t\tif ( T.isString(arg_cfg_route.mw_file) )\r\n\t\t\t{\r\n\t\t\t\t// CHECK PATH\r\n\t\t\t\tconst path_file_name = runtime.context.get_absolute_path(arg_cfg_route.mw_file)\r\n\t\t\t\tassert(T.isString(path_file_name), context + ':bad middleware file path string')\r\n\t\t\t\t\r\n\t\t\t\t// LOAD MIDDLEWARE FILE\r\n\t\t\t\ttry{\r\n\t\t\t\t\tself.info('Loading middleware before')\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!mw_cb)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tself.info('Loading middleware file [' + path_file_name + ']')\r\n\t\t\t\t\t\tmw_cb = require(path_file_name).default\r\n\t\t\t\t\t\t// console.log(mw_cb, 'mw_cb')\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tself.info('Loading middleware after')\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(context + ':middleware loading error:' + e)\r\n\t\t\t\t\tself.error('middleware file not found or not valid')\r\n\t\t\t\t\tself.leave_group('ExecutableRouteMiddleware.exec_http')\r\n\t\t\t\t\treturn next(e)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// VIEW RENDERING MIDDLEWARE\r\n\t\t\telse if ( T.isString(arg_cfg_route.page_view) )\r\n\t\t\t{\r\n\t\t\t\tmw_cb = (req, res) => {\r\n\t\t\t\t\t// console.log(req.devapt_assets_services, 'get_route_cb:mw:req.devapt_assets_services')\r\n\t\t\t\t\tconst renderer = new RenderingBuilder(runtime, req.devapt_assets_services.style, req.devapt_assets_services.script, req.devapt_assets_services.image, req.devapt_assets_services.html, arg_application)\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst default_credentials = Credentials.get_empty_credentials()\r\n\t\t\t\t\tdefault_credentials.tenant = arg_application.topology_tenant\r\n\t\t\t\t\tdefault_credentials.env = 'default' // TODO arg_application.topology_env\r\n\t\t\t\t\tdefault_credentials.application = arg_application.get_name()\r\n\t\t\t\t\tdefault_credentials.token = 'default'\r\n\t\t\t\t\tdefault_credentials.user_name = 'default'\r\n\t\t\t\t\tdefault_credentials.user_pass_digest = 'default'\r\n\t\t\t\t\tdefault_credentials.ts_login = 1234567890\r\n\t\t\t\t\tdefault_credentials.ts_expiration = 9999999999\r\n\t\t\t\t\tconst credentials = req.devapt_credentials ? req.devapt_credentials : new Credentials(default_credentials)\r\n\r\n\t\t\t\t\tconst title = undefined\r\n\t\t\t\t\tconst view_name = arg_cfg_route.page_view\r\n\t\t\t\t\tconst menubar_name = T.isString(arg_cfg_route.page_menubar) ? arg_cfg_route.page_menubar : undefined\r\n\r\n\t\t\t\t\tconst html = renderer.render_html_page(title, view_name, menubar_name, credentials)\r\n\r\n\t\t\t\t\t// MANAGE ERROR\r\n\t\t\t\t\tif (! T.isString(html) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tres.status(500)\r\n\t\t\t\t\t\tres.send('a rendering error occures for view [' + view_name + ']')\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tres.send(html)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// EXECUTE MIDDLEWARE FUNCTION\r\n\t\t\tassert(T.isFunction(mw_cb), context + ':bad middleware function')\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tself.info('Execute middleware: before')\r\n\t\t\t\t\r\n\t\t\t\tmw_cb(req, res)\r\n\t\t\t\t\r\n\t\t\t\tself.info('Execute middleware: after')\r\n\t\t\t}\r\n\t\t\tcatch(e)\r\n\t\t\t{\r\n\t\t\t\tconsole.log(context + ':middleware execution error:' + e)\r\n\t\t\t\tself.error('middleware execution failed')\r\n\t\t\t\tself.leave_group('ExecutableRouteMiddleware.exec_http')\r\n\t\t\t\treturn next(e)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tself.leave_group('ExecutableRouteMiddleware.exec_http')\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/middlewares/executable_route_middleware.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "runtime",
    "memberof": "js/services/middlewares/executable_route_middleware.js",
    "static": true,
    "longname": "js/services/middlewares/executable_route_middleware.js~runtime",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/middlewares/executable_route_middleware.js",
    "importStyle": null,
    "description": "Runtime instance.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "RuntimeBase"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/middlewares/executable_route_middleware.js",
    "static": true,
    "longname": "js/services/middlewares/executable_route_middleware.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/middlewares/executable_route_middleware.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 26,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "ExecutableRouteMiddleware",
    "memberof": "js/services/middlewares/executable_route_middleware.js",
    "static": true,
    "longname": "js/services/middlewares/executable_route_middleware.js~ExecutableRouteMiddleware",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/middlewares/executable_route_middleware.js",
    "importStyle": "ExecutableRouteMiddleware",
    "description": "",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "Middleware route registering class."
      },
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/executables/executable_route.js~ExecutableRoute"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/middlewares/executable_route_middleware.js~ExecutableRouteMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/executable_route_middleware.js~ExecutableRouteMiddleware#constructor",
    "access": "public",
    "description": "Create a route middleware executable",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "ExecutableRoute"
      },
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "get_route_cb",
    "memberof": "js/services/middlewares/executable_route_middleware.js~ExecutableRouteMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/executable_route_middleware.js~ExecutableRouteMiddleware#get_route_cb",
    "access": "public",
    "description": "Callback for route handling.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "TopologyDefineApplication"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "handler."
      }
    ],
    "override": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "js/services/middlewares/middlewares_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\nimport {format} from 'util'\r\n\r\n// COMMON IMPORTS\r\nimport T                from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider  from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse  from 'devapt-core-common/dist/js/services/service_response'\r\nimport RenderingBuilder from 'devapt-core-common/dist/js/rendering/rendering_builder'\r\n\r\n// SERVICES IMPORTS\r\nimport ExecutableRouteMiddleware from './executable_route_middleware'\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'server/services/middlewares/middlewares_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Middlewares service provider class.\r\n * \r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class MiddlewaresSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a middleware service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\t\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_middleware_svc_provider = true\r\n\t\t\r\n\t\t/**\r\n\t\t * Service executable instance.\r\n\t\t * @type {Executable}\r\n\t\t */\r\n\t\tthis.exec = new ExecutableRouteMiddleware()\r\n\t\tthis.exec.service = this.service\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn ['devapt-mw-list', 'devapt-mw-get']\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce')\r\n\r\n\t\tif ( ! T.isObject(arg_request) || ! arg_request.is_service_request)\r\n\t\t{\r\n\t\t\tthis.leave_group('produce:error:bad request object.')\r\n\t\t\treturn Promise.resolve({error:'bad request object'})\r\n\t\t}\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\t\tconst credentials = arg_request.get_credentials()\r\n\r\n\t\t// CHECK OPERANDS\r\n\t\tif ( ! T.isNotEmptyArray(operands) )\r\n\t\t{\r\n\t\t\treturn Promise.resolve(undefined)\r\n\t\t}\r\n\t\t\r\n\t\t// DEBUG\r\n\t\tconst debug_msg = format('produce:service[%s] operation[%s] operands count[%d]', response.get_service(), operation, operands.length)\r\n\t\t// console.log(context + debug_msg)\r\n\t\tthis.debug(debug_msg)\r\n\r\n\r\n\t\t// GET TARGET ROUTE\r\n\t\tconst opd_1 = operands.length > 0 ? operands[0] : undefined\r\n\t\tconst opd_1_route = T.isObject(opd_1) ? opd_1.route : opd_1\r\n\t\tlet target_route = opd_1_route && T.isNotEmptyString(opd_1_route) ? opd_1_route : undefined\r\n\t\tif ( ! target_route)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad middleware route string')\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\ttarget_route = target_route.endsWith('/') ? target_route.slice(0, target_route.length - 1) : target_route\r\n\t\t\r\n\t\t// GET ROUTES\r\n\t\tconst routes = this.get_setting_js('routes', [])\r\n\t\t// console.log(debug_msg + ':target_route=', target_route)\r\n\r\n\t\tswitch(operation) {\r\n\t\t\tcase 'get': {\r\n\t\t\t\tlet renderer_result_json = undefined\r\n\r\n\t\t\t\t// SEARCH ROUTE\r\n\t\t\t\tlet route_mw_file = undefined\r\n\t\t\t\tlet route_page_view = undefined\r\n\t\t\t\tlet route_page_menubar = undefined\r\n\r\n\t\t\t\t// TODO REPLACE FOREACH TO END LOOP ON FOUND\r\n\t\t\t\troutes.forEach(\r\n\t\t\t\t\t(route_cfg)=>{\r\n\t\t\t\t\t\tconst loop_route = route_cfg.route.endsWith('/') ? route_cfg.route.slice(0, target_route.length - 1) : route_cfg.route\r\n\t\t\t\t\t\tif (loop_route == target_route)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\troute_mw_file = route_cfg.mw_file\r\n\t\t\t\t\t\t\troute_page_view = route_cfg.page_view\r\n\t\t\t\t\t\t\troute_page_menubar = route_cfg.page_menubar\r\n\r\n\t\t\t\t\t\t\tconsole.log(context + ':process:target_route found')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// PROCESS MIDDLEWARE FILE\r\n\t\t\t\t\tif ( T.isString(route_mw_file) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(context + ':process:route_mw_file found', route_mw_file)\r\n\r\n\t\t\t\t\t\trenderer_result_json = this.process_mw_file(route_mw_file, credentials)\r\n\r\n\t\t\t\t\t\tresponse.set_results( [renderer_result_json] )\r\n\r\n\t\t\t\t\t\tthis.leave_group( format('produce:middleware file:service[%s] operation[%s]', response.get_service(), operation) )\r\n\t\t\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// VIEW RENDERING MIDDLEWARE\r\n\t\t\t\t\tif ( T.isString(route_page_view) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(context + ':process:route_page_view found', route_page_view)\r\n\r\n\t\t\t\t\t\trenderer_result_json = this.process_mw_view(route_page_view, route_page_menubar, credentials)\r\n\r\n\t\t\t\t\t\tresponse.set_results( [renderer_result_json] )\r\n\r\n\t\t\t\t\t\tthis.leave_group( format('produce:view rendering:service[%s] operation[%s]', response.get_service(), operation) )\r\n\t\t\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// BAD ROUTE CONFIG\r\n\t\t\t\t\tthis.fill_error(response, operands, 'route not found for target', target_route)\r\n\t\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.fill_error(response, operands, 'exception for target', target_route, e)\r\n\t\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fill_error(response, operands, 'bad operation', target_route)\r\n\t\treturn Promise.resolve(response)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Process a middleware file.\r\n\t * \r\n\t * @param {string} arg_mw_file - middleware file.\r\n\t * @param {Credentials} arg_credentials - request credentials.\r\n\t * \r\n\t * @returns {object} - JSON rendering result.\r\n\t */\r\n\tprocess_mw_file(arg_mw_file, arg_credentials)\r\n\t{\r\n\t\tthis.enter_group('process_mw_file:' + arg_mw_file)\r\n\t\tassert( T.isString(arg_mw_file), context + ':process_mw_file:bad file string')\r\n\t\t\r\n\t\tlet mw_cfg = undefined\r\n\r\n\t\t// CHECK PATH\r\n\t\tconst path_file_name = this.get_runtime().context.get_absolute_path(arg_mw_file)\r\n\t\tassert(T.isString(path_file_name), context + ':bad middleware file path string')\r\n\t\t\r\n\t\t// LOAD MIDDLEWARE FILE\r\n\t\ttry {\r\n\t\t\tthis.info('Loading middleware file')\r\n\t\t\t\r\n\t\t\tmw_cfg = require(path_file_name).service_cfg\r\n\t\t\t// console.log(mw_cfg, 'mw_cfg')\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tconsole.log(context + ':process_mw_file:middleware loading error:' + e)\r\n\t\t\tthis.error('process_mw_file:middleware file not found or not valid')\r\n\t\t\t\r\n\t\t\tthis.leave_group('ExecutableRouteMiddleware.exec_http')\r\n\t\t\treturn undefined\r\n\t\t}\r\n\r\n\t\t// PROCESSING MIDDLEWARE\r\n\t\ttry {\r\n\t\t\tthis.info('Processing middleware view')\r\n\t\t\t\r\n\t\t\tconst view = mw_cfg.view\r\n\t\t\tconst menubar = mw_cfg.menubar\r\n\t\t\tconst renderer_result_json = this.process_mw_view(view, menubar, arg_credentials)\r\n\r\n\t\t\tthis.info('Loading middleware after')\r\n\t\t\treturn renderer_result_json\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tconsole.log(context + ':process_mw_file:middleware processing error:' + e)\r\n\t\t\tthis.error('process_mw_file:middleware processing error', e)\r\n\r\n\t\t\tthis.leave_group('ExecutableRouteMiddleware.exec_http')\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Process a middleware view.\r\n\t * \r\n\t * @param {string|Component} arg_view_name - middleware view name.\r\n\t * @param {string} arg_menubar_name - middleware menubar name.\r\n\t * @param {Credentials} arg_credentials - request credentials.\r\n\t * \r\n\t * @returns {object} - JSON rendering result.\r\n\t */\r\n\tprocess_mw_view(arg_view_name, arg_menubar_name, arg_credentials)\r\n\t{\r\n\t\tconst view_name = T.isString(arg_view_name) ? arg_view_name : ( ( T.isObject(arg_view_name) && arg_view_name.is_component) ? arg_view_name.get_name() : 'undefined')\r\n\t\tconst menubar_name = T.isString(arg_menubar_name) ? arg_menubar_name : ( ( T.isObject(arg_menubar_name) && arg_menubar_name.is_component) ? arg_menubar_name.get_name() : 'undefined')\r\n\t\tconsole.log(context + ':process_mw_view:view,menubar:', view_name, menubar_name)\r\n\r\n\t\tassert( T.isString(arg_view_name) || ( T.isObject(arg_view_name) && arg_view_name.is_component), context + ':process_mw_view:bad view string or object')\r\n\r\n\t\t// GET ASSETS CONFIG\r\n\t\tconst assets = this.service.get_assets_services_names('any')\r\n\r\n\t\t// CREATE RENDERING RESULT AND BUILDER\r\n\t\tconst arg_application = undefined\r\n\t\tconst renderer = new RenderingBuilder(this.runtime, assets.style, assets.script, assets.image, assets.html, arg_application)\r\n\t\t\r\n\t\t// RENDER TREE\r\n\t\tconst renderer_result_json = renderer.render_json_content(arg_view_name, arg_menubar_name, arg_credentials)\r\n\r\n\t\treturn renderer_result_json\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Populate a response with error message.\r\n\t * \r\n\t * @param {ServiceResponse} arg_response - response instance.\r\n\t * @param {array} arg_operands      - request operands.\r\n\t * @param {string} arg_error        - error text.\r\n\t * @param {string} arg_target_route - target route (optional).\r\n\t * @param {Error} arg_exception     - exception (optional).\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tfill_error(arg_response, arg_operands, arg_error, arg_target_route, arg_exception)\r\n\t{\r\n\t\tconst op = arg_response.get_operation()\r\n\t\tconst svc = arg_response.get_service()\r\n\t\tconst error_msg = format('produce:error=[%s] with svc=[%s] operation=[%s] target route=[%s] exception=[%s].', arg_error, svc, op, arg_target_route, arg_exception)\r\n\t\t\r\n\t\targ_response.set_has_error(true)\r\n\t\targ_response.set_error(error_msg)\r\n\t\targ_response.set_results(arg_operands)\r\n\t\t\r\n\t\tthis.leave_group(error_msg)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/middlewares/middlewares_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js",
    "static": true,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/middlewares/middlewares_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 19,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "class",
    "name": "MiddlewaresSvcProvider",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js",
    "static": true,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/middlewares/middlewares_svc_provider.js",
    "importStyle": "MiddlewaresSvcProvider",
    "description": "Middlewares service provider class.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 141,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#constructor",
    "access": "public",
    "description": "Create a middleware service provider.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "is_middleware_svc_provider",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#is_middleware_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "exec",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#exec",
    "access": "public",
    "description": "Service executable instance.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Executable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "process_mw_file",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#process_mw_file",
    "access": "public",
    "description": "Process a middleware file.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - JSON rendering result."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_mw_file",
        "description": "middleware file."
      },
      {
        "nullable": null,
        "types": [
          "Credentials"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_credentials",
        "description": "request credentials."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "JSON rendering result."
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "process_mw_view",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#process_mw_view",
    "access": "public",
    "description": "Process a middleware view.",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - JSON rendering result."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_view_name",
        "description": "middleware view name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_menubar_name",
        "description": "middleware menubar name."
      },
      {
        "nullable": null,
        "types": [
          "Credentials"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_credentials",
        "description": "request credentials."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "JSON rendering result."
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "fill_error",
    "memberof": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/middlewares/middlewares_svc_provider.js~MiddlewaresSvcProvider#fill_error",
    "access": "public",
    "description": "Populate a response with error message.",
    "lineNumber": 292,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_response",
        "description": "response instance."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_operands",
        "description": "request operands."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_error",
        "description": "error text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_target_route",
        "description": "target route (optional)."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_exception",
        "description": "exception (optional)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "js/services/ping/ping_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport {format} from 'util'\r\n\r\n// COMMON IMPORTS\r\nimport T                  from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider    from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse    from 'devapt-core-common/dist/js/services/service_response'\r\nimport DistributedMessage from 'devapt-core-common/dist/js/base/distributed_message'\r\n\r\n// SERVICES IMPORTS\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/ping/ping_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Ping service provider class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class PingSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a ping service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_ping_svc_provider = true\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn ['devapt-ping'].concat(super.get_operations_names())\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce')\r\n\r\n\t\tif ( ! T.isObject(arg_request) || ! arg_request.is_service_request)\r\n\t\t{\r\n\t\t\tthis.leave_group('produce:bad request object')\r\n\r\n\t\t\treturn Promise.resolve({error:'bad request object'})\r\n\t\t}\r\n\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands  = arg_request.get_operands()\r\n\t\tconst target    = operands.length > 0 && T.isNotEmptyString(operands[0]) ? operands[0] : undefined\r\n\r\n\t\t// DEBUG\r\n\t\tthis.debug('produce:request for service=' + this.service.get_name() + ':operation=' + operation)\r\n\t\t// console.log(context + ':produce:request for service=' + this.service.get_name() + ':operation=' + operation)\r\n\r\n\t\tif (operation == 'devapt-ping')\r\n\t\t{\r\n\t\t\t// DEBUG\r\n\t\t\tthis.debug('produce:process for service=' + this.service.get_name() + ':operation=' + operation)\r\n\t\t\t// console.log(context + ':produce:process for service=' + this.service.get_name() + ':operation=' + operation)\r\n\r\n\t\t\tif (! target/* || target == this.get_runtime().node.get_name()*/)\r\n\t\t\t{\r\n\t\t\t\t// DEBUG\r\n\t\t\t\tthis.debug('produce:reply for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\t\t\t\t// console.log(context + ':produce:reply for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\t\t\t\t\r\n\t\t\t\tconst response  = new ServiceResponse(arg_request)\r\n\t\t\t\tresponse.set_results(['devapt-pong'])\r\n\r\n\t\t\t\tthis.leave_group('produce:locally resolved')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst work = (resolve/*, reject*/)=>{\r\n\t\t\t\tconst response  = new ServiceResponse(arg_request)\r\n\r\n\t\t\t\t// DEBUG\r\n\t\t\t\tthis.enter_group('produce:forward request for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\t\t\t\t// console.log(context + ':produce:forward request for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\t\t\t\t\r\n\t\t\t\tconst plain_object_payload = arg_request.get_properties_values()\r\n\t\t\t\tplain_object_payload.socket_id = arg_request.get_socket().id\r\n\t\t\t\t\r\n\t\t\t\tconst msg = new DistributedMessage(arg_request.get_session_uid(), target, plain_object_payload)\r\n\t\t\t\tconst bool_result = this.get_runtime().node.get_msg_bus().msg_post(msg)\r\n\t\t\t\t\r\n\t\t\t\tif (! bool_result)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.fill_error(response, operands, 'message forward failure', target)\r\n\t\t\t\t\tresolve(response)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.leave_group('produce:forward request')\r\n\t\t\treturn new Promise(work)\r\n\t\t}\r\n\r\n\t\tthis.leave_group('produce:super.')\r\n\t\treturn super.produce(arg_request)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Populate a response with error message.\r\n\t * \r\n\t * @param {ServiceResponse} arg_response - response instance.\r\n\t * @param {array} arg_operands     - request operands.\r\n\t * @param {string} arg_error       - error text.\r\n\t * @param {string} arg_target      - target name.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tfill_error(arg_response, arg_operands, arg_error, arg_target='N/A')\r\n\t{\r\n\t\tconst op = arg_response.get_operation()\r\n\t\tconst svc = arg_response.get_service()\r\n\t\tconst error_msg = format('produce:error=[%s] with svc=[%s] operation=[%s] target=[%s].', arg_error, svc, op, arg_target)\r\n\t\t\r\n\t\targ_response.set_has_error(true)\r\n\t\targ_response.set_error(error_msg)\r\n\t\targ_response.set_results(arg_operands)\r\n\t\t\r\n\t\tthis.leave_group(error_msg)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/ping/ping_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/ping/ping_svc_provider.js",
    "static": true,
    "longname": "js/services/ping/ping_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/ping/ping_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 17,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "PingSvcProvider",
    "memberof": "js/services/ping/ping_svc_provider.js",
    "static": true,
    "longname": "js/services/ping/ping_svc_provider.js~PingSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/ping/ping_svc_provider.js",
    "importStyle": "PingSvcProvider",
    "description": "Ping service provider class.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/ping/ping_svc_provider.js~PingSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/ping/ping_svc_provider.js~PingSvcProvider#constructor",
    "access": "public",
    "description": "Create a ping service provider.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "is_ping_svc_provider",
    "memberof": "js/services/ping/ping_svc_provider.js~PingSvcProvider",
    "static": false,
    "longname": "js/services/ping/ping_svc_provider.js~PingSvcProvider#is_ping_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/ping/ping_svc_provider.js~PingSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/ping/ping_svc_provider.js~PingSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/ping/ping_svc_provider.js~PingSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/ping/ping_svc_provider.js~PingSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "fill_error",
    "memberof": "js/services/ping/ping_svc_provider.js~PingSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/ping/ping_svc_provider.js~PingSvcProvider#fill_error",
    "access": "public",
    "description": "Populate a response with error message.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_response",
        "description": "response instance."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_operands",
        "description": "request operands."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_error",
        "description": "error text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_target",
        "description": "target name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "js/services/resources/executable_route_get_resource.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\nimport fs from 'fs'\r\n\r\n// COMMON IMPORTS\r\nimport T             from 'devapt-core-common/dist/js/utils/types'\r\nimport {get_runtime} from 'devapt-core-common/dist/js/base/runtime'\r\n\r\n// SERVICES IMPORTS\r\nimport ExecutableRoute from '../../executables/executable_route'\r\n\r\n\r\n/**\r\n * Runtime instance.\r\n * @private\r\n * @type {RuntimeBase}\r\n */\r\nconst runtime = get_runtime()\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'server/services/base/executable_route_get_resources'\r\n\r\n\r\n\r\n/**\r\n * @file Get resource route registering class.\r\n * @todo check resources accesses\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class ExecutableRouteGetResources extends ExecutableRoute\r\n{\r\n    /**\r\n     * Create a ExecutableRouteGetResources instance.\r\n\t * @extends ExecutableRoute\r\n\t * \r\n\t * @param {ServiceProvider} arg_provider - service provider.\r\n\t * \r\n\t * @returns {nothing}\r\n     */\r\n\tconstructor(arg_provider)\r\n\t{\r\n\t\tsuper(context)\r\n\r\n\t\t// this.provider = arg_provider\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    /**\r\n     * Get a collection resources list.\r\n\t * \r\n     * @param {object} res - response instance\r\n     * @param {object} arg_application - Application instance.\r\n     * @param {object} arg_cfg_route - plain object route configuration.\r\n\t * \r\n     * @returns {nothing}\r\n     */\r\n\tsend_resources_list(res, arg_application, arg_cfg_route)\r\n\t{\r\n\t\tthis.info('LIST resources')\r\n\t\t\t\t\r\n\t\t// GET RESOURCES LIST\r\n\t\tconst resources_list = arg_application.get_resources_names(arg_cfg_route.collection)\r\n\t\t\r\n\t\t// SEND OUTPUT\r\n\t\tres.contentType = 'json';\r\n\t\tres.send({ resources: resources_list });\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n     * Callback for route handling.\r\n     * @override\r\n     * @param {object} arg_application - Application instance.\r\n     * @param {object} arg_cfg_route - plain object route configuration.\r\n     * @param {object} arg_data - plain object contextual datas.\r\n     * @param {function} route handler.\r\n     */\r\n\tget_route_cb(arg_application, arg_cfg_route, arg_data)\r\n\t{\r\n\t\tlet self = this\r\n\t\t\r\n\t\treturn function exec_http(req, res, next)\r\n\t\t{\r\n\t\t\t// self.enable_trace()\r\n\t\t\t\r\n\t\t\tself.enter_group('ExecutableRouteGetResources.exec_http')\r\n\t\t\t\r\n\t\t\t// CHECK ARGS\r\n\t\t\tassert(T.isString(arg_cfg_route.collection), context + ':bad collection name')\r\n\t\t\t// console.log(arg_cfg_route, 'arg_cfg_route')\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// TODO: CHECK ACCESS TO RESOURCE FROM USER\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// LIST RESOURCES\r\n\t\t\tif (! arg_cfg_route.item)\r\n\t\t\t{\r\n\t\t\t\tself.send_resources_list(res, arg_application, arg_cfg_route)\r\n\t\t\t\t\r\n\t\t\t\tself.leave_group('ExecutableRouteGetResources.exec_http')\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tassert( T.isString(arg_cfg_route.item), context + ':bad collection item string')\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// GET RESOURCE NAME\r\n\t\t\tlet resource = null\r\n\t\t\tlet resource_name = req.params[arg_cfg_route.item];\r\n\t\t\tassert( T.isString(resource_name), context + ':bad resource name [%s]', resource_name)\r\n\t\t\t\r\n\t\t\tif (resource_name.length == 0)\r\n\t\t\t{\r\n\t\t\t\tself.send_resources_list(res, arg_application, arg_cfg_route)\r\n\t\t\t\t\r\n\t\t\t\tself.leave_group('ExecutableRouteGetResources.exec_http')\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// GET ONE RESOURCE\r\n\t\t\tself.info('GET one resource')\r\n\t\t\tif (arg_cfg_route.collection === '*')\r\n\t\t\t{\r\n\t\t\t\tself.info('GET one resource [' + resource_name + '] of any collection')\r\n\t\t\t\t\r\n\t\t\t\tresource = arg_application.find_resource(resource_name)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tself.info('GET one resource [' + resource_name + '] of one collection [' + arg_cfg_route.collection + ']')\r\n\t\t\t\t\r\n\t\t\t\t// LOOKUP RESOURCE\r\n\t\t\t\tresource = arg_application.find_resource(resource_name, arg_cfg_route.collection)\r\n\t\t\t\tif ( ! resource)\r\n\t\t\t\t{\r\n\t\t\t\t\tself.debug('resource not found [' + resource_name + ']')\r\n\t\t\t\t\tconsole.error('bad resource type')\r\n\t\t\t\t\tconsole.log(resource.$type, 'resource.$type')\r\n\t\t\t\t\tconsole.log(arg_cfg_route.collection, 'arg_cfg_route.collection')\r\n\t\t\t\t\tresource = null\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// CHECK RESOURCE TYPE\r\n\t\t\t\t// if (resource && resource.$type != arg_cfg_route.collection)\r\n\t\t\t\t// {\r\n\t\t\t\t// }\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// RESOURCE NOT FOUND ?\r\n\t\t\tif ( ! T.isObject(resource) )\r\n\t\t\t{\r\n\t\t\t\t// SEND OUTPUT\r\n\t\t\t\tres.status(404)\r\n\t\t\t\tres.contentType = 'json'\r\n\t\t\t\tres.send({ error: 'Resource not found [' + resource_name + ']' })\r\n\t\t\t\t\r\n\t\t\t\t// next( new Error('Resource not found [' + resource_name + ']') )\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// TODO: SANITY CHECK OF RESOURCE CONFIG (connections...)\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// WRAP INCLUDED FILE\r\n\t\t\tif ( resource.has_setting('include_file_path_name') )\r\n\t\t\t{\r\n\t\t\t\tself.debug('Process resource.include_file_path_name [%s]', resource.include_file_path_name)\r\n\t\t\t\t\r\n\t\t\t\tconst file_path = resource.get_setting('include_file_path_name')\r\n\t\t\t\tif ( T.isString(file_path) )\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst file_content = self.include_file(self, resource_name, file_path)\r\n\t\t\t\t\t\tresource.set_setting('include_file_content', file_content)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst error_msg = 'an error occures when loading file [' + e.toString() + ']'\r\n\t\t\t\t\t\tresource.set_setting('include_file_content', error_msg)\r\n\t\t\t\t\t\tself.error(error_msg)\r\n\t\t\t\t\t\tconsole.error(error_msg)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// SEND OUTPUT\r\n\t\t\tres.contentType = 'json'\r\n\t\t\tres.send({ resource: resource.export_settings() })\r\n\t\t\t\r\n\t\t\tself.leave_group('ExecutableRouteGetResources.exec_http')\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n    /**\r\n     * Load an asset file for a resource\r\n     * @param {object} self - this class instance\r\n     * @param {string} arg_resource_name - resource name\r\n     * @param {string} arg_file_path_name - file path name\r\n     * @returns {string} file content\r\n     */\r\n\tinclude_file(self, arg_resource_name, arg_file_path_name)\r\n\t{\r\n\t\tconst file_path = runtime.context.get_absolute_path(arg_file_path_name)\r\n\t\tself.debug('Process file_path [%s]', file_path)\r\n\t\t\r\n\t\t\r\n\t\tlet content = fs.readFileSync(file_path, {encoding: 'utf-8'} )\r\n\t\t\r\n\t\tif (! content)\r\n\t\t{\r\n\t\t\tvar error_msg = context + ':resource include file not found [' + arg_resource_name + '] for resource [' + file_path + ']'\r\n\t\t\tconsole.error('loading resource include file')\r\n\t\t\tthrow new Error(error_msg);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tconsole.log('loading resource include file: return')\r\n\t\treturn content\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/resources/executable_route_get_resource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "runtime",
    "memberof": "js/services/resources/executable_route_get_resource.js",
    "static": true,
    "longname": "js/services/resources/executable_route_get_resource.js~runtime",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/resources/executable_route_get_resource.js",
    "importStyle": null,
    "description": "Runtime instance.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "RuntimeBase"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/resources/executable_route_get_resource.js",
    "static": true,
    "longname": "js/services/resources/executable_route_get_resource.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/resources/executable_route_get_resource.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 25,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "ExecutableRouteGetResources",
    "memberof": "js/services/resources/executable_route_get_resource.js",
    "static": true,
    "longname": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/resources/executable_route_get_resource.js",
    "importStyle": "ExecutableRouteGetResources",
    "description": "",
    "lineNumber": 35,
    "todo": [
      "check resources accesses"
    ],
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "Get resource route registering class."
      },
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/executables/executable_route.js~ExecutableRoute"
    ]
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources#constructor",
    "access": "public",
    "description": "Create a ExecutableRouteGetResources instance.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "ExecutableRoute"
      },
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceProvider"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider",
        "description": "service provider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "send_resources_list",
    "memberof": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources#send_resources_list",
    "access": "public",
    "description": "Get a collection resources list.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response instance"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "get_route_cb",
    "memberof": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources#get_route_cb",
    "access": "public",
    "description": "Callback for route handling.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "handler."
      }
    ],
    "override": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "include_file",
    "memberof": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/executable_route_get_resource.js~ExecutableRouteGetResources#include_file",
    "access": "public",
    "description": "Load an asset file for a resource",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} file content"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": "this class instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_resource_name",
        "description": "resource name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_file_path_name",
        "description": "file path name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "file content"
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "js/services/resources/resources_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport {format} from 'util'\r\n\r\n// COMMON IMPORTS\r\nimport T                  from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider    from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse    from 'devapt-core-common/dist/js/services/service_response'\r\n\r\n// SERVICES IMPORTS\r\nimport ExecutableRouteResources from './executable_route_get_resource'\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/resources/resources_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Resources service provider class.\r\n * \r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n * \r\n */\r\nexport default class ResourcesSvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a resources gateway service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_resources_svc_provider = true\r\n\t\t\r\n\t\t/**\r\n\t\t * Service executable instance.\r\n\t\t * @type {Executable}\r\n\t\t */\r\n\t\tthis.exec = new ExecutableRouteResources(this)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * @abstract\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn [\r\n\t\t\t'devapt-res-get', 'devapt-res-list'\r\n\t\t]\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce')\r\n\r\n\t\tif ( ! T.isObject(arg_request) || ! arg_request.is_service_request)\r\n\t\t{\r\n\t\t\tthis.leave_group('produce:error:bad request object.')\r\n\t\t\treturn Promise.resolve({error:'bad request object'})\r\n\t\t}\r\n\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconst operands = arg_request.get_operands()\r\n\t\tconst credentials = arg_request.get_credentials()\r\n\r\n\t\t// GET TENANT NAME\r\n\t\tconst tenant_name = T.isObject(credentials) ? credentials.tenant : undefined\r\n\t\tconst check_tenant_name = T.isNotEmptyString(tenant_name)\r\n\t\tif (! check_tenant_name)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad credentials tenant name', tenant_name, application_name, undefined, undefined)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// GET APPLICATION NAME\r\n\t\tconst application_name = T.isObject(credentials) ? credentials.application : undefined\r\n\t\tthis.debug('application_name', application_name)\r\n\t\t// console.log('application_name', application_name)\r\n\t\tconst check_app_name = T.isNotEmptyString(application_name)\r\n\t\tif (! check_app_name)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad credentials application name', tenant_name, application_name, undefined, undefined)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\t\r\n\t\t// DEBUG\r\n\t\t// this.debug('tenant_name', tenant_name)\r\n\t\t// console.log('tenant_name', tenant_name)\r\n\t\tconsole.log(context + ':produce:request for operation=%s tenant=%s and app=%s', operation, tenant_name, application_name)\r\n\r\n\t\t// GET DEFINED TENANT\r\n\t\tconst defined_tenant = this.get_runtime().defined_world_topology.tenant(tenant_name)\r\n\t\tconst check_tenant = T.isObject(defined_tenant) && defined_tenant.is_topology_define_tenant\r\n\t\tif (! check_tenant)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad credentials tenant object', tenant_name, application_name, undefined, undefined)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// GET DEFINED APPLICATION\r\n\t\tconst application = defined_tenant.application(application_name)\r\n\t\tconst check_app = T.isObject(application) && application.is_topology_define_application\r\n\t\tif (! check_app)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad credentials application object', tenant_name, application_name, undefined, undefined)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// GET COLLECTION NAME\r\n\t\tconst opd_1 = T.isNotEmptyArray(operands) ? operands[0] : ( T.isObject(operands) ? operands.collection : undefined)\r\n\t\tconst collection = T.isNotEmptyString(opd_1) ? opd_1 : undefined\r\n\t\tif (! collection)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad collection name', tenant_name, application_name, undefined, undefined)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// OPERATION: LIST ALL APPLICATION RESOURCES\r\n\t\tif (operation == 'devapt-res-list')\r\n\t\t{\r\n\t\t\tconst res_list = application.get_resources_names(collection)\r\n\t\t\tconst results = [ { resources_names:res_list } ]\r\n\r\n\t\t\tresponse.set_results(results)\r\n\r\n\t\t\tthis.leave_group( format('produce:service[%s] operation[%s] resources count[%n]', response.get_service(), operation, res_list.length) )\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\r\n\t\t// GET RESOURCE NAME\r\n\t\tconst opd_2 = T.isNotEmptyArray(operands) ? operands[1] : ( T.isObject(operands) ? operands.resource : undefined)\r\n\t\tconst res_name = T.isNotEmptyString(opd_2) ? opd_2 : undefined\r\n\t\tif (! res_name)\r\n\t\t{\r\n\t\t\tthis.fill_error(response, operands, 'bad resource name', tenant_name, application_name, collection, undefined)\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\t\r\n\t\t// OPERATION: GET RESOURCES\r\n\t\tif (operation == 'devapt-res-get')\r\n\t\t{\r\n\t\t\tconst type = (collection && collection != '*') ? collection : undefined\r\n\t\t\tconst resource_instance = application.find_resource(res_name, type)\r\n\r\n\t\t\tif (! T.isObject(resource_instance) )\r\n\t\t\t{\r\n\t\t\t\tthis.fill_error(response, operands, 'resource not found', tenant_name, application_name, collection, res_name)\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tif (collection !== '*' && (resource_instance.topology_type != collection) )\r\n\t\t\t{\r\n\t\t\t\tthis.fill_error(response, operands, 'resource found but bad collection', tenant_name, application_name, collection, res_name)\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst res_settings = this.get_resource_json(resource_instance)\r\n\t\t\tconst results = [res_settings]\r\n\t\t\tif (res_settings.error)\r\n\t\t\t{\r\n\t\t\t\tthis.fill_error(response, operands, res_settings.error, tenant_name, application_name, collection, res_name)\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t\t}\r\n\r\n\t\t\tresponse.set_results(results)\r\n\t\t\tthis.leave_group( format('produce:service[%s] operation[%s] resources count[%n]', response.get_service(), operation, results.length) )\r\n\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\t\t\r\n\t\tthis.fill_error(response, operands, 'bad operation', tenant_name, application_name, collection, res_name)\r\n\t\treturn Promise.resolve(response)\r\n\r\n\t\t// this.leave_group('produce:super.')\r\n\t\t// return super.produce(arg_request)\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Populate a response with error message.\r\n\t * \r\n\t * @param {ServiceResponse} arg_response - response instance.\r\n\t * @param {array} arg_operands     - request operands.\r\n\t * @param {string} arg_error       - error text.\r\n\t * @param {string} arg_tenant      - tenant name.\r\n\t * @param {string} arg_application - application name.\r\n\t * @param {string} arg_collection  - collection name.\r\n\t * @param {string} arg_resource    - resource name.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tfill_error(arg_response, arg_operands, arg_error, arg_tenant='N/A', arg_application='N/A', arg_collection='N/A', arg_resource='N/A')\r\n\t{\r\n\t\tconst op = arg_response.get_operation()\r\n\t\tconst svc = arg_response.get_service()\r\n\t\tconst error_msg = format('produce:error=[%s] with svc=[%s] operation=[%s] tenant=[%s] app=[%s] collection=[%s] resource=[%s].', arg_error, svc, op, arg_tenant, arg_application, arg_collection, arg_resource)\r\n\t\t\r\n\t\targ_response.set_has_error(true)\r\n\t\targ_response.set_error(error_msg)\r\n\t\targ_response.set_results(arg_operands)\r\n\t\t\r\n\t\tthis.leave_group(error_msg)\r\n\t}\r\n\t\r\n\r\n\r\n\t/**\r\n\t * Get resource settings.\r\n\t * \r\n\t * @param {Instance} arg_resource - resource instance.\r\n\t * \r\n\t * @returns {object}\r\n\t */\r\n\tget_resource_json(arg_resource)\r\n\t{\r\n\t\t// WRAP INCLUDED FILE\r\n\t\tif ( arg_resource.has_setting('include_file_path_name') )\r\n\t\t{\r\n\t\t\tself.debug('Process resource.include_file_path_name [%s]', arg_resource.include_file_path_name)\r\n\t\t\t\r\n\t\t\tconst file_path = arg_resource.get_setting('include_file_path_name')\r\n\t\t\tif ( T.isString(file_path) )\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tconst file_content = self.include_file(self, arg_resource, file_path)\r\n\t\t\t\t\targ_resource.set_setting('include_file_content', file_content)\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst error_msg = 'an error occures when loading file [' + e.toString() + ']'\r\n\t\t\t\t\targ_resource.set_setting('include_file_content', error_msg)\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.error(context, error_msg)\r\n\r\n\t\t\t\t\treturn { error:error_msg }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn arg_resource.export_settings()\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/resources/resources_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/resources/resources_svc_provider.js",
    "static": true,
    "longname": "js/services/resources/resources_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/resources/resources_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 17,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "class",
    "name": "ResourcesSvcProvider",
    "memberof": "js/services/resources/resources_svc_provider.js",
    "static": true,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/resources/resources_svc_provider.js",
    "importStyle": "ResourcesSvcProvider",
    "description": "Resources service provider class.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#constructor",
    "access": "public",
    "description": "Create a resources gateway service provider.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "is_resources_svc_provider",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#is_resources_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "exec",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#exec",
    "access": "public",
    "description": "Service executable instance.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Executable"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "fill_error",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#fill_error",
    "access": "public",
    "description": "Populate a response with error message.",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_response",
        "description": "response instance."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_operands",
        "description": "request operands."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_error",
        "description": "error text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_tenant",
        "description": "tenant name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "application name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_collection",
        "description": "collection name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_resource",
        "description": "resource name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "get_resource_json",
    "memberof": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/resources/resources_svc_provider.js~ResourcesSvcProvider#get_resource_json",
    "access": "public",
    "description": "Get resource settings.",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Instance"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_resource",
        "description": "resource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "js/services/security/security_service.js",
    "content": "// NPM IMPORTS\r\n\r\n// SERVER IMPORTS\r\nimport BaseService from '../base/base_service'\r\nimport SecuritySvcProvider from './security_svc_provider'\r\nimport SecuritySvcConsumer from './security_svc_consumer'\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n * @type {string}\r\n */\r\nconst context = 'server/services/security/security_service'\r\n\r\n\r\n\r\n/**\r\n * Service class for security access:login, logout, renew.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class SecurityService extends BaseService\r\n{\r\n\t/**\r\n\t * Create a Security service.\r\n\t * \r\n\t * @param {string} arg_svc_name - service name.\r\n\t * @param {object} arg_service_settings - service settings.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_svc_name, arg_service_settings, arg_context)\r\n\t{\r\n\t\tsuper(arg_svc_name, arg_service_settings, arg_context ? arg_context : context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_security_service = true\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a Security service provider.\r\n\t * \r\n\t * @param {string} arg_name - provider name.\r\n\t * @param {Service} arg_service - service instance.\r\n\t * \r\n\t * @returns {ServiceProvider} - service provider instance.\r\n\t */\r\n\tcreate_provider(arg_name, arg_service)\r\n\t{\r\n\t\t// TODO: why not this in place of arg_service\r\n\t\treturn new SecuritySvcProvider(arg_name, arg_service)\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a Security service consumer.\r\n\t * \r\n\t * @returns {ServiceConsumer} - service consumer instance\r\n\t */\r\n\tcreate_consumer()\r\n\t{\r\n\t\treturn new SecuritySvcConsumer(this.get_name() + '_consumer_' + this.get_id(), this)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/security/security_service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/security/security_service.js",
    "static": true,
    "longname": "js/services/security/security_service.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/security/security_service.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "SecurityService",
    "memberof": "js/services/security/security_service.js",
    "static": true,
    "longname": "js/services/security/security_service.js~SecurityService",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/security/security_service.js",
    "importStyle": "SecurityService",
    "description": "Service class for security access:login, logout, renew.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/base_service.js~BaseService"
    ]
  },
  {
    "__docId__": 178,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/security/security_service.js~SecurityService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_service.js~SecurityService#constructor",
    "access": "public",
    "description": "Create a Security service.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_svc_name",
        "description": "service name."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_settings",
        "description": "service settings."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "is_security_service",
    "memberof": "js/services/security/security_service.js~SecurityService",
    "static": false,
    "longname": "js/services/security/security_service.js~SecurityService#is_security_service",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "create_provider",
    "memberof": "js/services/security/security_service.js~SecurityService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_service.js~SecurityService#create_provider",
    "access": "public",
    "description": "Create a Security service provider.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ServiceProvider} - service provider instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_name",
        "description": "provider name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service",
        "description": "service instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ServiceProvider"
      ],
      "spread": false,
      "description": "service provider instance."
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "create_consumer",
    "memberof": "js/services/security/security_service.js~SecurityService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_service.js~SecurityService#create_consumer",
    "access": "public",
    "description": "Create a Security service consumer.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ServiceConsumer} - service consumer instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ServiceConsumer"
      ],
      "spread": false,
      "description": "service consumer instance"
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "js/services/security/security_svc_consumer.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// SERVER IMPORTS\r\nimport ServiceConsumer from '../base/service_consumer'\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'server/services/security/security_svc_consumer'\r\n\r\n\r\n\r\n/**\r\n * Security service consumer class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class SecuritySvcConsumer extends ServiceConsumer\r\n{\r\n\t/**\r\n\t * Create a Security service consumer.\r\n\t * \r\n\t * @param {string} arg_consumer_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_consumer_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_consumer_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\tassert( arg_service_instance.is_security_service, context + ':constructor:bad crud service instance')\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Enhance operands if needed.\r\n\t * \r\n\t * @params {array} arg_operands - Variable list of operands.\r\n\t * \r\n\t * @returns {array} - not used.\r\n\t */\r\n\tprepare_args(arg_operands)\r\n\t{\r\n\t\tthis.enter_group('prepare_args')\r\n\t\t\r\n\t\tthis.leave_group('prepare_args')\r\n\t\treturn arg_operands\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Consume a service on the same host.\r\n\t * @param {object} arg_provider - service provider.\r\n\t * \r\n\t * @return {object} a promise of results.\r\n\t */\r\n\tconsume_local(/*arg_provider*/)\r\n\t{\r\n\t\treturn Promise.resolve(undefined)\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Consume a service on a remote host.\r\n\t * \r\n\t * @param {object} arg_provider - service provider.\r\n\t * @param {array} arg_routes - Routes to request.\r\n\t * \r\n\t * @return {object} a promise of results.\r\n\t */\r\n\tconsume_remote(/*arg_provider, arg_routes*/)\r\n\t{\r\n\t\tthis.enter_group('consume_remote')\r\n\t\t\r\n\t\t\r\n\t\tthis.leave_group('consume_remote')\r\n\t\treturn Promise.resolve(undefined)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/security/security_svc_consumer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/security/security_svc_consumer.js",
    "static": true,
    "longname": "js/services/security/security_svc_consumer.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/security/security_svc_consumer.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 12,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "SecuritySvcConsumer",
    "memberof": "js/services/security/security_svc_consumer.js",
    "static": true,
    "longname": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/security/security_svc_consumer.js",
    "importStyle": "SecuritySvcConsumer",
    "description": "Security service consumer class.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/service_consumer.js~ServiceConsumer"
    ]
  },
  {
    "__docId__": 185,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer#constructor",
    "access": "public",
    "description": "Create a Security service consumer.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_consumer_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "prepare_args",
    "memberof": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer#prepare_args",
    "access": "public",
    "description": "Enhance operands if needed.",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{array} arg_operands - Variable list of operands."
      },
      {
        "tagName": "@returns",
        "tagValue": "{array} - not used."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "not used."
    },
    "params": [
      {
        "name": "arg_operands",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "consume_local",
    "memberof": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer#consume_local",
    "access": "public",
    "description": "Consume a service on the same host.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider",
        "description": "service provider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "a promise of results."
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "consume_remote",
    "memberof": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_svc_consumer.js~SecuritySvcConsumer#consume_remote",
    "access": "public",
    "description": "Consume a service on a remote host.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider",
        "description": "service provider."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_routes",
        "description": "Routes to request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "a promise of results."
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "js/services/security/security_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T from 'devapt-core-common/dist/js/utils/types'\r\nimport {get_runtime} from 'devapt-core-common/dist/js/base/runtime'\r\n\r\n// SERVER IMPORTS\r\nimport SocketIOServiceProvider from '../base/socketio_service_provider'\r\n\r\n\r\n/**\r\n * Runtime instance.\r\n * @private\r\n * @type {RuntimeBase}\r\n */\r\nconst runtime = get_runtime()\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'server/services/security/security_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Security service provider class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class SecuritySvcProvider extends SocketIOServiceProvider\r\n{\r\n\t/**\r\n\t * Create a Security service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\t\r\n\t\tassert(this.service.is_security_service, context + ':bad Security service')\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Process request and returns datas.\r\n\t * \r\n\t * @param {string} arg_method - method name\r\n\t * @param {array} arg_operands - request operands\r\n\t * @param {Credentials} arg_credentials - request credentials\r\n\t * \r\n\t * @returns {Promise}\r\n\t */\r\n\tprocess(arg_method, arg_operands, arg_credentials)\r\n\t{\r\n\t\tassert( T.isString(arg_method), context + ':process:bad method string')\r\n\t\tassert( T.isArray(arg_operands), context + ':process:bad operands array')\r\n\t\tassert( T.isObject(arg_credentials) && arg_credentials.is_credentials, context + ':process:bad credentials object')\r\n\t\t\r\n\t\tswitch(arg_method)\r\n\t\t{\r\n\t\t\tcase 'login': {\r\n\t\t\t\t// GET WITHOUT OPERANDS\r\n\t\t\t\tif ( arg_operands.length == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst login_result = runtime.security().authenticate(arg_credentials)\r\n\t\t\t\t\treturn Promise.resolve(login_result)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// GET WITH OPERANDS\r\n\t\t\t\t// const first_operand = arg_operands[0]\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcase 'signup': {\r\n\t\t\t\t// TODO logout\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcase 'logout': {\r\n\t\t\t\t// TODO logout\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcase 'change_password': {\r\n\t\t\t\t// TODO logout\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcase 'reset_password': {\r\n\t\t\t\t// TODO logout\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcase 'renew': {\r\n\t\t\t\t// TODO logout\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject('bad data request operation [' + arg_method + ']')\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/security/security_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "runtime",
    "memberof": "js/services/security/security_svc_provider.js",
    "static": true,
    "longname": "js/services/security/security_svc_provider.js~runtime",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/security/security_svc_provider.js",
    "importStyle": null,
    "description": "Runtime instance.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "RuntimeBase"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/security/security_svc_provider.js",
    "static": true,
    "longname": "js/services/security/security_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/security/security_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 24,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "SecuritySvcProvider",
    "memberof": "js/services/security/security_svc_provider.js",
    "static": true,
    "longname": "js/services/security/security_svc_provider.js~SecuritySvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/security/security_svc_provider.js",
    "importStyle": "SecuritySvcProvider",
    "description": "Security service provider class.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/socketio_service_provider.js~SocketIOServiceProvider"
    ]
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/security/security_svc_provider.js~SecuritySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_svc_provider.js~SecuritySvcProvider#constructor",
    "access": "public",
    "description": "Create a Security service provider.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "process",
    "memberof": "js/services/security/security_svc_provider.js~SecuritySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/security/security_svc_provider.js~SecuritySvcProvider#process",
    "access": "public",
    "description": "Process request and returns datas.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_method",
        "description": "method name"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_operands",
        "description": "request operands"
      },
      {
        "nullable": null,
        "types": [
          "Credentials"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_credentials",
        "description": "request credentials"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "js/services/todo_cli/cli_svc_consumer.js",
    "content": "",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/todo_cli/cli_svc_consumer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "js/services/todo_cli/cli_svc_provider.js",
    "content": "",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/todo_cli/cli_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "js/services/todo_crud/crud_service.js",
    "content": "// SERVER IMPORTS\r\nimport BaseService from '../base/base_service'\r\nimport CrudSvcProvider from './crud_svc_provider'\r\nimport CrudSvcConsumer from './crud_svc_consumer'\r\n\r\n\r\nlet context = 'server/services/crud/crud_service'\r\n\r\n\r\n\r\n/**\r\n * Crud service class for CRUD routes.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class CrudService extends BaseService\r\n{\r\n\t/**\r\n\t * Create a crud service.\r\n\t * @param {string} arg_svc_name - service name\r\n\t * @param {object} arg_service_settings - service settings\r\n\t * @param {string} arg_context - logging context label\r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_svc_name, arg_service_settings, arg_context)\r\n\t{\r\n\t\tsuper(arg_svc_name, arg_service_settings, arg_context ? arg_context : context)\r\n\t\t\r\n\t\tthis.is_crud_service = true\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a service provider.\r\n\t * @param {string} arg_name - provider name\r\n\t * @param {Service} arg_service - service instance\r\n\t * @returns {ServiceProvider} - service provider instance\r\n\t */\r\n\tcreate_provider(arg_name, arg_service)\r\n\t{\r\n\t\t// TODO: why not this in place of arg_service\r\n\t\treturn new CrudSvcProvider(arg_name, arg_service)\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a service consumer.\r\n\t * @returns {ServiceConsumer} - service consumer instance\r\n\t */\r\n\tcreate_consumer()\r\n\t{\r\n\t\treturn new CrudSvcConsumer(this.get_name() + '_consumer_' + this.get_id(), this)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/todo_crud/crud_service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/todo_crud/crud_service.js",
    "static": true,
    "longname": "js/services/todo_crud/crud_service.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/todo_crud/crud_service.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "CrudService",
    "memberof": "js/services/todo_crud/crud_service.js",
    "static": true,
    "longname": "js/services/todo_crud/crud_service.js~CrudService",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/todo_crud/crud_service.js",
    "importStyle": "CrudService",
    "description": "Crud service class for CRUD routes.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/base_service.js~BaseService"
    ]
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/todo_crud/crud_service.js~CrudService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/crud_service.js~CrudService#constructor",
    "access": "public",
    "description": "Create a crud service.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_svc_name",
        "description": "service name"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_settings",
        "description": "service settings"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "is_crud_service",
    "memberof": "js/services/todo_crud/crud_service.js~CrudService",
    "static": false,
    "longname": "js/services/todo_crud/crud_service.js~CrudService#is_crud_service",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "create_provider",
    "memberof": "js/services/todo_crud/crud_service.js~CrudService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/crud_service.js~CrudService#create_provider",
    "access": "public",
    "description": "Create a service provider.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ServiceProvider} - service provider instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_name",
        "description": "provider name"
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service",
        "description": "service instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ServiceProvider"
      ],
      "spread": false,
      "description": "service provider instance"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "create_consumer",
    "memberof": "js/services/todo_crud/crud_service.js~CrudService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/crud_service.js~CrudService#create_consumer",
    "access": "public",
    "description": "Create a service consumer.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ServiceConsumer} - service consumer instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ServiceConsumer"
      ],
      "spread": false,
      "description": "service consumer instance"
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "js/services/todo_crud/crud_svc_consumer.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// SERVER IMPORTS\r\nimport RoutesServiceConsumer from '../base/routes_svc_consumer'\r\n\r\n\r\nlet context = 'server/services/crud/crud_svc_consumer'\r\n\r\n\r\n\r\n/**\r\n * Service consumer class for CRUD routes.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class CrudSvcConsumer extends RoutesServiceConsumer\r\n{\r\n\t\r\n\t/**\r\n\t * Create a service consumer for CRUD routes.\r\n\t * @param {string} arg_consumer_name - consumer name\r\n\t * @param {Service} arg_service_instance - service instance\r\n\t * @param {string} arg_context - logging context label\r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_consumer_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_consumer_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\tassert( arg_service_instance.is_crud_service, context + ':constructor:bad crud service instance')\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/todo_crud/crud_svc_consumer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/todo_crud/crud_svc_consumer.js",
    "static": true,
    "longname": "js/services/todo_crud/crud_svc_consumer.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/todo_crud/crud_svc_consumer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "CrudSvcConsumer",
    "memberof": "js/services/todo_crud/crud_svc_consumer.js",
    "static": true,
    "longname": "js/services/todo_crud/crud_svc_consumer.js~CrudSvcConsumer",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/todo_crud/crud_svc_consumer.js",
    "importStyle": "CrudSvcConsumer",
    "description": "Service consumer class for CRUD routes.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/routes_svc_consumer.js~RoutesServiceConsumer"
    ]
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/todo_crud/crud_svc_consumer.js~CrudSvcConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/crud_svc_consumer.js~CrudSvcConsumer#constructor",
    "access": "public",
    "description": "Create a service consumer for CRUD routes.",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_consumer_name",
        "description": "consumer name"
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "js/services/todo_crud/crud_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// SERVER IMPORTS\r\nimport ExecutableRouteCrud from './executable_route_model_crud'\r\nimport ServiceExecProvider from '../base/service_exec_provider'\r\n\r\n\r\nlet context = 'server/services/crud/crud_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Crud service provider class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class CrudSvcProvider extends ServiceExecProvider\r\n{\r\n\t/**\r\n\t * Create a crud service provider.\r\n\t * @param {string} arg_provider_name - consumer name\r\n\t * @param {Service} arg_service_instance - service instance\r\n\t * @param {string} arg_context - logging context label\r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\t\r\n\t\tassert(this.service.is_crud_service, context + ':bad crud service')\r\n\t\t\r\n\t\tthis.exec = new ExecutableRouteCrud()\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Produce service datas on request (not implemented)\r\n\t * @returns {Promise} - promise of results\r\n\t */\r\n\tproduce()\r\n\t{\r\n\t\treturn Promise.resolve(undefined)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/todo_crud/crud_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/todo_crud/crud_svc_provider.js",
    "static": true,
    "longname": "js/services/todo_crud/crud_svc_provider.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/todo_crud/crud_svc_provider.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "CrudSvcProvider",
    "memberof": "js/services/todo_crud/crud_svc_provider.js",
    "static": true,
    "longname": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/todo_crud/crud_svc_provider.js",
    "importStyle": "CrudSvcProvider",
    "description": "Crud service provider class.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/service_exec_provider.js~ServiceExecProvider"
    ]
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider#constructor",
    "access": "public",
    "description": "Create a crud service provider.",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name"
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "exec",
    "memberof": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider",
    "static": false,
    "longname": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider#exec",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/crud_svc_provider.js~CrudSvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request (not implemented)",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of results"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of results"
    },
    "params": []
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "js/services/todo_crud/executable_route_model_crud.js",
    "content": "// NPM IMPORTS\r\nimport T from 'typr'\r\nimport assert from 'assert'\r\n\r\n// SERVER IMPORTS\r\nimport ExecutableRoute from '../../executables/executable_route'\r\n\r\n\r\nlet context = 'server/services/base/executable_route_model_crud'\r\n\r\n\r\n\r\n/**\r\n * @file CRUD operations route registering class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class ExecutableRouteModelCrud extends ExecutableRoute\r\n{\r\n    /**\r\n     * Create a route registration executable for CRUD operations\r\n\t * @extends ExecutableRoute\r\n\t * @returns {nothing}\r\n     */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(context)\r\n\t}\r\n\t\r\n    \r\n\t/**\r\n     * Process a route registering.\r\n     * @override\r\n     * @param {object} arg_server - Server instance.\r\n     * @param {object} arg_application - Application instance.\r\n     * @param {object} arg_cfg_route - plain object route configuration.\r\n     * @param {object} arg_data - plain object contextual datas.\r\n     * @returns {object} promise with a boolean resolved value (true:success, false: failure).\r\n     */\r\n\tprocess_route(arg_server, arg_application, arg_cfg_route, arg_data)\r\n\t{\r\n\t\tlet self = this\r\n\t\tself.enter_group('ExecutableRouteModelCrud.process_route')\r\n\t\t\r\n\t\t\r\n\t\t// EPILOGUE CALLBACK FUNCTION TO CHECK AUTHENTICATION AND AUTHORIZATION\r\n\t\t/*var security_epilogue_cb2 = function(arg_model_name, arg_role, arg_action_name)\r\n\t\t{\r\n\t\t\treturn function(arg_req, arg_res, arg_context)\r\n\t\t\t{\r\n\t\t\t\tconsole.info('check security for [' + arg_action_name + '] on model [' + arg_model_name + '] with role [' + arg_role + ']');\r\n\t\t\t\t\r\n\t\t\t\tvar authentication_msg = 'Authentication is rejected to ' + arg_action_name + ' for model [' + arg_model_name + ']';\r\n\t\t\t\tvar authorization_msg = 'Authorization is rejected to ' + arg_action_name + ' for model [' + arg_model_name + ']';\r\n\t\t\t\tvar failure_msg = 'Failure for ' + arg_action_name + ' for model [' + arg_model_name + ']';\r\n\t\t\t\t\r\n\t\t\t\tvar failure_cb = function(arg_msg)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn  arg_context.error( new ForbiddenError(failure_msg + \":[\" + arg_msg + ']') );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar success_cb = function(arg_authenticated)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (! arg_authenticated)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.error(authentication_msg);\r\n\t\t\t\t\t\t// throw new ForbiddenError(authentication_msg);\r\n\t\t\t\t\t\treturn arg_context.error( new ForbiddenError(authentication_msg) );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.info('items ' + arg_action_name + ' authentication is accepted for model [' + arg_model_name + ']');\r\n\t\t\t\t\t\r\n\t\t\t\t\tauthorization.check_authorization(arg_req, arg_role).then(\r\n\t\t\t\t\t\tfunction(arg_authorized)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (! arg_authorized)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconsole.error(authorization_msg);\r\n\t\t\t\t\t\t\t\t// throw new ForbiddenError(authorization_msg);\r\n\t\t\t\t\t\t\t\treturn arg_context.error( new ForbiddenError(authorization_msg) );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsole.info('items ' + arg_action_name + ' authorization is accepted for model [' + arg_model_name + ']');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfailure_cb\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tauthentication.check_request(arg_req).then(success_cb, failure_cb);\r\n\t\t\t}\r\n\t\t}*/\r\n\t\t\r\n\t\t\r\n\t\tvar security_epilogue_cb = function(/*arg_model_name, arg_role, arg_action_name*/)\r\n\t\t{\r\n\t\t\treturn function(arg_req, arg_res, arg_context)\r\n\t\t\t{\r\n\t\t\t\treturn arg_context.continue()\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\t\r\n\t\tconst app_models = arg_application.resources.get_all('models')\r\n\t\t\r\n\t\tapp_models.forEach(\r\n\t\t\t(model) => {\r\n\t\t\t\t// CHECK ARGS\r\n\t\t\t\tassert(T.isObject(model), context + ':bad model object')\r\n\t\t\t\tassert(T.isString(model.$name), context + ':bad model name')\r\n\t\t\t\tassert(T.isObject(model.roles), context + ':bad model roles')\r\n\t\t\t\t\r\n\t\t\t\tself.info('add route for model [' + model.$name + ']')\r\n\t\t\t\t\r\n\t\t\t\tlet model_name = model.$name\r\n\t\t\t\tlet model_roles = model.roles\r\n\t\t\t\tlet epilogue_resource = model.get_epilogue_resource(arg_server, arg_cfg_route.full_route)\r\n\t\t\t\t\r\n\t\t\t\t// REGISTER CREATE ACCESS CHECK\r\n\t\t\t\tepilogue_resource.create.auth( security_epilogue_cb(model_name, model_roles.create, 'create items') )\r\n\t\t\t\t\r\n\t\t\t\t// REGISTER LIST ACCESS CHECK\r\n\t\t\t\tepilogue_resource.list.auth( security_epilogue_cb(model_name, model_roles.read, 'list items') )\r\n\t\t\t\t\r\n\t\t\t\t// REGISTER READ ACCESS CHECK\r\n\t\t\t\tepilogue_resource.read.auth( security_epilogue_cb(model_name, model_roles.read, 'read an item') )\r\n\t\t\t\t\r\n\t\t\t\t// REGISTER UPDATE ACCESS CHECK\r\n\t\t\t\tepilogue_resource.update.auth( security_epilogue_cb(model_name, model_roles.update, 'update items') )\r\n\t\t\t\t\r\n\t\t\t\t// REGISTER DELETE ACCESS CHECK\r\n\t\t\t\tepilogue_resource.delete.auth( security_epilogue_cb(model_name, model_roles.delete, 'delete items') )\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\t\r\n\t\tself.leave_group('ExecutableRouteModelCrud.process_route')\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/todo_crud/executable_route_model_crud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/todo_crud/executable_route_model_crud.js",
    "static": true,
    "longname": "js/services/todo_crud/executable_route_model_crud.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/todo_crud/executable_route_model_crud.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "ExecutableRouteModelCrud",
    "memberof": "js/services/todo_crud/executable_route_model_crud.js",
    "static": true,
    "longname": "js/services/todo_crud/executable_route_model_crud.js~ExecutableRouteModelCrud",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/todo_crud/executable_route_model_crud.js",
    "importStyle": "ExecutableRouteModelCrud",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "CRUD operations route registering class."
      },
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/executables/executable_route.js~ExecutableRoute"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/todo_crud/executable_route_model_crud.js~ExecutableRouteModelCrud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/executable_route_model_crud.js~ExecutableRouteModelCrud#constructor",
    "access": "public",
    "description": "Create a route registration executable for CRUD operations",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "ExecutableRoute"
      },
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "process_route",
    "memberof": "js/services/todo_crud/executable_route_model_crud.js~ExecutableRouteModelCrud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/todo_crud/executable_route_model_crud.js~ExecutableRouteModelCrud#process_route",
    "access": "public",
    "description": "Process a route registering.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} promise with a boolean resolved value (true:success, false: failure)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_server",
        "description": "Server instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_application",
        "description": "Application instance."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_cfg_route",
        "description": "plain object route configuration."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_data",
        "description": "plain object contextual datas."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "promise with a boolean resolved value (true:success, false: failure)."
    },
    "override": true
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "js/services/topology/topology_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// COMMON IMPORTS\r\nimport T               from 'devapt-core-common/dist/js/utils/types'\r\nimport ServiceProvider from 'devapt-core-common/dist/js/services/service_provider'\r\nimport ServiceResponse from 'devapt-core-common/dist/js/services/service_response'\r\n\r\n// SERVICES IMPORTS\r\n\r\n\r\n/**\r\n * Contextual constant for this file logs.\r\n * @private\r\n */\r\nconst context = 'services/topology/topology_svc_provider'\r\n\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANTS_NAMES ='devapt-deployed-tenants-names'\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANTS_INFOS ='devapt-deployed-tenants-infos'\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_INFOS = 'devapt-deployed-tenant-infos'\r\n\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_APPLICATIONS_NAMES = 'devapt-deployed-applications-names'\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_APPLICATIONS_INFOS = 'devapt-deployed-applications-infos'\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_APPLICATION_INFOS = 'devapt-deployed-application-infos'\r\n\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_SERVICES_NAMES = 'devapt-deployed-services-names'\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_SERVICES_INFOS = 'devapt-deployed-services-infos'\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_TENANT_SERVICE_INFOS = 'devapt-deployed-service-infos'\r\n\r\n/**\r\n * Operation name.\r\n * @private\r\n */\r\nconst GET_NODES_NAMES = 'devapt-deployed-nodes'\r\n\r\n\r\n\r\n/**\r\n * Topology service provider class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class TopologySvcProvider extends ServiceProvider\r\n{\r\n\t/**\r\n\t * Create a topology service provider.\r\n\t * \r\n\t * @param {string} arg_provider_name - consumer name.\r\n\t * @param {Service} arg_service_instance - service instance.\r\n\t * @param {string} arg_context - logging context label.\r\n\t * \r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context=context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context)\r\n\r\n\t\t/**\r\n\t\t * Class test flag.\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.is_topology_svc_provider = true\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get provider operations names.\r\n\t * \r\n\t * @returns {array} - operations names.\r\n\t */\r\n\tget_operations_names()\r\n\t{\r\n\t\treturn [\r\n\t\t\tGET_TENANTS_NAMES, GET_TENANTS_INFOS, GET_TENANT_INFOS,\r\n\t\t\tGET_TENANT_APPLICATIONS_NAMES, GET_TENANT_APPLICATIONS_INFOS, GET_TENANT_APPLICATION_INFOS,\r\n\t\t\tGET_TENANT_SERVICES_NAMES, GET_TENANT_SERVICES_INFOS, GET_TENANT_SERVICE_INFOS,\r\n\t\t\tGET_NODES_NAMES\r\n\t\t]\r\n\t\t//.concat(super.get_operations_names())\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Produce service datas on request.\r\n\t * \r\n\t * @param {ServiceRequest} arg_request - service request instance.\r\n\t * \r\n\t * @returns {Promise} - promise of ServiceResponse instance.\r\n\t */\r\n\tproduce(arg_request)\r\n\t{\r\n\t\tthis.enter_group('produce')\r\n\r\n\t\tif ( ! T.isObject(arg_request) || ! arg_request.is_service_request)\r\n\t\t{\r\n\t\t\tthis.leave_group('produce:error:bad request object')\r\n\t\t\treturn Promise.resolve({error:'bad request object'})\r\n\t\t}\r\n\r\n\t\tconst operation = arg_request.get_operation()\r\n\t\tconsole.log(context + ':produce:request for service=' + this.service.get_name() + ':operation=' + operation, 'operands=', arg_request.get_operands())\r\n\r\n\t\tconst deployed_topology = this.get_runtime().get_deployed_topology()\r\n\t\tconst operand_0 = arg_request.get_operand(0)\r\n\t\tconst operand_1 = arg_request.get_operand(1)\r\n\t\tconst tenant_name = T.isNotEmptyString(operand_0) ? operand_0 : undefined\r\n\t\tconst item_name = T.isNotEmptyString(operand_1) ? operand_1 : undefined\r\n\r\n\t\tconsole.log(context + ':produce:request for service=[%s] operation=[%s] tenant=[%s] item=[%s]', this.service.get_name(), operation, tenant_name, item_name)\r\n\t\tconst response = new ServiceResponse(arg_request)\r\n\t\tlet results = []\r\n\t\tswitch(operation){\r\n\t\t\tcase GET_TENANTS_NAMES:\r\n\t\t\t\tresults = deployed_topology.get_deployed_tenants_names()\r\n\t\t\t\tbreak\r\n\t\t\tcase GET_TENANTS_INFOS:\r\n\t\t\t\tresults = deployed_topology.get_deployed_tenants_infos(true)\r\n\t\t\t\tbreak\r\n\t\t\tcase GET_TENANT_INFOS:\r\n\t\t\t\tresults = tenant_name ? deployed_topology.get_deployed_tenant_infos(tenant_name, true) : []\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tcase GET_TENANT_APPLICATIONS_NAMES:\r\n\t\t\t\tresults = tenant_name ? deployed_topology.get_deployed_tenant_applications_names(tenant_name) : []\r\n\t\t\t\tbreak\r\n\t\t\tcase GET_TENANT_APPLICATIONS_INFOS:\r\n\t\t\t\tresults = tenant_name ? deployed_topology.get_deployed_tenant_applications_infos(tenant_name, true) : []\r\n\t\t\t\tbreak\r\n\t\t\tcase GET_TENANT_APPLICATION_INFOS:\r\n\t\t\t\tresults = tenant_name && item_name ? deployed_topology.get_deployed_tenant_application_infos(tenant_name, item_name, true) : []\r\n\t\t\t\tbreak\r\n\t\t\t\r\n\t\t\tcase GET_TENANT_SERVICES_NAMES:\r\n\t\t\t\tresults = tenant_name ? deployed_topology.get_deployed_tenant_services_names(tenant_name) : []\r\n\t\t\t\tbreak\r\n\t\t\tcase GET_TENANT_SERVICES_INFOS:\r\n\t\t\t\tresults = tenant_name ? deployed_topology.get_deployed_tenant_services_infos(tenant_name, true) : []\r\n\t\t\t\tbreak\r\n\t\t\tcase GET_TENANT_SERVICE_INFOS:\r\n\t\t\t\tresults = tenant_name && item_name ? deployed_topology.get_deployed_tenant_service_infos(tenant_name, item_name, true) : []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase GET_NODES_NAMES:\r\n\t\t\t\tresults = deployed_topology.get_deployed_nodes_names()\r\n\t\t\t\tbreak\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tresponse.set_has_error(true)\r\n\t\t\t\tresponse.set_error('produce:error:bad operation [' + operation + ']')\r\n\t\t\t\t\r\n\t\t\t\tthis.leave_group('produce:error:bad operation [' + operation + ']')\r\n\t\t\t\treturn Promise.resolve(response)\r\n\t\t}\r\n\t\tif (! results)\r\n\t\t{\r\n\t\t\tresponse.set_has_error(true)\r\n\t\t\tresponse.set_error('produce:error:operation failure [' + operation + '], check tenant_name=' + tenant_name + ' or item name=' + item_name)\r\n\r\n\t\t\tthis.leave_group('produce:error:operation failure [' + operation + '], check tenant_name=' + tenant_name + ' or item name=' + item_name)\r\n\t\t\treturn Promise.resolve(response)\r\n\r\n\t\t\t// this.leave_group('produce:super.')\r\n\t\t\t// return super.produce(arg_request)\r\n\t\t}\r\n\t\tresponse.set_results(results)\r\n\r\n\t\t// console.log(context + ':produce:reply for service=' + this.service.get_name() + ':operation=' + operation, response.get_properties_values())\r\n\t\t\r\n\t\tthis.leave_group('produce')\r\n\t\treturn Promise.resolve(response)\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Get deployed nodes.\r\n\t * \r\n\t * @returns {array}\r\n\t */\r\n\tget_deployed_nodes_topology()\r\n\t{\r\n\t\tlet topology = { nodes:{} }\r\n\r\n\t\t// LOOP ON DEFINED NODES\r\n\t\tconst nodes = this.get_runtime().get_defined_topology().nodes().get_latest_items()\r\n\t\tassert( T.isArray(nodes), context + ':get_deployed_nodes_topology:bad runtime.nodes array')\r\n\t\tnodes.forEach(\r\n\t\t\t(node) => {\r\n\t\t\t\ttopology.nodes[node.get_name()] = this.get_deployed_node_topology(node)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\treturn topology.nodes\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get deployed topology for a node.\r\n\t * \r\n\t * @param {TopologyDeployedNode} arg_deployed_node - deployed node.\r\n\t * \r\n\t * @returns {object} - deployed node topology plain object.\r\n\t */\r\n\tget_deployed_node_topology(arg_deployed_node)\r\n\t{\r\n\t\tconst node_topology = {\r\n\t\t\tname:arg_deployed_node.get_name(),\r\n\t\t\tservers:{}\r\n\t\t}\r\n\r\n\t\t// LOOP ON NODE SERVERS\r\n\t\tconst node_servers = arg_deployed_node.servers().get_latest_items()\r\n\t\tassert( T.isArray(node_servers), context + ':get_deployed_node_topology:bad node.servers array')\r\n\t\tnode_servers.forEach(\r\n\t\t\t(server) => {\r\n\t\t\t\tnode_topology.servers[server.get_name()] = this.get_deployed_server(server)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t\treturn node_topology\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get deployed topology for a server.\r\n\t * \r\n\t * @param {TopologyDeployedServer} arg_deployed_server - deployed server.\r\n\t * \r\n\t * @returns {object} - deployed server topology plain object.\r\n\t */\r\n\tget_deployed_server_topology(arg_deployed_server)\r\n\t{\r\n\t\tconst server_topology = {\r\n\t\t\thost:arg_deployed_server.server_host,\r\n\t\t\tport:arg_deployed_server.server_port,\r\n\t\t\tprotocole:arg_deployed_server.server_protocole,\r\n\t\t\ttype:arg_deployed_server.server_type,\r\n\t\t\tmiddlewares:arg_deployed_server.server_middlewares,\r\n\t\t\tuse_socketio:arg_deployed_server.server_use_socketio\r\n\t\t}\r\n\t\t\r\n\t\treturn server_topology\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get deployed tenants topology.\r\n\t * \r\n\t * @returns {object} - deployed tenants topology plain object.\r\n\t */\r\n\tget_deployed_tenants_topology()\r\n\t{\r\n\t\tconst tenants_topology = {\r\n\t\t}\r\n\t\t\r\n\t\treturn tenants_topology\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get deployed tenants topology.\r\n\t * \r\n\t * @returns {object} - deployed tenant topology plain object.\r\n\t */\r\n\tget_deployed_tenant_topology(arg_tenant_name)\r\n\t{\r\n\t\tconst tenant_topology = {\r\n\t\t}\r\n\t\t\r\n\t\treturn tenant_topology\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Get deployed tenants topology.\r\n\t * \r\n\t * @returns {object} - deployed tenant topology plain object.\r\n\t */\r\n\tget_deployed_application_topology(arg_tenant_name)\r\n\t{\r\n\t\tconst tenant_topology = {\r\n\t\t}\r\n\t\t\r\n\t\treturn tenant_topology\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/topology/topology_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~context",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Contextual constant for this file logs.",
    "lineNumber": 16,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "GET_TENANTS_NAMES",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANTS_NAMES",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 22,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "GET_TENANTS_INFOS",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANTS_INFOS",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 27,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "GET_TENANT_INFOS",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_INFOS",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 32,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "GET_TENANT_APPLICATIONS_NAMES",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_APPLICATIONS_NAMES",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 38,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "GET_TENANT_APPLICATIONS_INFOS",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_APPLICATIONS_INFOS",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 43,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "GET_TENANT_APPLICATION_INFOS",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_APPLICATION_INFOS",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 48,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "GET_TENANT_SERVICES_NAMES",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_SERVICES_NAMES",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 54,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "GET_TENANT_SERVICES_INFOS",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_SERVICES_INFOS",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 59,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "GET_TENANT_SERVICE_INFOS",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_TENANT_SERVICE_INFOS",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 64,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "GET_NODES_NAMES",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~GET_NODES_NAMES",
    "access": "private",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": null,
    "description": "Operation name.",
    "lineNumber": 70,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "TopologySvcProvider",
    "memberof": "js/services/topology/topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/topology/topology_svc_provider.js",
    "importStyle": "TopologySvcProvider",
    "description": "Topology service provider class.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "devapt-core-common/dist/js/services/service_provider~ServiceProvider"
    ]
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#constructor",
    "access": "public",
    "description": "Create a topology service provider.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name."
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "is_topology_svc_provider",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#is_topology_svc_provider",
    "access": "public",
    "description": "Class test flag.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "get_operations_names",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_operations_names",
    "access": "public",
    "description": "Get provider operations names.",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} - operations names."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "operations names."
    },
    "params": []
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "produce",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#produce",
    "access": "public",
    "description": "Produce service datas on request.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - promise of ServiceResponse instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ServiceRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_request",
        "description": "service request instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "promise of ServiceResponse instance."
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "get_deployed_nodes_topology",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_deployed_nodes_topology",
    "access": "public",
    "description": "Get deployed nodes.",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "get_deployed_node_topology",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_deployed_node_topology",
    "access": "public",
    "description": "Get deployed topology for a node.",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - deployed node topology plain object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TopologyDeployedNode"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_deployed_node",
        "description": "deployed node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "deployed node topology plain object."
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "get_deployed_server_topology",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_deployed_server_topology",
    "access": "public",
    "description": "Get deployed topology for a server.",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - deployed server topology plain object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TopologyDeployedServer"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_deployed_server",
        "description": "deployed server."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "deployed server topology plain object."
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "get_deployed_tenants_topology",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_deployed_tenants_topology",
    "access": "public",
    "description": "Get deployed tenants topology.",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - deployed tenants topology plain object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "deployed tenants topology plain object."
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "get_deployed_tenant_topology",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_deployed_tenant_topology",
    "access": "public",
    "description": "Get deployed tenants topology.",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - deployed tenant topology plain object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "deployed tenant topology plain object."
    },
    "params": [
      {
        "name": "arg_tenant_name",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "get_deployed_application_topology",
    "memberof": "js/services/topology/topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/topology_svc_provider.js~TopologySvcProvider#get_deployed_application_topology",
    "access": "public",
    "description": "Get deployed tenants topology.",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - deployed tenant topology plain object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "deployed tenant topology plain object."
    },
    "params": [
      {
        "name": "arg_tenant_name",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "js/services/topology/unused_topology_service.js",
    "content": "// SERVER IMPORTS\r\nimport BaseService from '../base/base_service'\r\nimport TopologySvcProvider from './topology_svc_provider'\r\nimport TopologySvcConsumer from './topology_svc_consumer'\r\n\r\n\r\nlet context = 'server/services/topology/topology_service'\r\n\r\n\r\n\r\n/**\r\n * Service class for topology datas.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class TopologyService extends BaseService\r\n{\r\n\t/**\r\n\t * Create a service.\r\n\t * @param {string} arg_svc_name - service name\r\n\t * @param {object} arg_service_settings - service settings\r\n\t * @param {string} arg_context - logging context label\r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_svc_name, arg_service_settings, arg_context)\r\n\t{\r\n\t\tsuper(arg_svc_name, arg_service_settings, arg_context ? arg_context : context)\r\n\t\t\r\n\t\tthis.is_topology_service = true\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a service provider.\r\n\t * @param {string} arg_name - provider name\r\n\t * @param {Service} arg_service - service instance\r\n\t * @returns {ServiceProvider} - service provider instance\r\n\t */\r\n\tcreate_provider(arg_name, arg_service)\r\n\t{\r\n\t\t// TODO: why not this in place of arg_service\r\n\t\treturn new TopologySvcProvider(arg_name, arg_service)\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a service consumer.\r\n\t * @returns {ServiceConsumer} - service consumer instance\r\n\t */\r\n\tcreate_consumer()\r\n\t{\r\n\t\treturn new TopologySvcConsumer(this.get_name() + '_consumer_' + this.get_id(), this)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/topology/unused_topology_service.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/topology/unused_topology_service.js",
    "static": true,
    "longname": "js/services/topology/unused_topology_service.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/unused_topology_service.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "class",
    "name": "TopologyService",
    "memberof": "js/services/topology/unused_topology_service.js",
    "static": true,
    "longname": "js/services/topology/unused_topology_service.js~TopologyService",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/topology/unused_topology_service.js",
    "importStyle": "TopologyService",
    "description": "Service class for topology datas.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/base_service.js~BaseService"
    ]
  },
  {
    "__docId__": 245,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/topology/unused_topology_service.js~TopologyService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_service.js~TopologyService#constructor",
    "access": "public",
    "description": "Create a service.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_svc_name",
        "description": "service name"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_settings",
        "description": "service settings"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "is_topology_service",
    "memberof": "js/services/topology/unused_topology_service.js~TopologyService",
    "static": false,
    "longname": "js/services/topology/unused_topology_service.js~TopologyService#is_topology_service",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "create_provider",
    "memberof": "js/services/topology/unused_topology_service.js~TopologyService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_service.js~TopologyService#create_provider",
    "access": "public",
    "description": "Create a service provider.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ServiceProvider} - service provider instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_name",
        "description": "provider name"
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service",
        "description": "service instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ServiceProvider"
      ],
      "spread": false,
      "description": "service provider instance"
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "create_consumer",
    "memberof": "js/services/topology/unused_topology_service.js~TopologyService",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_service.js~TopologyService#create_consumer",
    "access": "public",
    "description": "Create a service consumer.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ServiceConsumer} - service consumer instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ServiceConsumer"
      ],
      "spread": false,
      "description": "service consumer instance"
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "js/services/topology/unused_topology_svc_consumer.js",
    "content": "// NPM IMPORTS\r\nimport assert from 'assert'\r\n\r\n// SERVER IMPORTS\r\nimport ServiceConsumer from '../base/service_consumer'\r\n\r\n\r\nlet context = 'server/services/topology/topology_svc_consumer'\r\n\r\n\r\n\r\n/**\r\n * Service consumer class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class TopologySvcHostConsumer extends ServiceConsumer\r\n{\r\n\t\r\n\t/**\r\n\t * Create a service consumer.\r\n\t * @param {string} arg_consumer_name - consumer name\r\n\t * @param {Service} arg_service_instance - service instance\r\n\t * @param {string} arg_context - logging context label\r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_consumer_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_consumer_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\tassert( arg_service_instance.is_topology_service, context + ':constructor:bad service instance')\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Enhance operands if needed\r\n\t * @params {array} arg_operands - Variable list of operands\r\n\t * @returns {array} - not used\r\n\t */\r\n\tprepare_args(arg_operands)\r\n\t{\r\n\t\tthis.enter_group('prepare_args')\r\n\t\t\r\n\t\tthis.leave_group('prepare_args')\r\n\t\treturn arg_operands\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Consume a service on the same host.\r\n\t * @param {object} arg_provider - service provider\r\n\t * @return {object} a promise of results\r\n\t */\r\n\tconsume_local(/*arg_provider*/)\r\n\t{\r\n\t\treturn Promise.resolve(undefined)\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Consume a service on a remote host\r\n\t * @param {object} arg_provider - service provider\r\n\t * @param {array} arg_routes - Routes to request\r\n\t * @return {object} a promise of results\r\n\t */\r\n\tconsume_remote(/*arg_provider, arg_routes*/)\r\n\t{\r\n\t\tthis.enter_group('consume_remote')\r\n\t\t\r\n\t\t\r\n\t\tthis.leave_group('consume_remote')\r\n\t\treturn Promise.resolve(undefined)\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/topology/unused_topology_svc_consumer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/topology/unused_topology_svc_consumer.js",
    "static": true,
    "longname": "js/services/topology/unused_topology_svc_consumer.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/unused_topology_svc_consumer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "class",
    "name": "TopologySvcHostConsumer",
    "memberof": "js/services/topology/unused_topology_svc_consumer.js",
    "static": true,
    "longname": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/topology/unused_topology_svc_consumer.js",
    "importStyle": "TopologySvcHostConsumer",
    "description": "Service consumer class.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/service_consumer.js~ServiceConsumer"
    ]
  },
  {
    "__docId__": 252,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer#constructor",
    "access": "public",
    "description": "Create a service consumer.",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_consumer_name",
        "description": "consumer name"
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "prepare_args",
    "memberof": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer#prepare_args",
    "access": "public",
    "description": "Enhance operands if needed",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{array} arg_operands - Variable list of operands"
      },
      {
        "tagName": "@returns",
        "tagValue": "{array} - not used"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "not used"
    },
    "params": [
      {
        "name": "arg_operands",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "consume_local",
    "memberof": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer#consume_local",
    "access": "public",
    "description": "Consume a service on the same host.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider",
        "description": "service provider"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "a promise of results"
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "consume_remote",
    "memberof": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_svc_consumer.js~TopologySvcHostConsumer#consume_remote",
    "access": "public",
    "description": "Consume a service on a remote host",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider",
        "description": "service provider"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_routes",
        "description": "Routes to request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "a promise of results"
    }
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "js/services/topology/unused_topology_svc_provider.js",
    "content": "// NPM IMPORTS\r\nimport T from 'typr'\r\nimport assert from 'assert'\r\n\r\n// SERVER IMPORTS\r\nimport SocketIOServiceProvider from '../base/socketio_service_provider'\r\nimport runtime from '../../base/runtime'\r\n\r\n\r\nlet context = 'server/services/topology/topology_svc_provider'\r\n\r\n\r\n\r\n/**\r\n * Topology service provider class.\r\n * @author Luc BORIES\r\n * @license Apache-2.0\r\n */\r\nexport default class TopologySvcProvider extends SocketIOServiceProvider\r\n{\r\n\t/**\r\n\t * Create a Topology service provider.\r\n\t * @param {string} arg_provider_name - consumer name\r\n\t * @param {Service} arg_service_instance - service instance\r\n\t * @param {string} arg_context - logging context label\r\n\t * @returns {nothing}\r\n\t */\r\n\tconstructor(arg_provider_name, arg_service_instance, arg_context)\r\n\t{\r\n\t\tsuper(arg_provider_name, arg_service_instance, arg_context ? arg_context : context)\r\n\t\t\r\n\t\tassert(this.service.is_topology_service, context + ':bad topology service')\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Process request and returns datas.\r\n\t * Query filter: {\r\n\t * \t mode:'logical' or 'physical'\r\n\t *   root_type:'*' or 'node' or 'server' or 'application'\r\n\t *   root_name:node/server/application name\r\n\t * }\r\n\t * \r\n\t * @param {string} arg_method - method name\r\n\t * @param {array} arg_operands - request operands\r\n\t * @param {Credentials} arg_credentials - request credentials\r\n\t * \r\n\t * @returns {Promise}\r\n\t */\r\n\tprocess(arg_method, arg_operands, arg_credentials)\r\n\t{\r\n\t\tassert( T.isString(arg_method), context + ':process:bad method string')\r\n\t\tassert( T.isArray(arg_operands), context + ':process:bad operands array')\r\n\t\tassert( T.isObject(arg_credentials) && arg_credentials.is_credentials, context + ':process:bad credentials object')\r\n\t\t\r\n\t\t// const metrics_server = runtime.node.metrics_server\r\n\t\t\r\n\t\tswitch(arg_method)\r\n\t\t{\r\n\t\t\tcase 'get': {\r\n\t\t\t\t// GET WITHOUT OPERANDS\r\n\t\t\t\tif ( arg_operands.length == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t// const nodejs_state_values = metrics_server.get_nodejs_metrics_state_values()\r\n\t\t\t\t\t// console.log(nodejs_state_values, context + ':produce:get:no opds:nodejs_state_values')\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject('bad query mode')\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// GET WITH OPERANDS\r\n\t\t\t\tconst query = arg_operands[0]\r\n\t\t\t\tif ( ! T.isObject(query) || ! T.isString(query.mode) )\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(query, context + ':produce:query')\r\n\t\t\t\t\treturn Promise.reject(context + ':produce:bad query object')\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// PHYSICAL TOPOLOGY\r\n\t\t\t\tif (query.mode == 'physical')\r\n\t\t\t\t{\r\n\t\t\t\t\tlet topology = { nodes:{} }\r\n\r\n\t\t\t\t\t// LOOP ON DEFINED NODES\r\n\t\t\t\t\tconst nodes = runtime.get_defined_topology().nodes().get_latest_items()\r\n\t\t\t\t\tassert( T.isArray(nodes), context + ':process:bad runtime.nodes array')\r\n\t\t\t\t\tnodes.forEach(\r\n\t\t\t\t\t\t(node) => {\r\n\t\t\t\t\t\t\tlet node_topology = { servers:{} }\r\n\r\n\t\t\t\t\t\t\t// LOOP ON NODE servers\r\n\t\t\t\t\t\t\tconst node_servers = node.servers().get_latest_items()\r\n\t\t\t\t\t\t\tassert( T.isArray(node_servers), context + ':process:bad node.servers array')\r\n\t\t\t\t\t\t\tnode_servers.forEach(\r\n\t\t\t\t\t\t\t\t(server) => {\r\n\t\t\t\t\t\t\t\t\tnode_topology.servers[server.get_name()] = {\r\n\t\t\t\t\t\t\t\t\t\thost:server.server_host,\r\n\t\t\t\t\t\t\t\t\t\tport:server.server_port,\r\n\t\t\t\t\t\t\t\t\t\tprotocole:server.server_protocole,\r\n\t\t\t\t\t\t\t\t\t\ttype:server.server_type,\r\n\t\t\t\t\t\t\t\t\t\tmiddlewares:server.server_middlewares,\r\n\t\t\t\t\t\t\t\t\t\tuse_socketio:server.server_use_socketio\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\ttopology.nodes[node.get_name()] = node_topology\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.resolve(topology)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// LOGICAL TOPOLOGY\r\n\t\t\t\tif (query.mode == 'logical')\r\n\t\t\t\t{\r\n\t\t\t\t\tlet topology = { applications:{} }\r\n\t\t\t\t\t\r\n\t\t\t\t\t// LOOP ON TENANTS\r\n\t\t\t\t\tconst defined_tenants = runtime.get_defined_topology().tenants().get_latest_items().get_latest_items()\r\n\t\t\t\t\tdefined_tenants.forEach(\r\n\t\t\t\t\t\t(defined_tenant)=>{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// LOOP ON TENANT APPLICATIONS\r\n\t\t\t\t\t\t\tconst applications = defined_tenant.applications().get_latest_items()\r\n\t\t\t\t\t\t\tapplications.forEach(\r\n\t\t\t\t\t\t\t\t(defined_app) => {\r\n\r\n\t\t\t\t\t\t\t\t\tlet app_topology = { provided_services:{}, consumed_services:{} }\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// LOOP ON APPLICATION PROVIDED SERVICES\r\n\t\t\t\t\t\t\t\t\tconst app_provided_services = defined_app.provided_services().get_latest_items()\r\n\t\t\t\t\t\t\t\t\tapp_provided_services.forEach(\r\n\t\t\t\t\t\t\t\t\t\t(svc) => {\r\n\t\t\t\t\t\t\t\t\t\t\tapp_topology.provided_services[svc.get_name()] = {}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tapp.consumed_services.forEach(\r\n\t\t\t\t\t\t\t\t\t\t(svc) => {\r\n\t\t\t\t\t\t\t\t\t\t\tapp_topology.consumed_services[svc.get_name()] = {}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\ttopology.applications[app.get_name()] = app_topology\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.resolve(topology)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// LOGICAL TOPOLOGY\r\n\t\t\t\tif (query.mode == 'registry')\r\n\t\t\t\t{\r\n\t\t\t\t\tconst json = runtime.get_registry().get_state()\r\n\t\t\t\t\tdelete json.security\r\n\t\t\t\t\treturn Promise.resolve(json)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// LOGICAL TOPOLOGY\r\n\t\t\t\tif (query.mode == 'runtime')\r\n\t\t\t\t{\r\n\t\t\t\t\tconst json = runtime.get_defined_topology().get_topology_info(true)\r\n\t\t\t\t\t// console.log(context + ':produce:get:runtime:json=', json)\r\n\t\t\t\t\treturn Promise.resolve(json)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(context + ':produce:bad query mode')\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/lbories/Documents/PERSONNEL/MYPROJECTS/GitHub/devapt-core-services/src/js/services/topology/unused_topology_svc_provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "context",
    "memberof": "js/services/topology/unused_topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/unused_topology_svc_provider.js~context",
    "access": "public",
    "export": false,
    "importPath": "devapt-core-services/js/services/topology/unused_topology_svc_provider.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "TopologySvcProvider",
    "memberof": "js/services/topology/unused_topology_svc_provider.js",
    "static": true,
    "longname": "js/services/topology/unused_topology_svc_provider.js~TopologySvcProvider",
    "access": "public",
    "export": true,
    "importPath": "devapt-core-services/js/services/topology/unused_topology_svc_provider.js",
    "importStyle": "TopologySvcProvider",
    "description": "Topology service provider class.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Luc BORIES"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      }
    ],
    "interface": false,
    "extends": [
      "js/services/base/socketio_service_provider.js~SocketIOServiceProvider"
    ]
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/services/topology/unused_topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_svc_provider.js~TopologySvcProvider#constructor",
    "access": "public",
    "description": "Create a Topology service provider.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{nothing}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_provider_name",
        "description": "consumer name"
      },
      {
        "nullable": null,
        "types": [
          "Service"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_service_instance",
        "description": "service instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_context",
        "description": "logging context label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "nothing"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "process",
    "memberof": "js/services/topology/unused_topology_svc_provider.js~TopologySvcProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/services/topology/unused_topology_svc_provider.js~TopologySvcProvider#process",
    "access": "public",
    "description": "Process request and returns datas.\nQuery filter: {\n\t mode:'logical' or 'physical'\n  root_type:'*' or 'node' or 'server' or 'application'\n  root_name:node/server/application name\n}",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_method",
        "description": "method name"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_operands",
        "description": "request operands"
      },
      {
        "nullable": null,
        "types": [
          "Credentials"
        ],
        "spread": false,
        "optional": false,
        "name": "arg_credentials",
        "description": "request credentials"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# Devapt core documentation builder\r\n\r\n## Build\r\n\r\n```\r\ncd devapt-core-doc\r\nnpm install --production\r\nnpm run build_common\r\nnpm run build_server\r\nnpm run build_services\r\nnpm run build_browser\r\n```\r\n\r\n\r\n## Source files\r\n * docs\r\n   * manual\r\n     * features\r\n     * tutorials\r\n\r\n\r\n\r\n## Old build with jsdoc dependencies\r\n```\r\n{\r\n    \"del\": \">=2.2.0\",\r\n    \"gulp\": \"github:gulpjs/gulp#4.0\",\r\n    \"gulp-load-plugins\": \">=1.2.0\",\r\n    \"parallelshell\": \"^2.0.0\"\r\n}\r\n```",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"devapt-core-services\",\r\n  \"version\": \"2.0.3\",\r\n  \"description\": \"Developpers Application Toolkit - application standard services (ping, messaging, resources...)\",\r\n  \"author\": {\r\n    \"name\": \"Luc BORIES\",\r\n    \"email\": \"luc.bories@gmail.com\",\r\n    \"url\": \"https://github.com/lucbories\"\r\n  },\r\n  \"contributors\": [],\r\n  \"license\": \"Apache-2.0\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/lucbories/devapt-core-services.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"git+https://github.com/lucbories/devapt-core-services/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/lucbories/devapt-core-services#readme.md\",\r\n  \"main\": \"dist/index.js\",\r\n  \"engines\": {\r\n    \"node\": \">=4.4.4\"\r\n  },\r\n  \"directories\": {\r\n    \"dist\": \"./dist\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"gulp\",\r\n    \"test\": \"mocha --recursive --reporter spec --compilers js:babel-register src/js/test\"\r\n  },\r\n  \"browser\": [\r\n  ],\r\n  \"keywords\": [\r\n    \"server\",\r\n    \"api\",\r\n    \"rest\",\r\n    \"devapt\",\r\n    \"toolkit\",\r\n    \"redux\",\r\n    \"reactive\",\r\n    \"declarative\",\r\n    \"distributed\",\r\n    \"responsive\",\r\n    \"services\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"devapt-core-common\": \">=2.0.0\",\r\n    \"epilogue\": \">=0.5.2\",\r\n    \"lodash\": \">=4.16.4\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"babel\": \">=6.5.2\",\r\n    \"babel-cli\": \">=6.6.4\",\r\n    \"babel-loader\": \">=6.2.4\",\r\n    \"babel-plugin-transform-es2015-modules-commonjs\": \"^6.18.0\",\r\n    \"babel-plugin-transform-runtime\": \">=6.6.0\",\r\n    \"babel-polyfill\": \">=6.7.4\",\r\n    \"babel-preset-es2015\": \">=6.6.0\",\r\n    \"babel-preset-stage-0\": \">=6.5.0\",\r\n    \"babel-register\": \">=6.14.0\",\r\n    \"babelify\": \">=7.2.0\",\r\n    \"chai\": \">=3.3.0\",\r\n    \"chai-as-promised\": \">=5.3.0\",\r\n    \"chai-immutable\": \">=1.3.0\",\r\n    \"del\": \">=2.2.0\",\r\n    \"gulp\": \"github:gulpjs/gulp#4.0\",\r\n    \"gulp-babel\": \">=6.1.1\",\r\n    \"gulp-cached\": \">=1.1.0\",\r\n    \"gulp-changed\": \">=1.3.0\",\r\n    \"gulp-concat\": \">=2.6.0\",\r\n    \"gulp-load-plugins\": \">=1.2.0\",\r\n    \"gulp-remember\": \">=0.3.0\",\r\n    \"gulp-rename\": \">=1.2.2\",\r\n    \"gulp-sourcemaps\": \">=1.6.0\",\r\n    \"gulp-util\": \"^3.0.7\",\r\n    \"mocha\": \">=2.4.5\",\r\n    \"requirejs\": \">=2.1.20\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\node_modules\\devapt-core-services\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Welcome on Devapt project documentation (v2 or more)\r\n\r\nWith Devapt you can easily develop powerfull application.\r\n\r\nDevapt libraries are usefull to quickly develop applications with more JSON configuration and less code.\r\n\r\n\r\n## What is Devapt ?\r\n\r\nThe Developpers Application Toolkit (Devapt) is a usefull package for developers:\r\ncreate quickly and securely a complex distributed set of applications or a simple alone application into one or more nodejs.\r\n\r\nThis project is based on Javascript (ECMAscript 6 transpiled in ES5) and nodejs.\r\nDevapt contains a server runtime and a set of client features.\r\nDevapt help you to write less code and to use easily more features.\r\n\r\nThe principle is simple: you write some configuration files for distributed nodes, models, views and menus and the you start the application.\r\nThe framework will automatically generates the server and manages common features (logges, traces, metrics, restful, security...).\r\nSimply launch index.html and your application is up a rich user interface and many features.\r\n\r\nBuilt-in features cover many important subjects as: authentication, restfull, http server, distributed services, logs, metrics...\r\nMain characteristics of DEVAPT architecture is dynamic behaviors, reactive programming, object oriented ES6 javascript, gulp build chain\r\nAll of this on NodeJS.\r\n\r\n\r\n## Where to find Devapt ?\r\n\r\nDevapt is a set of core libraries to help producing applications:\r\n* [devapt-core-common project](https://github.com/lucbories/devapt-core-common)\r\n* [devapt-core-server project](https://github.com/lucbories/devapt-core-server)\r\n* [devapt-core-services project](https://github.com/lucbories/devapt-core-services)\r\n* [devapt-core-browser project](https://github.com/lucbories/devapt-core-browser)\r\n\r\nProjects API:\r\n* [devapt-core-common documentation](https://lucbories.github.io/api_common/index.html)\r\n* [devapt-core-server documentation](https://lucbories.github.io/api_server/index.html)\r\n* [devapt-core-services documentation](https://lucbories.github.io/api_services/index.html)\r\n* [devapt-core-browser documentation](https://lucbories.github.io/api_browser/index.html)\r\n\r\n\r\nOthers libraries provides usefull features.\r\n\r\n[GitHub project](https://github.com/lucbories/devapt-core-common)\r\n\r\n[NPM package](https://www.npmjs.com/package/devapt-core-common)\r\n\r\n[API](https://lucbories.github.io)\r\n\r\n[MANUAL](https://lucbories.github.io)\r\n\r\n\r\n## What does Devapt offer for developpers ?\r\n\r\nDevapt library offers a \"runtime\" instance which delivers this features:\r\n\r\n * browser or server rendering (Render instance)\r\n * rendering base class for custom widgets or views (Component class)\r\n * Redux store on client side\r\n * distributed servers\r\n * master configuration settings (distributed on each nodes)\r\n * loggers engines and traces configuration (for instances, classes, modules)\r\n * datas abstraction\r\n * reactive programming (thanks BaconJS)\r\n * documentation (wotrk in progress)\r\n\r\n\r\n## How does Devapt work ?\r\n\r\nWith Devapt you define:\r\n\r\n * A topology, simple (one application, one server, one service) or complex (many services distributed for many applications on many distributed servers).\r\n * Some resources (models, views, menubars, menus)\r\n * Security rules\r\n\r\nA topology contains:\r\n\r\n * nodes: A node is a nodejs process with an unique name. You can have many nodes on the same machine.\r\nEach node communicates with other node through messaging buses (messages, metrics, logs).\r\n\r\n<img src=\"./manual/asset/Buses.png\" width=\"80%\" alt=\"Messaging picture\" />\r\n\r\n\r\nA node can have one or many servers.\r\n\r\n * servers: A server provides one or more services and listen client connections through a couple (host, port).\r\n\r\nA server has a unique name and can be one of types: restify, express, socket.io (coming soon)...\r\n\r\n * services: A service offers one feature to clients. A service can be one of: static assets providers, generic middleware provider, RESTfull provider, resources provider...\r\n * applications: An application contains some services and is provided through nodes and servers.\r\n\r\nAn application can have one service on one server on one node.\r\nOr many services on many servers on many nodes.\r\n\r\nAn application contains:\r\n\r\n * modules: functional features for applications (a set of preconfigured UI for example).\r\n * plugins: technical fearures for applications (a rendering provider for example).\r\n * security: defines authentication and authorization rules.\r\n\r\n<img src=\"./manual/asset/Host.png\" width=\"80%\" alt=\"Distributed picture\" />\r\n\r\n\r\nThe rendering engines are plugins and rendering classes are stateless: state is stored in a Redux store.\r\nSee [Getting Started with Redux](https://egghead.io/series/getting-started-with-redux) for flow concepts.\r\n\r\n\r\n\r\n## Devapt is a smart glue between many powerfull projects\r\nThanks for all projects leaders and contributers.\r\n\r\nThe given list is an extract of all used or inspired projects.\r\n\r\n\r\nMain dependancies:\r\n\r\n[NodeJS: https://nodejs.org](https://nodejs.org)\r\n\r\n\r\nServers and datas access:\r\n\r\n * [Express: http://expressjs.com/](http://expressjs.com/)\r\n * [Restify: http://restify.com/](http://restify.com/)\r\n * [Epilogue: https://github.com/dchester/epilogue](https://github.com/dchester/epilogue)\r\n * [Sequelize: http://sequelizejs.com](http://sequelizejs.com)\r\n * [Socket.io: http://socket.io/](http://socket.io/)\r\n\r\n\r\nSecurity:\r\n\r\n * [Passport: http://passportjs.org](http://passportjs.org)\r\n * [Node ACL: https://github.com/OptimalBits/node_acl](https://github.com/OptimalBits/node_acl)\r\n\r\n\r\nFoundations:\r\n\r\n * [BaconJS: https://baconjs.github.io/](https://baconjs.github.io/)\r\n * [SimpleBus: https://github.com/ajlopez/SimpleBus](https://github.com/ajlopez/SimpleBus)\r\n * [jQuery: https://jquery.com](https://jquery.com)\r\n * [Immutable: https://facebook.gith)ub.io/immutable-js/docs/#/](https://facebook.github.io/immutable-js/docs/#/)\r\n * [Redux: http://redux.js.org/docs/introduction/Motivation.html](http://redux.js.org/docs/introduction/Motivation.html)\r\n * [Moment: http://momentjs.com/](http://momentjs.com/)\r\n * [Vantage: https://github.com/dthree/vantage](https://github.com/dthree/vantage)\r\n * [Bunyan: https://github.com/trentm/node-bunyan](https://github.com/trentm/node-bunyan)\r\n * [Winston: https://github.com/winstonjs/winston](https://github.com/winstonjs/winston)\r\n * [Circuit breaker: https://www.npmjs.com/package/circuit-breaker](https://www.npmjs.com/package/circuit-breaker) [or https://github.com/yammer/circuit-breaker-js](https://github.com/yammer/circuit-breaker-js)\r\n * [LowDb: https://github.com/typicode/lowdb](https://github.com/typicode/lowdb)\r\n\r\n\r\nRendering:\r\n\r\n * [Foundation by ZURB: http://foundation.zurb.com/sites.html](http://foundation.zurb.com/sites.html)\r\n * [Mustache: https://github.com/janl/mustache.js](https://github.com/janl/mustache.js)\r\n * [React (coming soon): http://facebook.github.io/react/docs/tutorial.html](http://facebook.github.io/react/docs/tutorial.html)\r\n\r\n\r\n\r\nDev and build dependancies: (coming soon.)\r\n\r\n * [Babel: https://babeljs.io](https://babeljs.io)\r\n * [Chai: http://chaijs.com/](http://chaijs.com/)\r\n * [Gulp: http://gulpjs.com/](http://gulpjs.com/)\r\n * [Mocha: https://mochajs.org/](https://mochajs.org/)\r\n * [JSDoc: http://usejsdoc.org/](http://usejsdoc.org/)\r\n\r\n\r\n\r\n\r\n## Version\r\n\r\nCurrent active version is 2.x.x\r\n\r\nVersionning use standard method: M.m.p with M is a major change, m a minor change, p a patch.\r\n\r\n\r\n\r\n## License\r\n\r\nCopyright Luc BORIES 2015-2016\r\n\r\nApache Version 2 license.\r\n\r\nSee [LICENSE on GitHub](https://github.com/lucbories/devapt-core-common/blob/master/LICENSE)\r\n\r\n\r\n\r\nPlease enjoy using devapt projects and let me know if they are usefull for you.\r\n\r\n[Next](https://lucbories.github.io)",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\index.md",
    "name": "./docs/manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\assets",
    "name": "./docs/assets",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\overview.md",
    "name": "./docs/manual/overview.md",
    "content": "\r\n# Overview\r\n\r\nWith DEVAPT you can easily develop powerfull application.\r\nBuilt-in features cover many important subjects as: authentication, restfull, http server, distributed services, logs, metrics...\r\nMain characteristics of DEVAPT architecture is dynamic behaviors, reactive programming, object oriented ES6 javascript, gulp build chain\r\nAll of this on NodeJS.\r\n\r\n\r\n\r\n\r\n## Projects structure\r\nAll devapt-* github repositories have the same structure: a master branch with the last tagged tree, a develop branch with latest comited updates and tags.\r\n\r\nAll devapt-* projects have a common folders tree:\r\nproject root\\\r\n * bower_components (only for browser features)\r\n * build: building scripts\r\n * dist: build codes and resources\r\n  * dist/js: build javascript codes\r\n  * dist/resources: build resources configuration\r\n * node_modules: nodes packages\r\n * public: shared assets for browsers\r\n  * public/app_name/css: CSS assets\r\n  * public/app_name/html: HTML assets\r\n  * public/app_name/img: images assets\r\n  * public/app_name/js: javascript assets\r\n * public/favico.png: browser project icon\r\n * src: project sources\r\n  * src/js: javascript sources\r\n  * src/resources: resources configuration sources\r\n * tmp: temporary application files (logs)\r\n * bower.json: browser packages configuration\r\n * gulpfile.js: main build script\r\n * LICENSE: project license\r\n * package.json: nodes packages configuration\r\n * README.md: project description\r\n\r\nSome differences appears between library and application folder.\r\n\r\nVersionning use standard method: M.m.p with M is a major change, m a minor change, p a patch.\r\n\r\n\r\n\r\n## Development\r\n\r\n```\r\ngit clone git://github.com/lucbories/devapt-core-common.git\r\ncd devapt-core-common\r\nnpm install\r\nnpm test\r\n```\r\nSame commands for devapt-core-browser, devapt-core-server, devapt-core-services\r\n\r\n\r\n\r\n## Contribution\r\n\r\nFeel free to contribute, you're welcome.\r\n\r\nCheck issues and solve it:\r\n* [common file issues](https://github.com/lucbories/devapt-core-common/issues)\r\n* [server file issues](https://github.com/lucbories/devapt-core-server/issues)\r\n* [services file issues](https://github.com/lucbories/devapt-core-services/issues)\r\n* [browser file issues](https://github.com/lucbories/devapt-core-browser/issues)\r\n\r\nSubmit your work:\r\n* [common pull requests](https://github.com/lucbories/devapt-core-common/pulls)\r\n* [server pull requests](https://github.com/lucbories/devapt-core-server/pulls)\r\n* [services pull requests](https://github.com/lucbories/devapt-core-services/pulls)\r\n* [browser pull requests](https://github.com/lucbories/devapt-core-browser/pulls)\r\n\r\nIf you submit a pull request, please be sure to add or update corresponding\r\ntest cases, and ensure that `npm test` continues to pass.\r\n\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\installation.md",
    "name": "./docs/manual/installation.md",
    "content": "\r\n# Installation\r\n\r\n\r\nVia npm on Node:\r\n```\r\ncd my_project/\r\nnpm init\r\nnpm install devapt-core-common --save\r\nnpm install devapt-core-browser --save\r\nnpm install devapt-core-serices --save\r\nnpm install devapt-core-server --save\r\n```\r\n\r\n\r\nTo install and launch TestBus applicaton :\r\n```\r\ncd apps/\r\ngit clone git://github.com/lucbories/devapt-app-testbus.git\r\ncd devapt-app-testbus\r\n\r\nnpm install --save-prod\r\nor yarn install -- production\r\n\r\nnpm run nodeA\r\nor yarn run nodeA\r\n\r\nor\r\nnpm run nodeA\r\nnpm run nodeB\r\n\r\nor\r\nnpm run nodeA\r\nnpm run nodeB\r\nnpm run nodeC\r\n```\r\nopen a browser on http://my_domain:8080/assets/html/index.html\r\n\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\usage.md",
    "name": "./docs/manual/usage.md",
    "content": "# Usage\r\n\r\nTo install a devapt application, follow:\r\n```\r\ncd apps/\r\ngit clone git://github.com/lucbories/devapt-app-testbus.git\r\ncd devapt-app-testbus\r\n\r\nnpm install --save-prod\r\n```\r\n\r\nTo create an empty application from scratch (not recommended for devapt newbies):\r\n\r\n```\r\ncd my_app\r\nnpm init\r\nnpm install devapt-core-common --save\r\nnpm install devapt-core-browser --save\r\nnpm install devapt-core-services --save\r\nnpm install devapt-core-server --save\r\n```\r\n\r\nCreate folders tree:\r\n```\r\n-build\r\n-dist\r\n-public\r\n-public/assets\r\n-public/assets/css\r\n-public/assets/html\r\n-public/assets/img\r\n-public/assets/js\r\n-src/js\r\n-src/resources\r\n-tmp\r\n```\r\n\r\n\r\n\r\nCreate your first Devapt based HTML page in public/assets/html/mypage.html:\r\n```html\r\n<html>\r\n\r\n<head>\r\n\t<meta charSet=\"utf8\"/>\r\n\t<title>Devapt TestBus Home</title>\r\n\t\r\n\t<link rel=\"icon\" type=\"image/png\" href=\"/assets/img/favico.png\"/>\r\n\r\n\t<link type='text/css'  rel=\"stylesheet\" href=\"/assets/css/normalize.css\" media=\"all\" />\r\n\r\n\t<style type='text/css'>\r\n\t\t... your styles\r\n\t</style>\r\n</head>\r\n\r\n\r\n<body>\r\n\r\n<header>\r\n\t<center>\r\n\t\t<h1>MY FIRST APP</h1>\r\n\t\t<h8><a href=\"/assets/html/mypage.html\">Home</a></h8>\r\n\t</center>\r\n</header>\r\n\r\n<hr>\r\n\r\n<script>window.__INITIAL_STATE__ = {\r\n\t\"credentials\":{\r\n\t\t\"tenant\":\"tenantA\",\r\n\t\t\"env\":\"dev\",\r\n\t\t\"application\":\"testbus\",\r\n\r\n\t\t\"token\":\"\",\r\n\t\t\"user_name\":\"\",\r\n\t\t\"user_pass_digest\":\"\",\r\n\t\t\r\n\t\t\"ts_login\":0,\r\n\t\t\"ts_expiration\":0,\r\n\r\n\t\t\"errors_count\":0,\r\n\t\t\"renew_count\":0,\r\n\r\n\t\t\"hash\":undefined\r\n\t},\r\n\t\"commands\":{}\r\n}\r\n</script>\r\n\r\n<div id=\"content\">\r\n... your HTML code\r\n</div>\r\n\r\n<script type=\"text/javascript\" src=\"/socket.io/socket.io.js\"></script>\r\n<script type=\"text/javascript\" src=\"/assets/js/vendor/browser.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"/assets/js/devapt-core-browser.js\"></script>\r\n<script type=\"text/javascript\" src=\"/assets/js/devapt-bootstrap.js\"></script>\r\n<script type=\"text/javascript\" src=\"/assets/js/app.js\"></script>\r\n\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n\r\nNow you can write your Javascript code in public/assets/js/app.js:\r\n```js\r\nwindow.devapt().on_runtime_created(\r\n\tfunction()\r\n\t{\r\n\t\tconsole.log('runtime ready for application script')\r\n\r\n\t\twrite your code here: devapt init is finished and you can use Devapt function:\r\n\t\t\r\n\t\twindow.devapt(): Devapt bootstrap root with some helpers\r\n\t\twindow.devapt().runtime():main Devapt client runtime\r\n\t\twindow.devapt().ui(): main Devapt user interface manager\r\n\r\n\t\tExample: get client session unique id\r\n\t\tvar session_uid = window.devapt().runtime().get_session_uid()\r\n\r\n\t\tExample: ping master node\r\n\t\tvar target_name = 'master' (target is a node or a node part, node is server host or remote host or remote browser session)\r\n\t\tvar ping_svc_cfg = undefined (reserved for later)\r\n\t\tvar ping_svc_promise = window.devapt().get_service('pingpong', ping_svc_cfg)\r\n\t\tvar on_response_callback = function() {\r\n\t\t\tconsole.log('pong received')\r\n\t\t}\r\n\t\twindow.devapt().request_service(ping_svc_promise, 'devapt-ping', target_name, on_response_callback)\r\n\t}\r\n)\r\n```\r\n\r\nDevapt use configuration files to discover and build a runtime of dynamic resources.\r\n\r\nFirst we declare our unique node called \"nodeA\", this node is the topology master and the application provider:\r\nFile: dist/resources/nodes/nodeA.json\r\n```js\r\n{\r\n\t\"is_master\":true,\r\n\t\"name\":\"NodeA\",\r\n\t\r\n\t\"master\":{\r\n\t\t\"name\":\"NodeA\",\r\n\t\t\r\n\t\t\"msg_bus\":{\r\n\t\t\t\"package\":\"socketio\",\r\n\t\t\t\"protocole\":\"ws\",\r\n\t\t\t\"type\":\"Server\",\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"port\":5000\r\n\t\t},\r\n\t\t\"logs_bus\":{\r\n\t\t\t\"package\":\"socketio\",\r\n\t\t\t\"protocole\":\"ws\",\r\n\t\t\t\"type\":\"Server\",\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"port\":5001\r\n\t\t},\r\n\t\t\"metrics_bus\":{\r\n\t\t\t\"package\":\"socketio\",\r\n\t\t\t\"protocole\":\"ws\",\r\n\t\t\t\"type\":\"Server\",\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"port\":5002\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"settings_provider\": {\r\n\t\t\"source\":\"local_file\",\r\n\t\t\"relative_path\":\"world.json\"\r\n\t}\r\n}\r\n```\r\n\r\n\r\nSecondly we describe our application features topology:\r\nFile: dist/resources/world/world.json\r\n```js\r\n{\r\n\t\"nodes\":\"nodes\":{\r\n\t\t\"NodeA\":{\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"is_master\":true,\r\n\t\t\t\"servers\":{\r\n\t\t\t\t\"NodeALocal8080\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":8080,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\"plugins\":[]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"NodeALocalLogs\":{\r\n\t\t\t\t\t\"type\":\"logs\",\r\n\t\t\t\t\t\"port\":\"N/A\",\r\n\t\t\t\t\t\"protocole\":\"bus\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":false,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\"plugins\":[]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"tenants\":{\r\n\t\t\"tenantA\":{\r\n\t\t\t\"applications\":{\r\n\t\t\t\t\"assets\":{\r\n\t\t\t\t\t\"title\":\"Assets provider\",\r\n\t\t\t\t\t\"url\":\"assets\",\r\n\t\t\t\t\t\"license\":\"APACHE-LICENSE-2.0\",\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"provided_services\":[],\r\n\t\t\t\t\t\"used_services\":[],\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"used_packages\": [\"my_app_pkg\"],\r\n\t\t\t\t\t\"used_plugins\":[\"DefaultRendering\"],\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"assets\":{\r\n\t\t\t\t\t\t\"css\":[],\r\n\t\t\t\t\t\t\"js\":[],\r\n\t\t\t\t\t\t\"img\":[],\r\n\t\t\t\t\t\t\"index\":\"\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"packages\":{\r\n\t\t\t\t\"my_app_pkg\":{\r\n\t\t\t\t\t\"base_dir\":null,\r\n\t\t\t\t\t\"resources\":[],\r\n\t\t\t\t\t\"templates\":[],\r\n\t\t\t\t\t\"includes\":[],\r\n\t\t\t\t\t\"commands\":[],\r\n\t\t\t\t\t\"services\":{\r\n\t\t\t\t\t\t\"pingpong\":{\r\n\t\t\t\t\t\t\t\"type\":\"ping_svc\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"html_assets\":{\r\n\t\t\t\t\t\t\t\"type\":\"html_assets_svc\",\r\n\t\t\t\t\t\t\t\"routes\":[\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\"route\":\"/\",\r\n\t\t\t\t\t\t\t\t\t\"directory\":\"../../public/assets/\",\r\n\t\t\t\t\t\t\t\t\t\"required_prefixes\":[],\r\n\t\t\t\t\t\t\t\t\t\"required_suffixes\":[\".js\", \".js.map\", \".css\", \".html\", \".png\", \".jpg\"]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\"security\":{\r\n\t\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\t\"authentication\":{\r\n\t\t\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\t\t\"engines\":[]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\"authorization\":{\r\n\t\t\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\t\t\"engines\":[],\r\n\t\t\t\t\t\t\t\t\t\"permissions\":{\r\n\t\t\t\t\t\t\t\t\t\t\"*\":[\"*\"]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"security\":{}\r\n\t\t}\r\n\t},\r\n\r\n\t\"deployments\":{\r\n\t\t\"tenantA\":{\r\n\t\t\t\"assets\":{\r\n\t\t\t\t\"assets\":{},\r\n\t\t\t\t\"services\":{\r\n\t\t\t\t\t\"topology\":{ \"servers\":[\"NodeALocal8080\"], \"filters\":[\"*\"] },\r\n\t\t\t\t\t\"html_assets\":{ \"servers\":[\"NodeALocal8080\"], \"filters\":[\"*\"] },\r\n\t\t\t\t\t\"pingpong\":{ \"servers\":[\"NodeALocal8080\"], \"filters\":[\"*\"] }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t\"security\":{\r\n\t\t\"is_readonly\":false,\r\n\t\t\r\n\t\t\"datasources\":[],\r\n\t\t\r\n\t\t\"authentication\": {\r\n\t\t\t\"enabled\":false,\r\n\t\t\t\r\n\t\t\t\"plugins\":{},\r\n\t\t\t\r\n\t\t\t\"default_plugins\": []\r\n\t\t},\r\n\t\t\r\n\t\t\"authorization\": {\r\n\t\t\t\"enabled\":false\r\n\t\t}\r\n\t},\r\n\r\n\t\"plugins\":{\r\n\t\t\"DefaultRendering\":{\r\n\t\t\t\"type\":\"rendering\",\r\n\t\t\t\"file\":\"../../../node_modules/devapt-core-common/dist/js/default_plugins/rendering_default_plugin\"\r\n\t\t},\r\n\t\t\"DefaultServices\":{\r\n\t\t\t\"type\":\"services\",\r\n\t\t\t\"file\":\"../../../node_modules/devapt-core-services/dist/js/default_plugins/services_default_plugin\"\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"loggers\":{},\r\n\t\r\n\t\"traces\":{}\r\n}\r\n```\r\n\r\n\r\nLaunch your runtime nodes and servers:\r\n\r\n```\r\ncd my_app\r\nnode node_modules/devapt-core-server/dist/js/start_node.js -n NodeA -t dist/resources/world -b node_modules/devapt-core-server/dist/js -s NodeA:NodeALocal8081\r\n```\r\n\r\n\r\nExample with settings in many files:\r\n\r\n```js\r\n\"resources//worldworld.json\":\r\n\r\n{\r\n\t\"nodes\":\"nodes.json\",\r\n\t\r\n\t\"tenants\":{\r\n\t\t\"tenantA\":{\r\n\t\t\t\"applications\":\"applications.json\",\r\n\t\t\t\"packages\":\"tenantA_packages.json\",\r\n\t\t\t\"security\":{}\r\n\t\t}\r\n\t},\r\n\r\n\t\"deployments\":\"deployments.json\",\r\n\r\n\t\"security\":\"security.json\",\r\n\r\n\t\"plugins\":\"plugins.json\",\r\n\t\r\n\t\"loggers\":\"loggers.json\",\r\n\t\r\n\t\"traces\":\"traces.json\"\r\n}\r\n\r\n\"nodes.json\":\r\n{\r\n\t\"nodes\":{ same settings than above }\r\n}\r\n\r\n\"services.json\":\r\n{\r\n\t\"services\":{ same settings than above }\r\n}\r\n\r\nRepeat on each files on the same manner.\r\n\r\n```\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design.md",
    "name": "./docs/manual/design.md",
    "content": "# Design\r\n\r\nDevapt is full stack solution. So it's usefull to provide an integrated framework to build your application with configuration files.\r\nOn the other hands it's difficult to have an overview of all parts and undestand how all this parts work together.\r\n\r\nFirst, devapt is provided throught specialized core projects and addon features. If you write an application you don't need to know all details. But if you want to add features, you should understand on what starting to build your feature.\r\n[Details of projects](https://lucbories.github.io/projects.md)\r\n\r\n\r\n## Main devapt concepts are:\r\n* Node: each application can be distributed on one or many nodes. Each node run on a NodeJS instance with some inter node communication channels. One or many nodes can run on one NodeJS instance. One or many NodeJS instance can run on one hostnames.\r\n* Node settings: JSON file which describe one or many nodes with their names, security, debug trace and communication channels.\r\n* Application settings or configuration or description: main JSON file which define application features, packages, resources (UI components...), debug traces and security.\r\n* Bus: all nodes communicate together with messages throught a communication bus. An application can have one or more buses, one for metrics, one for logs and one between components.\r\n* Tenant: a tenant is a set of applications and packages with its own security access. for example, we can have one tenant per company on a shared server (SaaS).\r\n* Service: a service provide a feature which responds some datas on a request. For example, a ping pong service responds a 'pong' on each 'ping' request.\r\n* Server: a server (not a hostname) is an engine which provides services and others features. For example, a logs server exists to process received logs.\r\n* Metric: metrics are collected datas from a node, an application, a server, a service... which help to monitors system health.\r\n* Rendering: it's the process of producing DOM content for the browser page.\r\n* Virtual DOM: it's a technology which can produce DOM content outside of browser and to apply differential changes on a page. It enhance performance and decrease browser load.\r\n* Security: security is an important need for all usages. Security is everywhere in devapt apps but all parts aren't finished yet. (TODO)\r\n\r\n\r\n## How an application work\r\nAn application has one directory but two targets: server and browser. On server side, an application launches nodes and services. On browser side, the page receive its content from the server: it's a lightweight HTML page with two scripts: a credentials record and an initial application state. Each user action on the interface call some scripts and request server if needed.\r\n\r\n\r\n## Features\r\n\r\n\r\n<a href=\"./design_distributed.html\">Distributed</a>\r\n\r\n<a href=\"./design_messaging.html\">Messaging</a>\r\n\r\n<a href=\"./design_metrics.html\">Metrics</a>\r\n\r\n<a href=\"./design_rendering.html\">Rendering</a>\r\n\r\n<a href=\"./design_security.html\">Security</a>\r\n\r\n<a href=\"./design_servers.html\">Servers</a>\r\n\r\n<a href=\"./design_services.html\">Services</a>\r\n\r\n<a href=\"./design_starting_process.html\">Starting process</a>\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configurable.md",
    "name": "./docs/manual/design_configurable.md",
    "content": "## Design - Configurable without code feature\r\n\r\nDevapt has for first principle to build applications without coding common features.\r\nWhy writing code to offer REST api, metrics, role based security, database access...\r\nConcentrate your coding forces to write uncommon business code.\r\n\r\n\r\n### Description\r\nDevapt first principle to build applications without coding common features.\r\n\r\nWhy write code for REST api, metrics, role based security, database access...\r\n\r\nIt is best to concentrate on the business code.\r\n\r\n\r\n\r\n### Status\r\n\r\n\r\nConfiguration providers:\r\n* JSON file: DONE\r\n* JSON url: TO TEST\r\n* Datas model: TO IMPLEMENT\r\n\r\nLocal configuration loading: DONE 1.0\r\n\r\nDistributed configuration loading: DONE 2.0\r\n\r\n\r\n\r\n### Format\r\n\r\n\r\n#### Source\r\nSettings are loaded from a Json object.\r\nJson providers could be: files, sql db, nosql db...\r\nFor instance only file provider is available.\r\n\r\n\r\n#### Fisrt level format:\r\nFirst levels are the sub-tree at the Json tree root.\r\nThis level describes the runtime world.\r\n\r\nFirst level keys should be:\r\n * nodes: collection of defined nodes and servers.\r\n * tenants\r\n * deployments\r\n * security: authentication and authorization configuration.\r\n * plugins: collection of defined plugins, a plugin is an addon for rendering, security, servers types, services types...\r\n * loggers: collection of defined loggers.\r\n * traces: configuration of enabled traces for modules, classes, instances of classes.\r\n\r\nWith sub settings files:\r\n```js\r\n{\r\n\t\"nodes\":\"nodes.json\",\r\n\t\r\n\t\"tenants\":{\r\n\t\t\"tenantA\":{\r\n\t\t\t\"applications\":\"applications.json\",\r\n\t\t\t\"packages\":\"tenantA_packages.json\",\r\n\t\t\t\"security\":{}\r\n\t\t}\r\n\t},\r\n\r\n\t\"deployments\":\"deployments.json\",\r\n\r\n\t\"security\":\"security.json\",\r\n\r\n\t\"plugins\":\"plugins.json\",\r\n\t\r\n\t\"loggers\":\"loggers.json\",\r\n\t\r\n\t\"traces\":\"traces.json\"\r\n}\r\n```\r\n\r\n\r\n\r\n * services: collection of defined services, a service is a feature which could be applied on a set of servers for a set of applications.\r\n * applications: collection of defined applications, an application links servers and services.\r\n * modules: collection of defined modules, a module is a set of resources.\r\n\r\nWith inline settings:\r\n```js\r\n{\r\n\t\"nodes\":{ ... },\r\n\t\r\n\t\"tenants\":{ ... },\r\n\t\r\n\t\"deployments\":{ ... },\r\n\t\r\n\t\"plugins\":{ ... },\r\n\t\r\n\t\"security\":{ ... },\r\n\t\r\n\t\"loggers\":{ ... },\r\n\t\r\n\t\"traces\":{ ... }\r\n}\r\n```\r\n\r\n\r\nWith a mix of inline and files settings:\r\n```js\r\n{\r\n\t\"nodes\":{ ... },\r\n\t\r\n\t\"tenants\":{ ... },\r\n\t\r\n\t\"deployments\":{ ... },\r\n\t\r\n\t\"plugins\":{ ... },\r\n\t\r\n\t\"security\":\"security.json\",\r\n\t\r\n\t\"loggers\":\"loggers.json\",\r\n\t\r\n\t\"traces\":\"traces.json\"\r\n}\r\n```\r\n\r\n\r\n\r\n#### Second level settings:\r\n\r\n###### For nodes\r\n<a href=\"./design_configuration_for_nodes.html\">NODES CONFIGURATION</a>\r\n\r\n\r\n###### For tenants\r\n<a href=\"./design_configuration_for_tenants.html\">TENANTS CONFIGURATION</a>\r\n\r\n\r\n###### For deployments\r\n<a href=\"./design_configuration_for_deployments.html\">DEPLOYMENTS CONFIGURATION</a>\r\n\r\n\r\n###### For plugins\r\n<a href=\"./design_configuration_for_plugins.html\">PLUGINS CONFIGURATION</a>\r\n\r\n\r\n###### For security\r\n<a href=\"./design_configuration_for_security.html\">SECURITY CONFIGURATION</a>\r\n\r\n\r\n###### For loggers\r\n<a href=\"./design_configuration_for_loggers.html\">LOGGERS CONFIGURATION</a>\r\n\r\n\r\n###### For traces\r\n<a href=\"./design_configuration_for_traces.html\">TRACES CONFIGURATION</a>\r\n\r\n\r\n###### For templates:\r\nThe second level \"templates\" collection stores all templates definition.\r\nA template can be used everywhere.\r\n\r\nDefine a global template and a service template:\r\n```{\r\n\t\"templates\":{\r\n\t\t\"services\":{\r\n\t\t\t\"security_svc_template\":{\r\n\t\t\t\t\"type\":\"security\",\r\n\t\t\t\t\"tenant\":\"${svc_tenant}\",\r\n\t\t\t\t\"version\":\"1.2.0\",\r\n\t\t\t\t\"routes\":[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"route\":\"/login\",\r\n\t\t\t\t\t\t\"action\":\"login\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"route\":\"/signin\",\r\n\t\t\t\t\t\t\"action\":\"login\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"route\":\"/logout\",\r\n\t\t\t\t\t\t\"action\":\"logout\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"route\":\"/signup\",\r\n\t\t\t\t\t\t\"action\":\"signup\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"route\":\"/renew\",\r\n\t\t\t\t\t\t\"action\":\"renew\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"security_single_node_template\":{\r\n\t\t\t\"services\":{\r\n\t\t\t\t\"${svc_name}\":{\r\n\t\t\t\t\t\"template\":\"security_svc_template\",\r\n\t\t\t\t\t\"values\":{\r\n\t\t\t\t\t\t\"svc_tenant\":${app_tenant}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"nodes\":{\r\n\t\t\t\t\"${node_name}\":{\r\n\t\t\t\t\t\"host\":\"${$host_name}\",\r\n\t\t\t\t\t\"tenant\":\"${app_tenant}\",\r\n\t\t\t\t\t\"is_master\":false,\r\n\t\t\t\t\t\"servers\":{\r\n\t\t\t\t\t\t\"${node_server_name}\":{\r\n\t\t\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\t\t\"tenant\":\"${app_tenant}\",\r\n\t\t\t\t\t\t\t\"port\":\"${node_server_port}\",\r\n\t\t\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\t\t\"enabled\":true,\r\n\t\t\t\t\t\t\t\t\t\"plugins\":\"${security_plugins}\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"applications\":{\r\n\t\t\t\t\"${app_name}\":{\r\n\t\t\t\t\t\"tenant\":\"${app_tenant}\",\r\n\t\t\t\t\t\"version\":\"${app_version}\",\r\n\t\t\t\t\t\"env\":\"${app_env}\",\r\n\t\t\t\t\t\"group\":\"${app_group}\",\r\n\r\n\t\t\t\t\t\"description\":\"...\",\r\n\r\n\t\t\t\t\t\"url\":\"${app_url}\",\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"services\":{\r\n\t\t\t\t\t\t\"provides\":{\r\n\t\t\t\t\t\t\t\"${svc_name}\": { \"servers\":[\"${node_server_name}\"], \"filters\":[\"*\"] }\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"consumes\":{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"modules\": [],\r\n\t\t\t\t\t\"plugins\":[],\r\n\t\t\t\t\t\"resources\":[],\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"assets\":{\r\n\t\t\t\t\t\t\"css\":[],\r\n\t\t\t\t\t\t\"js\":[],\r\n\t\t\t\t\t\t\"img\":[],\r\n\t\t\t\t\t\t\"index\":\"\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"license\":\"APACHE-LICENSE-2.0\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}```\r\n\r\n\r\nUse a global template:\r\n\r\n```{\r\n\t\"nodes\":...,\r\n\t\"templated\":[\r\n\t\t{\r\n\t\t\t\"template\":\"security_single_node\",\r\n\t\t\t\"values\":{\r\n\t\t\t\t\"app_name\":\"my_app_1\",\r\n\t\t\t\t\"app_tenant\":\"Client 12\",\r\n\t\t\t\t\"app_version\":\"0.5.3\",\r\n\t\t\t\t\"app_env\":\"production\",\r\n\t\t\t\t\"app_group\":\"financial\",\r\n\t\t\t\t\"app_url\":\"my_apps/my_app_1\",\r\n\t\t\t\t\"svc_name\":\"my_app_1_svc\",\r\n\t\t\t\t\"node_name\":\"my_app_1_node\",\r\n\t\t\t\t\"host_name\":\"localhost\",\r\n\t\t\t\t\"node_server_name\":\"my_app_1_server\",\r\n\t\t\t\t\"node_server_port\":8080,\r\n\t\t\t\t\"security_plugins\":[\"file_users\", \"oauth2\"]\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_deployments.md",
    "name": "./docs/manual/design_configuration_for_deployments.md",
    "content": "## Design - Configuration for Deployments\r\n\r\n\r\n### Description\r\nTopology deployments description.\r\n\r\n\r\n### Format\r\nComing soon.\r\n\r\n\r\n### Example\r\n```js\r\n\r\n...coming soon.\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_loggers.md",
    "name": "./docs/manual/design_configuration_for_loggers.md",
    "content": "## Design - Configuration for Loggers\r\n\r\n\r\n### Description\r\nTopology loggers description.\r\n\r\n\r\n### Format\r\nComing soon.\r\n\r\n\r\n### Example\r\n```js\r\n\r\n...coming soon.\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_nodes.md",
    "name": "./docs/manual/design_configuration_for_nodes.md",
    "content": "## Design - Configuration for Nodes\r\n\r\n\r\n### Description\r\nTopology nodes description.\r\n\r\n\r\n### Format\r\nProvide a list of distributed nodes with:\r\n * node name\r\n * is_master: node is the topology master node ? (true/false)\r\n * servers: provided features servers for this node, a list of servers configurations with for each:\r\n   * server name\r\n   * type: kind of server (express/restify/logs for instance)\r\n   * port: server communication port number\r\n   * protocole: server server communication protocole (http/https)\r\n   * middlewares: server used middlewares\r\n   * use_socketio: server use socketio communication ? (true/false)\r\n   * security: server security configuration\r\n\r\n\r\n### Example\r\n```js\r\n{\r\n\t\"nodes\":{\r\n\t\t\"NodeA\":{\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"is_master\":true,\r\n\t\t\t\"servers\":{\r\n\t\t\t\t\"NodeALocal8080\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":8080,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\"plugins\":[]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"NodeALocalLogs\":{\r\n\t\t\t\t\t\"type\":\"logs\",\r\n\t\t\t\t\t\"port\":\"N/A\",\r\n\t\t\t\t\t\"protocole\":\"bus\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":false,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\"plugins\":[]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"NodeB\":{\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"is_master\":false,\r\n\t\t\t\"servers\":{\r\n\t\t\t\t\"NodeBLocal7080\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":7080,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\"plugins\":[]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"NodeC\":{\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"is_master\":false,\r\n\t\t\t\"servers\":{\r\n\t\t\t\t\"NodeCLocal6080\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":6080,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":false,\r\n\t\t\t\t\t\t\t\"plugins\":[]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_plugins.md",
    "name": "./docs/manual/design_configuration_for_plugins.md",
    "content": "## Design - Configuration for Plugins\r\n\r\n\r\n### Description\r\nTopology plugins description.\r\n\r\n\r\n### Format\r\nComing soon.\r\n\r\n\r\n### Example\r\n```js\r\n\r\n...coming soon.\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_security.md",
    "name": "./docs/manual/design_configuration_for_security.md",
    "content": "## Design - Configuration for Security\r\n\r\n\r\n### Description\r\nTopology security description.\r\n\r\n\r\n### Format\r\nComing soon.\r\n\r\n\r\n### Example\r\n```js\r\n\r\n...coming soon.\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_tenants.md",
    "name": "./docs/manual/design_configuration_for_tenants.md",
    "content": "## Design - Configuration for Tenants\r\n\r\n\r\n### Description\r\nTopology tenants description.\r\n\r\n\r\n### Format\r\nComing soon.\r\n\r\n\r\n### Example\r\n```js\r\n\r\n...coming soon.\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_configuration_for_traces.md",
    "name": "./docs/manual/design_configuration_for_traces.md",
    "content": "## Design - Configuration for Traces\r\n\r\n\r\n### Description\r\nTopology traces description.\r\n\r\n\r\n### Format\r\nComing soon.\r\n\r\n\r\n### Example\r\n```js\r\n\r\n...coming soon.\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_distributed.md",
    "name": "./docs/manual/design_distributed.md",
    "content": "## Design - Distributed feature\r\n\r\nDevapt provides a distributed infrastructure of nodes with a master configuration pushed on others nodes.\r\n\r\nNodes communicate between them with messages passing.\r\n\r\nEach node corresponds to a Node instance and provides one or more servers.\r\n\r\nEache server provides one ore more services.\r\n\r\nA simple application can have one node with one server.\r\n\r\nA more complex application can have several nodes on one ore more host and each node can have one ore more servers.\r\n\r\nDistributed feature can help to create micro-services based application.\r\n\r\n\r\n\r\n### Description\r\nDevapt provides a distributed infrastructure of nodes with a master configuration pushed on others nodes.\r\n\r\nNodes communicate between them with messages passing.\r\n\r\nEach node corresponds to a Node instance and provides one or more servers.\r\n\r\nEache server provides one ore more services.\r\n\r\nA simple application can have one node with one server.\r\n\r\nA more complex application can have several nodes on one ore more host and each node can have one ore more servers.\r\n\r\nDistributed feature can help to create micro-services based application.\r\n\r\n\r\n\r\n### Status\r\nThe nodes, servers and services are ready for use.\r\n\r\nThe messaging bus is ready too but it sould be tested on many host.\r\n\r\nTo finish: push configuration.\r\n\r\nNeed Test, Optimization and code review.\r\n\r\n\r\n\r\n### For Devapt users:\r\nComing soon.\r\n```\r\n```\r\n\r\n\r\n\r\n### For Devapt contributers:\r\nComing soon.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_messaging.md",
    "name": "./docs/manual/design_messaging.md",
    "content": "## Design - Messaging feature\r\n\r\nDevapt provides messages bus server and client classes.\r\n\r\nDistributed nodes communicates each others with simple JSON messages.\r\n\r\n### Description\r\nA distributed application needs to provide a communication between its nodes.\r\n\r\nDevapt provides messages buses to ensure JSON messages exchange.\r\n\r\n![Messaging](https://github.com/lucbories/devapt/blob/master/docs/features/buses.png)\r\n\r\nEach topology node has 3 buses to communicate inside a node or between nodes:\r\n* metrics bus: metrics collectors push metrics messages on this bus and metrics server listen on it to reduce metrics values.\r\n* messages bus nodes servers and services communicate through messages.\r\n* logs bus: each node part can log its activity on this bus.\r\n\r\nEach browser has a socketio bus for communication between browser and topology.\r\n\r\n\r\nExample for message communication inside a Node\r\n\r\nNode A\r\n\r\nServer A1\t\t\tServer A2\r\n\r\n\r\n\r\n\r\n### Status\r\nThe nodes, servers and services are ready for use.\r\nThe messaging bus is ready too but it sould be tested on many host.\r\n\r\nTo finish: push configuration.\r\n\r\nNeed Test, Optimization and code review.\r\n\r\n\r\n\r\n### For Devapt users:\r\nComing soon.\r\n```\r\n```\r\n\r\n\r\n\r\n### For Devapt contributers:\r\nComing soon.\r\n\r\n\r\n\r\n### Thanks\r\n\r\n#### SimpleBus\r\nAJ Lopez provides many specialized projects.\r\nIt's a great work.\r\nOne of them is SimpleBus, a messaging system between a server and its clients (local or remote).\r\n\r\n[SimpleBus](https://github.com/ajlopez/SimpleBus)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_metrics.md",
    "name": "./docs/manual/design_metrics.md",
    "content": "## Design - Metrics feature\r\n\r\nApplications optimization and analyze need some metrics.\r\n\r\nUsefull libraries offer builin metrics support but each one with its own format.\r\n\r\nDevapt provides a unique metrics format per server domain: http request, messaging request...\r\n\r\n### Description\r\nApplications optimization and analyze need some metrics.\r\n\r\nUsefull libraries offer builin metrics support but each one with its own format.\r\n\r\nDevapt provides a unique metrics format per domain: http request, messaging, host, nodejs...\r\n\r\n\r\nMetrics architecture consist of 4 main base classes and one bus per topology, on the master node:\r\n* MetricsCollector: update MetricsRecord values, use MetricsReducer to consolidate values and post a message onto the metrics bus.\r\n* MetricsRecord: a snapshot of a set of values\r\n* MetricsReducer: reduce a list of MetricsRecord values\r\n* MetricsState: MetricsReducer result\r\nEach of this 4 classes should be subclassed to create a new metrics feature.\r\n\r\n\r\nFor instance, available metrics are:\r\n* Bus metrics: collect master node buses counters (messages count, messages size, errors count, subscribers count)\r\n* Host metrics: collect NodeJs host metrics (CPUs count, CPUs architecture, CPUs usage...)\r\n* NodeJs metrics: collect NodeJs process metrics (pid, version, plateform, uptime, memory)\r\n* Http metrics: for Restify and Express, collect request metrics (id, method, status, referer, url, service, latency, browser...)\r\n\r\n\r\nHow it runs:\r\n\r\nThe MetricsServer owns collectors instance and listen the metrics bus and call a MetricsCollector method to process new metrics values.\r\nA MetricsCollector owns one MetricsReducer, one MetricsState and one MetricsRecord.\r\nThe MetricsServer provides metrics reduced values to metrics services.\r\nEach metrics feature has its corresponding metrics service to publish metrics outside the node:\r\n* MetricsBusService\r\n* MetricsHostService\r\n* MetricsNodeJsService\r\n* MetricsHttpService\r\n\r\n\r\n### Status\r\nFeatures are finished for Bus, Host, NodeJs and Http metrics.\r\n\r\nThe metrics server is operational.\r\n\r\nSee devapt-devtools project for a full example of metrics services usage.\r\n\r\n[DEVTOOLS Project](https://github.com/lucbories/devapt-devtools/)\r\n\r\n\r\n### For Devapt users:\r\n```\r\n    // GET NODE\r\n    let node = ...\r\n    \r\n    // GET HTTP METRICS STATISTICS VALUES\r\n    const http_metrics = node.get_metrics_server().get_http_metrics().get_values()\r\n    \r\n    /*\r\n        HTTP METRICS STATISTICS FORMAT:\r\n        \r\n        // REQUEST VERSIONS\r\n        http_metrics.version_counters: a map of Devapt versions counters (plain object)\r\n        \r\n        // REQUEST UUID\r\n        http_metrics.id_counters: a map of requests ids counters { id1:counter1, id2:counter2 } (plain object)\r\n        http_metrics.pid_counters: a map of process ids counters { pid1:counter1, pid2:counter2 } (plain object)\r\n        \r\n        // DURATIONS\r\n        http_metrics.latency_min: the minimal latencies value (integer)\r\n        http_metrics.latency_counter: the counter latencies values (integer)\r\n        http_metrics.latency_sum: the sum of latencies values (integer)\r\n        http_metrics.latency_mean: the sum divided by the count of latencies values (integer)\r\n        http_metrics.latency_max: the maximal latencies value (integer)\r\n        \r\n        // SERVICE IDENTIFICATION\r\n        http_metrics.service_name_counters: a map of service name counters (plain object)\r\n        http_metrics.service_url_counters: a map of service url counters (plain object)\r\n        http_metrics.service_method_counters: a map of service method counters (plain object)\r\n        http_metrics.service_http_version_counters: a map of service http counters (plain object)\r\n        http_metrics.service_route_counters: a map of service route counters (plain object)\r\n        \r\n        // SERVER IDENTIFICATION\r\n        http_metrics.server_node_name_counters: a map of Devapt versions counters (plain object)\r\n        http_metrics.server_server_name_counters: a map of Devapt versions counters (plain object)\r\n        \r\n        // CLIENT IDENTIFICATION\r\n        http_metrics.client_user_name_counters: a map of user name counters (plain object)\r\n        http_metrics.client_user_id_counters: a map of user id counters (plain object)\r\n        http_metrics.client_browser_counters: a map of client browser type counters (plain object)\r\n        http_metrics.client_referrer_counters: a map of client referrer counters (plain object)\r\n\r\n        // RESPONSE\r\n        http_metrics.response_status_counters: a map of response status counters (plain object)\r\n    */\r\n```\r\n\r\n\r\n\r\n### For Devapt contributers:\r\n\r\nMetrics classes are:\r\n| Class file | Class name and description |\r\n|:-----------|:--------------------------:|\r\n| /metric_duration.js | MetricDuration: metrics values collector for a simple time interval.|\r\n| | |\r\n| /base/metrics_collector.js | MetricsCollector: metrics values collector base class.|\r\n| /base/metrics_record.js | MetricsRecord: metrics values snapshot base class.|\r\n| /base/metrics_reducer.js | MetricsHost: metrics values reducer base class.|\r\n| /base/metrics_state.js | MetricsState: metrics values persistent state base class.|\r\n| | |\r\n| /bus/metrics_bus_collector.js | MetricsBusCollector: metrics values collector class for bus metrics feature.|\r\n| /bus/metrics_bus_record.js | MetricsBusRecord: metrics values snapshot class for bus metrics feature.|\r\n| /bus/metrics_bus_reducer.js | MetricsBusHost: metrics values reducer class for bus metrics feature.|\r\n| /bus/metrics_bus_state.js | MetricsBusState: metrics values persistent state class for bus metrics feature.|\r\n| | |\r\n| /host/metrics_host_collector.js | MetricsCollector: metrics values collector class for host metrics feature.|\r\n| /host/metrics_host_record.js | MetricsRecord: metrics values snapshot class for host metrics feature.|\r\n| /host/metrics_host_reducer.js | MetricsHost: metrics values reducer class for host metrics feature.|\r\n| /host/metrics_host_state.js | MetricsState: metrics values persistent state class for host metrics feature.|\r\n| | |\r\n| /http/metrics_http_collector.js | MetricsHttpCollector: metrics values collector class for Http metrics feature.|\r\n| /http/metrics_http_record.js | MetricsHttpRecord: metrics values snapshot class for Http metrics feature.|\r\n| /http/metrics_http_reducer.js | MetricsHttpHost: metrics values reducer class for Http metrics feature.|\r\n| /http/metrics_http_state.js | MetricsHttpState: metrics values persistent state class for Http metrics feature.|\r\n| | |\r\n| /nodejs/metrics_nodejs_collector.js | MetricsNodeJsCollector: metrics values collector class for NodeJs metrics feature.|\r\n| /nodejs/metrics_nodejs_record.js | MetricsNodeJsRecord: metrics values snapshot class for NodeJs metrics feature.|\r\n| /nodejs/metrics_nodejs_reducer.js | MetricsNodeJsHost: metrics values reducer class for NodeJs metrics feature.|\r\n| /nodejs/metrics_nodejs_state.js | MetricsNodeJsState: metrics values persistent state class for NodeJs metrics feature.|\r\n| | |\r\n| common/servers/metric_server.js | MetricsServer: server which reveive metrics message and call a reducer to update statistics|\r\n\r\n\r\nMetrics bus message format:\r\n```\r\n{\r\n   \"target\":\"metrics_server\", // Fixed name: see node.metrics_server.get_name()\r\n   \"sender\":\"...\", // fill by BusClient.send_msg(target,payload)\r\n   \"payload\":{\r\n       \"is_metrics_message\":true,\r\n       \"metric\":\"...\", // metrics collector type: http/message/...\r\n       \"metrics\":[\r\n           {\r\n                // metrics values\r\n           }\r\n       ],\r\n       \"metrics_count\":999 // count of metrics\r\n    }\r\n}\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_rendering.md",
    "name": "./docs/manual/design_rendering.md",
    "content": "## Design - Rendering feature\r\n\r\nApplications can render pages on server side or on browser side.\r\n\r\nRender engine accepts rendering plugins:\r\n* default (simple HTML tags)\r\n* Foundation (ZURB HTML/CSS rendering framework)\r\n* jQuery UI\r\n\r\n### Description\r\nRendering is the process of making an Html content.\r\n\r\nDevapt allows you to render page content on the server or on the browser side or all both together.\r\n\r\nDevapt rendering is a set of pure functions which take settings, state and context.\r\n* settings contains what to be rendering: a trre of component descriptions.\r\n* state has initial values of component: label, placeholder, items...\r\n* context is an object with rendering helpers: functions resolver, result data to be updated...\r\n\r\nDevapt rendering is stateless and isomorphic component classes with simple signature:\r\n\r\nAll rendering functions update a virtual dom tree based on virtual-dom.\r\nRendered virtual nodes are stored in a RenderingResult instance.\r\nOn server side rendering, RenderingResult instance is serialized and given to the browser to update the browser dom tree.\r\nOn browser side, rendering is processed by Component classes which update the real dom tree and manage UI interactions (user actions, stream events...).\r\n\r\nA work in progress is to give plugins component class to the browser with browserify build process.\r\n\r\n\r\n\r\n### At startup\r\nA page is rendered by the server and send to the browser.\r\n\r\nThe initial page contains:\r\n* common page headers\r\n* applications initial settings and states: window.__INITIAL_STATE__\r\n* page initial content to be rendered: window.__INITIAL_CONTENT__\r\n* page initial content headers: css, js...\r\n* a single empty body DIV tag with id 'content'\r\n* a devapt bootstrap script\r\n\r\nDevapt bootstrap script calls:\r\n```javascript\r\nwindow.devapt().on_dom_loaded( window.devapt().create_runtime )\r\nwindow.devapt().on_runtime_created( window.devapt().render_page_content )\r\nwindow.devapt().on_content_rendered( window.devapt().init_anchors_commands )\r\n```\r\n\r\nFirst line create Devapt runtime, load initial Redux state.\r\n\r\nLine two render initial content and initialize router current path:\r\n```javascript\r\nwindow.devapt().ui().process_rendering_result(json_result)\r\nwindow.devapt().router().set_hash_if_empty('/')\r\n```\r\n\r\nLine three update anchors path with application url prefix.\r\n\r\n\r\n\r\n### Rendering result process\r\nAt startup <DIV id=\"content\"> is empty and initial RenderingResult contains a virtual tree of the \"content\" tag.\r\n\r\nFor example, \"content\" virtual tree children can contain:\r\n* \"menubar\":vnode_a\r\n* \"separator\":vnode_b\r\n* \"table\":vnode_c\r\n\r\nFirst children components are created and intialized with a vnode:\r\n```javascript\r\n// REMOVE \"content\" existing children\r\n\r\nvar compo_a = window.devapt().ui(\"menubar\")\r\ncompo_a.process_rendering_result(vnode_a)\r\ncompo_content.get_dom_element().appendChild( compo_a.get_dom_element() )\r\n\r\nvar compo_b = window.devapt().ui(\"separator\")\r\ncompo_b.process_rendering_result(vnode_b)\r\ncompo_content.get_dom_element().appendChild( compo_b.get_dom_element() )\r\n\r\nvar compo_c = window.devapt().ui(\"table\")\r\ncompo_c.process_rendering_result(vnode_c)\r\ncompo_content.get_dom_element().appendChild( compo_c.get_dom_element() )\r\n\r\n```\r\n\r\n\r\n\r\n### Rendering component\r\nEach rendering component is a base class of devapt/src/browser/Component.\r\nA Component has a private Rendering instance named \"_rendering\" which manage dom and vnode rendering actions.\r\n\r\n\r\n\r\n```javascript\r\n\r\nconst component_instance = window.document.devapt().runtime().ui().get_component_class(class_name)\r\nconst c = new component_class(settings)\r\nc.render(state)\r\n```\r\n* An other axis is to manage DOM update through a virtual DOM.\r\n\r\nDevapt comes is a set of rendering components but it is expandable with plugins for foundation-site, cytoscape...\r\n\r\n\r\n\r\n\r\n### Example\r\nFor example, at the beginning you have a /myapp/home route to display your home page.\r\n\r\nServer receives a /myapp/home request:\r\n* server search for a corresponding service service and reply with a 404 not found page if no service was found.\r\n* server ask service to process the request: service serves a static page, process a custom work or call a rendering middleware.\r\n* for rendering middleware, service response with a common page skeleton and a RenderingResult instance.\r\n* browser receive html page, init javascript to create ClientRuntime and UI instances.\r\n* browser UI instance processes RenderingResult to finalize page content.\r\n\r\nAfter you choose a menu item with a route command as\r\n```javascript\r\n{\r\n\t\"type\":\"display\",\r\n\t\"url\":\"/page2\",\r\n\t\"middleware\":\"mypage2service\"\r\n}\r\nassuming you have an application whith the /myapp route.\r\n```\r\nBrowser has append a route for each command at startup, so browser process the requested route and call UI instance method:\r\n```javascript\r\nwindow.document.devapt().runtime().ui().render_with_middleware(cmd, \"/myapp/page2\", \"mypage2service\")\r\n```\r\n* Browser asks server for a RenderingResult instance (server rendering result) via websocket.\r\n* Browser UI instance processes RenderingResult to update page content.\r\n\r\n\r\nIf you choose a menu item with a view command as\r\n```javascript\r\n{\r\n\t\"type\":\"display\",\r\n\t\"view\":\"page2_view\",\r\n\t\"menubar\":\"page2_menubar\"\r\n}\r\n```\r\n* Browser searchs for page2_view and page2_menubar (optional) settings. If not found into cache, asks server for settings.\r\n* Browser process rendering of page2_view and page2_menubar (optional).\r\n```javascript\r\nwindow.document.devapt().runtime().ui(page2_view).render()\r\nwindow.document.devapt().runtime().ui(page2_menubar).render()\r\n```\r\n\r\n\r\n\r\n\r\n### Status\r\n\r\nUsable but work in progress.\r\nNeed Test, Optimization and code review.\r\n\r\n\r\n\r\n\r\n### For Devapt users:\r\nComing soon.\r\n```javascript\r\n```\r\n\r\n\r\n\r\n### For Devapt contributers:\r\nComing soon.\r\n\r\n\r\n\r\n\r\n\r\n|    |     |    |\r\n|:---|:---:|---:|\r\n|[Metrics](https://github.com/lucbories/Devapt/tree/master/docs/features/METRICS.md)..........................|[Table of content](https://github.com/lucbories/Devapt/tree/master/docs/TOC.md)|..........................[Security](https://github.com/lucbories/Devapt/tree/master/docs/features/SECURITY.md)|\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_security.md",
    "name": "./docs/manual/design_security.md",
    "content": "## Design - Security feature\r\n\r\nDevapt framework lets you use the best in class authentication features with Passport technology.\r\n\r\nAuthorization is provided by an ACL module for per resource permissions with roles.\r\n\r\n\r\n### Description\r\n\r\n[See this excellent tutorial](https://www.ctl.io/developers/blog/post/build-user-authentication-with-node-js-express-passport-and-orchestrate)\r\n\r\nComing soon.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_servers.md",
    "name": "./docs/manual/design_servers.md",
    "content": "## Design - Servers feature\r\n\r\nDevapt provides builtin servers for common usages (Restify, Express, SocketIO).\r\n\r\nBut you can code your own server.\r\n\r\nA server is attached to a node (a couple of hostname and port).\r\n\r\n\r\n### Description\r\nServers provide featured services.\r\n\r\n\r\n\r\n### Status\r\nExpress server: make middlewares use configurables.\r\n\r\nRestify server: make middlewares use configurables, check authorizations.\r\n\r\nNeed Test, Optimization and code review.\r\n\r\n\r\n\r\n### Builtin servers\r\nDevapt provides builtin servers for common usages.\r\nBut you can code your own server.\r\n\r\n#### EXPRESS\r\nServe static pages or middleware generated content.\r\n\r\n#### RESTIFY\r\nServe RESTfull content.\r\n\r\n\r\n\r\n#### For Devapt users:\r\nConfigure servers in nodes.json\r\nA JSON nodes servers declaration:\r\n```\r\n{\r\n\t\"nodes\":{\r\n\t\t\"NodeA\":{\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"is_master\":true,\r\n\t\t\t\"servers\":{\r\n\t\t\t\t\"NodeALocal8080\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":8080,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":true,\r\n\t\t\t\t\t\t\t\"plugins\":[\"file_users\"]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"NodeALocal8081\":{\r\n\t\t\t\t\t\"type\":\"restify\",\r\n\t\t\t\t\t\"port\":8081,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":true,\r\n\t\t\t\t\t\t\t\"plugins\":[\"file_users\"]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"NodeB\":{\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"is_master\":false,\r\n\t\t\t\"servers\":{\r\n\t\t\t\t\"NodeBLocal8080\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":8080,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":true,\r\n\t\t\t\t\t\t\t\"plugins\":[\"file_users\"]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"NodeBLocal8081\":{\r\n\t\t\t\t\t\"type\":\"restify\",\r\n\t\t\t\t\t\"port\":8081,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":true,\r\n\t\t\t\t\t\t\t\"plugins\":[\"file_users\"]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"NodeBLocal8082\":{\r\n\t\t\t\t\t\"type\":\"express\",\r\n\t\t\t\t\t\"port\":8082,\r\n\t\t\t\t\t\"protocole\":\"http\",\r\n\t\t\t\t\t\"middlewares\":[],\r\n\t\t\t\t\t\"use_socketio\":true,\r\n\t\t\t\t\t\r\n\t\t\t\t\t\"security\": {\r\n\t\t\t\t\t\t\"authentication\": {\r\n\t\t\t\t\t\t\t\"enabled\":true,\r\n\t\t\t\t\t\t\t\"plugins\":[\"file_users\"]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nEach node contains one or more servers.\r\n\r\nA server declaration:\r\n```\r\n\"serverA2\":{\r\n\t\"type\":\"express\",\r\n\t\"port\":8082,\r\n\t\"protocole\":\"http\",\r\n\t\"middlewares\":[],\r\n\t\"use_socketio\":true,\r\n\t\r\n\t\"security\": {\r\n\t\t\"authentication\": {\r\n\t\t\t\"enabled\":true,\r\n\t\t\t\"plugins\":[\"file_users\"]\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nA server has \r\n* a name string, the key of the server record (\"serverA2\"), should be unique on a node and between all distributed nodes.\r\n* a type string: express, restify, socket.io (\"express\"), \"cluster\" and \"bus\" are coming soon.\r\n* a port integer (8081), should be unique on a node.\r\n* a protocole string (\"http\"), others will arrive later.\r\n* a middlewares array ([]), not used yet but it will give configurable middleware uses.\r\n* a flag: use or not socketio between browser and server.\r\n* a security record.\r\n\r\n\r\n\r\n\r\n### For Devapt contributers:\r\n\r\n\r\n\r\n\r\n### Thanks\r\n\r\n#### Express\r\nStrongloop provides a wonderfull de facto standard library, Express.\r\nIt's a very popular project, used by many people.\r\n\r\n[Express](https://github.com/strongloop/express)\r\n\r\n\r\n#### Restify\r\nRestify helps to easily provides a RESTfull server.\r\n\r\n[Express](https://github.com/.../restify)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_services.md",
    "name": "./docs/manual/design_services.md",
    "content": "## Design - Services feature\r\n\r\nDevapt enables features for applications with services.\r\n\r\nA service is enabled on a server on a node.\r\n\r\nA service is provided and consumed.\r\n\r\nBuilin services:\r\n* static assets router\r\n* resources definitions router\r\n* CRUD operations router\r\n* middleware router for functions as f(request,response,next)\r\n\r\n\r\n### Description\r\nA service is a feature linked on a server and added to an application.\r\n\r\nBuiltin services are:\r\n * assets: serves static files (css, js, html, images).\r\n * crud: provides Create/Read/Update/Delete features to use databases, provides CRUD models restfull API.\r\n * logs: provides all registered logs from all topology servers.\r\n * messages: provides all exchanged bus messages for metrics/default/logs buses.\r\n * metrics_bus: provides metrics about topology buses.\r\n * metrics_host: provides metrics about topology hosts.\r\n * metrics_http: provides metrics about http traffic.\r\n * metrics_nodejs: provides metrics about nodejs activity.\r\n * middleware: provides feature to serve page from middleware like code.\r\n * resource: provides topology resources settings.\r\n * security: provides security features for signin, signup, logout, renew (coming soon).\r\n * topology: provides hierarchical logical or physical topology trees.\r\n\r\n\r\n\r\n# Examples\r\n\r\nDefine two routes to serve static files:\r\n * http://myserver/ with files read from an absolute path /.../devapt-app-devtools/dist/assets\r\n * http://myserver/myapp/css/*.css with files read from a project relative path ./public/.\r\n\r\n```js\r\n\t\"html_assets_1\":{\r\n\t\t\"type\":\"html_assets\",\r\n\t\t\"routes\":[\r\n\t\t\t{\r\n\t\t\t\t\"is_global\":true,\r\n\t\t\t\t\"route\":\"/\",\r\n\t\t\t\t\"directory\":\"/.../devapt-app-devtools/dist/assets\",\r\n\t\t\t\t\"default\":\"index.html\"\r\n\t\t\t},\r\n\r\n\t\t\t{\r\n\t\t\t\t\"route\":\"/css/.*.css\",\r\n\t\t\t\t\"directory\":\"./public\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n```\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\design_starting_process.md",
    "name": "./docs/manual/design_starting_process.md",
    "content": "## Design - runtime starting process\r\n\r\n\r\n### Starting code\r\n\r\n```js\r\nvar devapt = require('devapt/base/runtime'); // for ES5\r\nimport runtime from 'devapt/base/runtime' // for ES6 / ES2015\r\n\r\nvar runtime_settings = {\r\n\t'is_master':true,\r\n\t'name':'NodeA',\r\n\t\r\n\t// BUSES SERVERS (for inter nodex communication)\r\n\t\"master\":{\r\n\t\t\"name\":\"NodeA\",\r\n\t\t\r\n\t\t\"msg_bus\":{\r\n\t\t\t\"type\":\"simplebus_server\",\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"port\":5000\r\n\t\t},\r\n\t\t\"logs_bus\":{\r\n\t\t\t\"type\":\"simplebus_server\",\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"port\":5001\r\n\t\t},\r\n\t\t\"metrics_bus\":{\r\n\t\t\t\"type\":\"simplebus_server\",\r\n\t\t\t\"host\":\"localhost\",\r\n\t\t\t\"port\":5002\r\n\t\t}\r\n\t},\r\n\t\r\n\t\"base_dir\": \"\",\r\n\t\r\n\t\"settings_provider\": {\r\n\t\t\"source\":\"local_file\",\r\n\t\t\"relative_path\":\"resources/apps.json\"\r\n\t}\r\n}\r\n\r\nruntime.load(runtime_settings)\r\n```\r\n\r\n\r\n---------------------\r\n### Starting sequence brief\r\n\r\n#### import runtime from 'devapt/base/runtime'\r\nThe first time the file is loaded, the singleton instance of Runtime class is created.\r\n\r\nRuntime.constructor is called to define instance attributes:\r\n```js\r\nthis.is_runtime = true\r\nthis.is_master = this.get_setting('is_master', false)\r\n\r\nthis.node = null\r\n\r\nthis.nodes = new Collection()\r\nthis.servers = new Collection()\r\nthis.services = new Collection()\r\nthis.registered_services = new Collection()\r\n\r\nthis.modules = new Collection()\r\nthis.plugins = new Collection()\r\nthis.resources = new Collection()\r\n\r\nthis.transactions = new Collection()\r\nthis.applications = new Collection()\r\n\r\nthis.security = new Security()\r\n```\r\n\r\nSecurity.constructor\r\n* call AuthenticationManager.constructor\r\n* call AuthorizationManager.constructor\r\n\r\n\r\n#### runtime.load\r\nLoad method register runtime settings and call a sequence of executable instances.\r\n* RuntimeStage0Executable\r\n* RuntimeStage1Executable\r\n* RuntimeStage2Executable\r\n* RuntimeStage3Executable\r\n* RuntimeStage4Executable\r\n* RuntimeStage5Executable\r\n\r\n\r\n\r\n---------------------\r\n### Starting sequence details\r\n\r\n#### Runtime loading stage 0 - RuntimeStage0Executable\r\n* create and load runtime node\r\n* create bus instance or connect to an existing bus\r\n\r\nExample of code\r\n```js\r\nthis.runtime.node = new Node(node_name, this.runtime.get_settings())\r\nthis.runtime.node.load()\r\n```\r\n\r\n\r\nNode.constructor\r\n* init Node.servers collection\r\n\r\n\r\nNode.load (for a master node)\r\n* create and load a bus server and connect to it\r\n* create and load a metrics server and connect to it\r\n\r\n\r\nNode.load (not for a master node)\r\n* connect to an existing bus server\r\n* connect to an existing metrics server\r\n\r\n\r\n\r\n#### Runtime loading stage 1 - RuntimeStage1Executable\r\n* load master apps settings\r\n* load security settings\r\n* load loggers settings\r\n\r\ndispatch_store_config_set_all(settings) for master node only\r\n\r\nruntime.security.load = Security.load\r\n* call this.authentication_manager.load(authentication settings)\r\n* call this.authorization_manager.load(authorization settings)\r\n\r\nAuthenticationManager.load\r\n* select one of AuthenticationPlugin* (AuthenticationPluginPassportLocalDb, AuthenticationPluginPassportLocalFile)\r\n* call AuthenticationPlugin*.constructor\r\n* call AuthenticationPlugin*.enable(plugin settings)\r\n!!! AuthenticationPluginPassportLocalDb needs users Model which is defined in stage 3\r\n\r\n\r\n#### Runtime loading stage 2 - RuntimeStage2Executable\r\n* create node servers (for master node only)\r\n* create services (for master node only)\r\n\r\n```js\r\nruntime.node.load_master_settings(node_settings)\r\nmake_services()\r\n```\r\n\r\n\r\nNode.load_master_settings\r\ncall Node.load_servers\r\nfor each servers settings call Node.create_server\r\n```js\r\nlet server = this.create_server(server_type, server_name, server_cfg)\r\nserver.load()\r\nserver.node = this\r\nserver.init_bus_client(host, port)\r\nthis.servers.add(server)\r\n```\r\n\r\nNode.create_server\r\ncreate a Server instance (ExpressServer, RestifyServer...)\r\n\r\nServer.load\r\nload server settings\r\ncall Server.build_server\r\n\r\nServer.build_server\r\nbuild a Server.server instance as an Express or Restify object for example.\r\nload server middlewares for errors, security, metrics...\r\n\r\nmake_services\r\nfor each service config of node settings services\r\n* create a Service instance\r\n* call service.enable()\r\n* call runtime.services.add(service)\r\n\r\n\r\n\r\n#### Runtime loading stage 3 - RuntimeStage3Executable\r\n* create Database instances (connexions), call db.load, call runtime.resources.add(db)\r\n* create Module instances, call module.load, call runtime.modules.add(module)\r\n* loop on modules resources and call runtime.resources.add(res_obj) for each one\r\n* for each model resources call resource.load_associations() and resource.load_includes()\r\n* create Plugin instances, call plugin.load, call runtime.plugins.add(plugin)\r\n\r\nModule.load\r\nloop on resources settings and create Resource instances (Model, View, Menu, Menubar, Database)\r\n\r\n\r\n\r\n#### Runtime loading stage 4 - RuntimeStage4Executable\r\nIf node is master\r\n* create Application instances from runtime settings\r\n* call application.load\r\n* call runtime.applications.add(application)\r\n\r\nApplication.load\r\n* enable consumed services\r\n* enable used services\r\n* enable used plugins\r\n* enable provided services\r\n\r\n\r\n\r\n\r\n#### Runtime loading stage 5 - RuntimeStage5Executable\r\n* enable servers (for master node only)\r\n\r\nif node is master node, call runtime.node.start()\r\n\r\nruntime.node.start\r\ncall server.enable() on each runtime servers\r\n\r\n\r\nServer.enable\r\napply security middlewares !!! TODO\r\nstart listening\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\tutorials.md",
    "name": "./docs/manual/tutorials.md",
    "content": "# Tutorials\r\n\r\nSome usefull applications are:\r\n * DEVTOOLS which actualy display settings, logs, buses messages, metrics and topology. [DEVTOOLS app project](https://github.com/lucbories/devapt-app-devtools/)\r\n * TESTBUS wich helps to test distributed features: basic ping/pong communication, messaging, logs, topology. [TESTBUS app project](https://github.com/lucbories/devapt-app-testbus/)\r\n * TESTUI wich helps to test user interface features. (coming soon) [TESTUI app project](https://github.com/lucbories/devapt-app-testui/)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\projects.md",
    "name": "./docs/manual/projects.md",
    "content": "# Projects map\r\n\r\nDevapt projects refcard.\r\n\r\n\r\n## Development Map\r\n\r\n### Projects core dependencies (package.json)\r\n\r\n|Project|devapt-core-common|devapt-core-browser|devapt-core-services|devapt-core-server|\r\n|------|------|------|------|------|\r\n|devapt-app-testbus|x|x|x|x|\r\n|devapt-app-testui|x|x|x|x|\r\n|devapt-app-devtools|x|x|x|x|\r\n|devapt-core-doc|x|x|x|x|\r\n|devapt-core-common|||||\r\n|devapt-core-browser|x||||\r\n|devapt-core-services|x||||\r\n|devapt-core-server|x||x||\r\n|devapt-features-foundation6||x|||\r\n|devapt-features-cytoscape||x|||\r\n|devapt-features-sparklines||x|||\r\n|devapt-features-labs|x|x|||\r\n|devtools|x||x||\r\n\r\n### Projects features dependencies (package.json)\r\n\r\n|Project|devapt-features-foundation6|devapt-features-cytoscape|devapt-features-sparklines|devapt-features-labs|devtools|\r\n|------|------|------|------|------|------|\r\n|devapt-app-testbus||||||\r\n|devapt-app-testui||||||\r\n|devapt-app-devtools|||||x|\r\n|devapt-core-common||||||\r\n|devapt-core-browser||||||\r\n|devapt-core-services||||||\r\n|devapt-core-server||||||\r\n|devapt-features-labs||||||\r\n|devapt-app-labs|x|||x||\r\n|devtools|x|x|x|||\r\n\r\n\r\n\r\n## devapt-core-doc\r\n[DEVAPT CORE DOC project](https://github.com/lucbories/devapt-core-doc/)\r\n\r\nPurpose: generate core projects documentation (API, manuals, tutorials)\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-browser\r\n * devapt-core-common\r\n * devapt-core-server\r\n * devapt-core-services\r\n\r\n\r\n## devapt-core-common\r\n[DEVAPT CORE COMMON project](https://github.com/lucbories/devapt-core-common/)\r\n\r\nPurpose: common features for all others projects.\r\n\r\nDevapt projects dependencies:\r\n * none\r\n\r\n\r\n## devapt-core-services\r\n[DEVAPT CORE SERVICES project](https://github.com/lucbories/devapt-core-services/)\r\n\r\nPurpose: services implementation for browser/server projects.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n\r\nProvided services:\r\n * assets routes\r\n * logs stream provider\r\n * messages/logs/metrics stream provider and dispatching\r\n * filtered metrics stream provider\r\n * middleware based routes provider\r\n * ping/pong provider\r\n * resources configuration provider\r\n * security login/signup/logout/... provider (coming soon)\r\n * topology description provider\r\n\r\n\r\n## devapt-core-server\r\n[DEVAPT CORE SERVER project](https://github.com/lucbories/devapt-core-server/)\r\n\r\nPurpose: server features. Provides assets, resources, services, security, plugins, server runtime and metrics.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-services\r\n\r\n\r\n## devapt-core-browser\r\n[DEVAPT CORE BROWSER project](https://github.com/lucbories/devapt-core-browser/)\r\n\r\nPurpose: browser features. Provides commands, client runtime and components.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n\r\n\r\n## devapt-app-testbus\r\n[TESTBUS app project](https://github.com/lucbories/devapt-app-testbus/)\r\n\r\nPurpose: messages bus testing application.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-browser\r\n * devapt-core-server\r\n * devapt-core-services\r\n\r\n\r\n## devapt-app-testui\r\n[TESTUI app project](https://github.com/lucbories/devapt-app-testui/)\r\n\r\nPurpose: user interface testing application.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-browser\r\n * devapt-core-server\r\n * devapt-core-services\r\n\r\n\r\n## devapt-features-foundation6\r\n[DEVAPT FOUNDATION 6 features project](https://github.com/lucbories/devapt-features-foundation6/)\r\n\r\nPurpose: Foundation 6 rendering features.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n\r\n\r\n## devapt-features-cytoscape\r\n[DEVAPT CYTOSCAPE features project](https://github.com/lucbories/devapt-features-cytoscape/)\r\n\r\nPurpose: Cytoscape rendering features.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-browser\r\n\r\n\r\n## devapt-features-sparklines\r\n[DEVAPT SPARKLINES features project](https://github.com/lucbories/devapt-features-sparklines/)\r\n\r\nPurpose: Sparklines rendering features.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-browser\r\n\r\n\r\n## devapt-features-labs\r\n[DEVAPT LABS features project](https://github.com/lucbories/devapt-features-labs/)\r\n\r\nPurpose: labs features. Provides calculus and plots.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-browser\r\n\r\n\r\n## devapt-app-labs\r\n[DEVAPT LABS app project](https://github.com/lucbories/devapt-app-labs/)\r\n\r\nPurpose: Amazing labs application.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-server\r\n * devapt-core-services\r\n * devapt-features-foundation6\r\n * devapt-features-labs\r\n\r\n\r\n## devapt-devtools\r\n[DEVTOOLS project](https://github.com/lucbories/devapt-devtools/)\r\n\r\nPurpose: development tools features.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-features-cytoscape\r\n * devapt-features-foundation6\r\n * devapt-features-sparklines\r\n\r\n\r\n## devapt-app-devtools\r\n[DEVTOOLS app project](https://github.com/lucbories/devapt-app-devtools/)\r\n\r\nPurpose: development tools application.\r\n\r\nDevapt projects dependencies:\r\n * devapt-core-common\r\n * devapt-core-server\r\n * devapt-core-services\r\n * devapt-devtools\r\n * devapt-features-cytoscape\r\n * devapt-features-foundation6\r\n * devapt-features-sparklines\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "C:\\Users\\lbories\\Documents\\PERSONNEL\\MYPROJECTS\\GitHub\\devapt-core-doc\\docs\\manual\\roadmap.md",
    "name": "./docs/manual/roadmap.md",
    "content": "# Roadmap\r\n\r\n\r\n## 2.0.x   breaking changes and new features (CURRENT)\r\n\r\n### MAIN GOALS\r\nWhen I was working on devtools features with devapt 1.0.x, I meet some trouble with missing features.\r\nAn other problem was to deal with topology definition and deployment information previously stored in many pieces of code.\r\nIt was difficult to obtain a global view of defined or deployed topology.\r\nSo I pull out deployment information from topology definition.\r\n\r\nOne missing feature for fine deployment was the lake of customer and version of defined items.\r\n\r\n\r\n\r\nMain added features:\r\n* isomorphic Credentials class to deal with session information on browser or on server (tenant, application, username, token...). (DONE)\r\n* isomorphic data management classes: DataStore, DataRecord, DataCollection...\r\n* topology management classes: TopologyDefineItem...(DONE)\r\n* topology deployment classes: TopologyDeployLocalNode... (DONE)\r\n* browser router (for single page application and more) (DONE)\r\n* isomorphic cache management (DONE)\r\n* versionned Collection to register versionned items (CURRENT)\r\n \r\n\r\nMain breaking changes:\r\n* settings json format has evolved\r\n* module was renamed to package\r\n* change Collection.$items from [] to {}, use lodash as collection backend\r\n\r\n\r\n\r\nNew topology tree is now:\r\n```\r\nworld: the root of the topology\r\n\r\n-nodes\r\n--nodeA\r\n---serverA1\r\n---serverA2\r\n\r\n-tenants\r\n--tenantA\r\n---applications\r\n----applicationA\r\n-----url\r\n-----license\r\n-----provided_services\r\n-----used_services\r\n-----used_packages\r\n-----used_plugins\r\n-----assets\r\n---packages\r\n----packageA\r\n-----base_dir\r\n-----resources\r\n-----services\r\n---security\r\n\r\n-plugins\r\n--pluginA\r\n---type\r\n---file or package\r\n\r\n-deployments\r\n--tenantA\r\n---applicationA\r\n----assets\r\n----services\r\n\r\n-security\r\n-loggers\r\n-traces\r\n```\r\nThat's why previous roadmap is outdated, sorry for the changes.\r\n\r\n\r\n\r\n### enhance core features, architecture and stability (previous 1.1.x)\r\n\r\n#### PROJECT\r\n* refactor directories into common/, browser/, server/ (DONE)\r\n* implement Unit tests for base classes (CURRENT)\r\n* use babel-register to debug without build to dist/ directory (DONE)\r\n* test on nodejs 4.4, 5.1, 6.x (DONE)\r\n\r\n#### FEATURES\r\n* implement browser router for single page application (DONE)\r\n* enhance devapt-devtools: runtime registry viewing (DONE)\r\n* enhance devapt-devtools: runtime topology viewing (DONE)\r\n* enhance devapt-devtools: metrics on topology (TODO)\r\n* enhance devapt-devtools: application Redux state viewing (TODO)\r\n* enhance devapt-devtools: application Redux state history player (TODO)\r\n* implement unit test for instances, traces, loggers... (CURRENT)\r\n* implement topology registry (DONE)\r\n* implement topology runtime (DONE)\r\n* implement generic api for state storing (Redux, Map) (DONE)\r\n* implement cache management classes for browser and server (DONE)\r\n\r\n\r\n\r\n### enhance datas access features (previous 1.3.x)\r\n\r\n### PROJECT\r\n* document datas access layers (TODO)\r\n* write Unit tests for datas access classes (TODO)\r\n\r\n\r\n### FEATURES\r\n* enhance devapt-devtools: create datas access dashboard (TODO)\r\n* enhance devapt-devtools: create datas admin backend (TODO)\r\n* implement homogeneous datas access for all datasources (DONE)\r\n* enhance sequelize datasource for SQL databases:MySQL, MariaDb, PostgreSQL, SQLite, MSSQL (DONE)\r\n* implement waterline ORM layer (TODO)\r\n* implement Redis datasource for caching, messaging, NoSQL database (TODO)\r\n* implement datas management classes for browser and server (DONE)\r\n* implement datas cache on distributed nodes (TODO)\r\n\r\n\r\n\r\n## 2.1.x\tenhance distributed features and documentatioon (LATER)\r\n\r\n### PROJECT\r\n* update web site on github with project/, technical/... (TODO)\r\n* document build process (TODO)\r\n\r\n\r\n### FEATURES\r\n* implement distributed services consumers (TODO)\r\n* implement master configuration changes: receive and propagate complete/add/remove/update (TODO)\r\n* implement master node revocation and promotion (TODO)\r\n* implement node settings filter (TODO)\r\n* implement swagger API player (TODO)\r\n* implement circuit breaker on browser (TODO)\r\n\r\n\r\n\r\n## 2.2.x\tenhance security features (LATER)\r\n\r\n### PROJECT\r\n* document security process (TODO)\r\n* write Unit tests for security classes (TODO)\r\n\r\n\r\n### FEATURES\r\n* enhance devapt-devtools: create security dashboard (TODO)\r\n* enhance devapt-devtools: create security admin backend (TODO)\r\n* implement security routes /login, /signup, /logout (TODO)\r\n* implement Passport security plugin (TODO)\r\n* implement authorization with ACL (TODO)\r\n* implement security token (TODO)\r\n* implement registry setting validation with a json schema (TODO)\r\n\r\n\r\n\r\n## 2.3.x\timplement Cloud features (LATER)\r\n\r\n### PROJECT\r\n* document Cloud integration process (TODO)\r\n* write Unit tests for Cloud integration classes (TODO)\r\n\r\n\r\n### FEATURES\r\n* implement AWS DynamoDB datasource (TODO)\r\n* implement AWS Lambda integration (TODO)\r\n* implement AWS Security integration (TODO)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "static": true,
    "access": "public"
  }
]